"use strict";(self.webpackChunkbigdata_blog=self.webpackChunkbigdata_blog||[]).push([[5002],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>m});var a=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var p=a.createContext({}),s=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=s(n.components);return a.createElement(p.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,p=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),u=s(t),m=i,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(g,o(o({ref:e},c),{},{components:t})):a.createElement(g,o({ref:e},c))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=n,l.mdxType="string"==typeof n?n:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},961:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={authors:[{name:"skylines",url:"https://github.com/rookiegao"}],tags:["\u6570\u636e\u4ed3\u5e93"]},o="\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1",l={permalink:"/Bigdata_Blog_Website/blog/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1",source:"@site/blog/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1.md",title:"\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1",description:"\u91c7\u96c6\u5230 Kafka \u7684 topiclog \u548c topicdb \u4e3b\u9898\u7684\u6570\u636e\u5373\u4e3a\u5b9e\u65f6\u6570\u4ed3\u7684 ODS \u5c42\uff0c\u8fd9\u4e00\u5c42\u7684\u4f5c\u7528\u662f\u5bf9\u6570\u636e\u505a\u539f\u6837\u5c55\u793a\u548c\u5907\u4efd\u3002",date:"2022-11-26T02:41:28.000Z",formattedDate:"2022\u5e7411\u670826\u65e5",tags:[{label:"\u6570\u636e\u4ed3\u5e93",permalink:"/Bigdata_Blog_Website/blog/tags/\u6570\u636e\u4ed3\u5e93"}],readingTime:102.215,hasTruncateMarker:!0,authors:[{name:"skylines",url:"https://github.com/rookiegao"}],frontMatter:{authors:[{name:"skylines",url:"https://github.com/rookiegao"}],tags:["\u6570\u636e\u4ed3\u5e93"]},prevItem:{title:"IDEA CheckStyle \u914d\u7f6e",permalink:"/Bigdata_Blog_Website/blog/IDEA CheckStyle \u914d\u7f6e"},nextItem:{title:"\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840",permalink:"/Bigdata_Blog_Website/blog/\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840"}},p={authorsImageUrls:[void 0]},s=[{value:"\u914d\u7f6e\u8868",id:"\u914d\u7f6e\u8868",level:2},{value:"Flink CDC",id:"flink-cdc",level:3},{value:"\u914d\u7f6e\u8868\u8bbe\u8ba1",id:"\u914d\u7f6e\u8868\u8bbe\u8ba1",level:3},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1",level:2},{value:"\u63a5\u6536Kafka\u6570\u636e\uff0c\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e",id:"\u63a5\u6536kafka\u6570\u636e\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e",level:3},{value:"\u52a8\u6001\u62c6\u5206\u7ef4\u5ea6\u8868\u529f\u80fd",id:"\u52a8\u6001\u62c6\u5206\u7ef4\u5ea6\u8868\u529f\u80fd",level:3},{value:"\u628a\u6d41\u4e2d\u7684\u6570\u636e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u7ef4\u5ea6\u8868",id:"\u628a\u6d41\u4e2d\u7684\u6570\u636e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u7ef4\u5ea6\u8868",level:3},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2},{value:"\u63a5\u6536Kafka\u6570\u636e\uff0c\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e",id:"\u63a5\u6536kafka\u6570\u636e\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e-1",level:3},{value:"\u6839\u636eMySQL\u7684\u914d\u7f6e\u8868\uff0c\u52a8\u6001\u8fdb\u884c\u5206\u6d41",id:"\u6839\u636emysql\u7684\u914d\u7f6e\u8868\u52a8\u6001\u8fdb\u884c\u5206\u6d41",level:3},{value:"\u4fdd\u5b58\u7ef4\u5ea6\u5230HBase(Phoenix)",id:"\u4fdd\u5b58\u7ef4\u5ea6\u5230hbasephoenix",level:3},{value:"\u6d41\u91cf\u57df\u672a\u7ecf\u52a0\u5de5\u7684\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u6d41\u91cf\u57df\u672a\u7ecf\u52a0\u5de5\u7684\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-1",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u6d41\u91cf\u57df\u72ec\u7acb\u8bbf\u5ba2\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u6d41\u91cf\u57df\u72ec\u7acb\u8bbf\u5ba2\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-2",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-1",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-1",level:3},{value:"\u6d41\u91cf\u57df\u7528\u6237\u8df3\u51fa\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u6d41\u91cf\u57df\u7528\u6237\u8df3\u51fa\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-3",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-1",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-2",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-2",level:3},{value:"\u4ea4\u6613\u57df\u52a0\u8d2d\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4ea4\u6613\u57df\u52a0\u8d2d\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-4",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-2",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-3",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-3",level:3},{value:"\u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u8868",id:"\u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-5",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-3",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-4",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-4",level:3},{value:"\u4ea4\u6613\u57df\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4ea4\u6613\u57df\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-6",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-4",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-5",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-5",level:3},{value:"\u4ea4\u6613\u57df\u53d6\u6d88\u8ba2\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4ea4\u6613\u57df\u53d6\u6d88\u8ba2\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-7",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-5",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-6",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-6",level:3},{value:"\u4ea4\u6613\u57df\u652f\u4ed8\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4ea4\u6613\u57df\u652f\u4ed8\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-8",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-6",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-7",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-7",level:3},{value:"\u4ea4\u6613\u57df\u9000\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4ea4\u6613\u57df\u9000\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-9",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-7",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-8",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-8",level:3},{value:"\u4ea4\u6613\u57df\u9000\u6b3e\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4ea4\u6613\u57df\u9000\u6b3e\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-10",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-8",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-9",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-9",level:3},{value:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u9886\u53d6\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u9886\u53d6\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-11",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-9",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-10",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-10",level:3},{value:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\uff08\u4e0b\u5355\uff09\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-12",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-10",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-11",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-11",level:3},{value:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528(\u652f\u4ed8)\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\u652f\u4ed8\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-13",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-11",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-12",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-12",level:3},{value:"\u4e92\u52a8\u57df\u6536\u85cf\u5546\u54c1\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4e92\u52a8\u57df\u6536\u85cf\u5546\u54c1\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-14",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-12",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-13",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-13",level:3},{value:"\u4e92\u52a8\u57df\u8bc4\u4ef7\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u4e92\u52a8\u57df\u8bc4\u4ef7\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-15",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-13",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-14",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-14",level:3},{value:"\u7528\u6237\u57df\u7528\u6237\u6ce8\u518c\u4e8b\u52a1\u4e8b\u5b9e\u8868",id:"\u7528\u6237\u57df\u7528\u6237\u6ce8\u518c\u4e8b\u52a1\u4e8b\u5b9e\u8868",level:2},{value:"\u4e3b\u8981\u4efb\u52a1",id:"\u4e3b\u8981\u4efb\u52a1-16",level:3},{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790-14",level:3},{value:"\u56fe\u89e3",id:"\u56fe\u89e3-15",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801-15",level:3}],c={toc:s};function d(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6570\u4ed3\u5f00\u53d1\u4e4bods\u5c42"},"\u6570\u4ed3\u5f00\u53d1\u4e4bODS\u5c42"),(0,i.kt)("p",null,"\u91c7\u96c6\u5230 Kafka \u7684 topic_log \u548c topic_db \u4e3b\u9898\u7684\u6570\u636e\u5373\u4e3a\u5b9e\u65f6\u6570\u4ed3\u7684 ODS \u5c42\uff0c\u8fd9\u4e00\u5c42\u7684\u4f5c\u7528\u662f\u5bf9\u6570\u636e\u505a\u539f\u6837\u5c55\u793a\u548c\u5907\u4efd\u3002"),(0,i.kt)("p",null,"\u6570\u4ed3\u5f00\u53d1\u4e4bDIM\u5c42"),(0,i.kt)("p",null,"DIM\u5c42\u8bbe\u8ba1\u8981\u70b9\uff1a"),(0,i.kt)("p",null,"\uff081\uff09DIM\u5c42\u7684\u8bbe\u8ba1\u4f9d\u636e\u662f\u7ef4\u5ea6\u5efa\u6a21\u7406\u8bba\uff0c\u8be5\u5c42\u5b58\u50a8\u7ef4\u5ea6\u6a21\u578b\u7684\u7ef4\u5ea6\u8868\u3002"),(0,i.kt)("p",null,"\uff082\uff09DIM\u5c42\u7684\u6570\u636e\u5b58\u50a8\u5728 HBase \u8868\u4e2d"),(0,i.kt)("p",null,"DIM \u5c42\u8868\u662f\u7528\u4e8e\u7ef4\u5ea6\u5173\u8054\u7684\uff0c\u8981\u901a\u8fc7\u4e3b\u952e\u53bb\u83b7\u53d6\u76f8\u5173\u7ef4\u5ea6\u4fe1\u606f\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b K-V \u7c7b\u578b\u6570\u636e\u5e93\u7684\u6548\u7387\u8f83\u9ad8\u3002"),(0,i.kt)("p",null,"\u5e38\u89c1\u7684 K-V \u7c7b\u578b\u6570\u636e\u5e93\u6709 Redis\u3001HBase\uff0c\u800c Redis \u7684\u6570\u636e\u5e38\u9a7b\u5185\u5b58\uff0c\u4f1a\u7ed9\u5185\u5b58\u9020\u6210\u8f83\u5927\u538b\u529b\uff0c\u56e0\u800c\u9009\u7528 HBase \u5b58\u50a8\u7ef4\u5ea6\u6570\u636e\u3002"),(0,i.kt)("p",null,"\uff083\uff09DIM\u5c42\u8868\u540d\u7684\u547d\u540d\u89c4\u8303\u4e3adim_\u8868\u540d"),(0,i.kt)("h2",{id:"\u914d\u7f6e\u8868"},"\u914d\u7f6e\u8868"),(0,i.kt)("p",null,"\u672c\u5c42\u7684\u4efb\u52a1\u662f\u5c06\u4e1a\u52a1\u6570\u636e\u76f4\u63a5\u5199\u5165\u5230\u4e0d\u540c\u7684 HBase \u8868\u4e2d\u3002\u90a3\u4e48\u5982\u4f55\u8ba9\u7a0b\u5e8f\u77e5\u9053\u6d41\u4e2d\u7684\u54ea\u4e9b\u6570\u636e\u662f\u7ef4\u5ea6\u6570\u636e\uff1f"),(0,i.kt)("p",null,"\u7ef4\u5ea6\u6570\u636e\u53c8\u5e94\u8be5\u5199\u5230 HBase \u7684\u54ea\u4e9b\u8868\u4e2d\uff1f"),(0,i.kt)("p",null,"\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9009\u62e9\u5728 MySQL \u4e2d\u6784\u5efa\u4e00\u5f20\u914d\u7f6e\u8868\uff0c\u901a\u8fc7 Flink CDC \u5c06\u914d\u7f6e\u8868\u4fe1\u606f\u8bfb\u53d6\u5230\u7a0b\u5e8f\u4e2d\u3002"),(0,i.kt)("h3",{id:"flink-cdc"},"Flink CDC"),(0,i.kt)("h3",{id:"\u914d\u7f6e\u8868\u8bbe\u8ba1"},"\u914d\u7f6e\u8868\u8bbe\u8ba1"),(0,i.kt)("p",null,"1\uff09\u5b57\u6bb5\u89e3\u6790"),(0,i.kt)("p",null,"\u6211\u4eec\u5c06\u4e3a\u914d\u7f6e\u8868\u8bbe\u8ba1\u4e94\u4e2a\u5b57\u6bb5"),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"source_table\uff1a\u4f5c\u4e3a\u6570\u636e\u6e90\u7684\u4e1a\u52a1\u6570\u636e\u8868\u540d \n\nsink_table\uff1a\u4f5c\u4e3a\u6570\u636e\u76ee\u7684\u5730\u7684 Phoenix \u8868\u540d\n\nsink_columns\uff1aPhoenix \u8868\u5b57\u6bb5\n\nsink_pk\uff1aPhoenix \u8868\u4e3b\u952e\n\nsink_extend\uff1aPhoenix \u5efa\u8868\u6269\u5c55\uff0c\u5373\u5efa\u8868\u65f6\u4e00\u4e9b\u989d\u5916\u7684\u914d\u7f6e\u8bed\u53e5\n"))),(0,i.kt)("p",null,"\u5c06 source_table \u4f5c\u4e3a\u914d\u7f6e\u8868\u7684\u4e3b\u952e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u83b7\u53d6\u552f\u4e00\u7684\u76ee\u6807\u8868\u540d\u3001\u5b57\u6bb5\u3001\u4e3b\u952e\u548c\u5efa\u8868\u6269\u5c55\uff0c\u4ece\u800c\u5f97\u5230\u5b8c\u6574\u7684 Phoenix \u5efa\u8868\u8bed\u53e5\u3002"),(0,i.kt)("p",null,"2\uff09\u5728Mysql\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u5efa\u8868\u5e76\u5f00\u542fBinlog"),(0,i.kt)("p",null,"\uff081\uff09\u521b\u5efa\u6570\u636e\u5e93 gmall_config \uff0c\u6ce8\u610f:\u548c gmall \u4e1a\u52a1\u5e93\u533a\u5206\u5f00"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'[atguigu@hadoop102 db_log]$ mysql -uroot -p000000 -e"create database gmall_config charset utf8 default collate utf8_general_ci"\n\n')),(0,i.kt)("p",null,"\uff082\uff09\u5728 gmall_config \u5e93\u4e2d\u521b\u5efa\u914d\u7f6e\u8868 table_process"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE TABLE `table_process` (\n  `source_table` varchar(200) NOT NULL COMMENT '\u6765\u6e90\u8868',\n  `sink_table` varchar(200) DEFAULT NULL COMMENT '\u8f93\u51fa\u8868',\n  `sink_columns` varchar(2000) DEFAULT NULL COMMENT '\u8f93\u51fa\u5b57\u6bb5',\n  `sink_pk` varchar(200) DEFAULT NULL COMMENT '\u4e3b\u952e\u5b57\u6bb5',\n  `sink_extend` varchar(200) DEFAULT NULL COMMENT '\u5efa\u8868\u6269\u5c55',\n  PRIMARY KEY (`source_table`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n")),(0,i.kt)("p",null,"\uff083\uff09\u5728MySQL\u914d\u7f6e\u6587\u4ef6\u4e2d\u589e\u52a0 gmall_config \u5f00\u542fBinlog"),(0,i.kt)("p",null,"\u53c2\u8003 Flink cdc \u6587\u6863\u3002"),(0,i.kt)("p",null,"\u914d\u7f6e\u8868\u5efa\u8868\u53ca\u6570\u636e\u5bfc\u5165 SQL \u6587\u4ef6\u5982\u4e0b\u3002"),(0,i.kt)("p",null,"\u7565\u3002"),(0,i.kt)("h2",{id:"\u4e3b\u8981\u4efb\u52a1"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("h3",{id:"\u63a5\u6536kafka\u6570\u636e\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e"},"\u63a5\u6536Kafka\u6570\u636e\uff0c\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e"),(0,i.kt)("p",null,"\u5bf9Maxwell\u6293\u53d6\u7684\u6570\u636e\u8fdb\u884cETL\uff0c\u6709\u7528\u7684\u90e8\u5206\u4fdd\u7559\uff0c\u6ca1\u7528\u7684\u8fc7\u6ee4\u6389\u3002"),(0,i.kt)("h3",{id:"\u52a8\u6001\u62c6\u5206\u7ef4\u5ea6\u8868\u529f\u80fd"},"\u52a8\u6001\u62c6\u5206\u7ef4\u5ea6\u8868\u529f\u80fd"),(0,i.kt)("p",null,"\u7531\u4e8eMaxwell\u662f\u628a\u5168\u90e8\u6570\u636e\u7edf\u4e00\u5199\u5165\u4e00\u4e2aTopic\u4e2d, \u8fd9\u6837\u663e\u7136\u4e0d\u5229\u4e8e\u65e5\u540e\u7684\u6570\u636e\u5904\u7406\u3002\u6240\u4ee5\u9700\u8981\u628a\u5404\u4e2a\u7ef4\u5ea6\u8868\u62c6\u5f00\u5904\u7406\u3002"),(0,i.kt)("p",null,"\u5728\u5b9e\u65f6\u8ba1\u7b97\u4e2d\u4e00\u822c\u628a\u7ef4\u5ea6\u6570\u636e\u5199\u5165\u5b58\u50a8\u5bb9\u5668\uff0c\u4e00\u822c\u662f\u65b9\u4fbf\u901a\u8fc7\u4e3b\u952e\u67e5\u8be2\u7684\u6570\u636e\u5e93\u6bd4\u5982HBase,Redis,MySQL\u7b49\u3002"),(0,i.kt)("p",null,"\u8fd9\u6837\u7684\u914d\u7f6e\u4e0d\u9002\u5408\u5199\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u4e1a\u52a1\u7aef\u968f\u7740\u9700\u6c42\u53d8\u5316\u6bcf\u589e\u52a0\u4e00\u5f20\u7ef4\u5ea6\u8868\u8868\uff0c\u5c31\u8981\u4fee\u6539\u914d\u7f6e\u91cd\u542f\u8ba1\u7b97\u7a0b\u5e8f\u3002"),(0,i.kt)("p",null,"\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4e00\u79cd\u52a8\u6001\u914d\u7f6e\u65b9\u6848\uff0c\u628a\u8fd9\u79cd\u914d\u7f6e\u957f\u671f\u4fdd\u5b58\u8d77\u6765\uff0c\u4e00\u65e6\u914d\u7f6e\u6709\u53d8\u5316\uff0c\u5b9e\u65f6\u8ba1\u7b97\u53ef\u4ee5\u81ea\u52a8\u611f\u77e5\u3002\u8fd9\u79cd\u53ef\u4ee5\u6709\u4e09\u4e2a\u65b9\u6848\u5b9e\u73b0\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u4e00\u79cd\u662f\u7528Zookeeper\u5b58\u50a8\uff0c\u901a\u8fc7Watch\u611f\u77e5\u6570\u636e\u53d8\u5316\uff1b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u53e6\u4e00\u79cd\u662f\u7528mysql\u6570\u636e\u5e93\u5b58\u50a8\uff0c\u5468\u671f\u6027\u7684\u540c\u6b65\uff1b")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"\u518d\u4e00\u79cd\u662f\u7528mysql\u6570\u636e\u5e93\u5b58\u50a8\uff0c\u4f7f\u7528\u5e7f\u64ad\u6d41\u3002"))),(0,i.kt)("p",null,"\u8fd9\u91cc\u9009\u62e9\u7b2c\u4e09\u79cd\u65b9\u6848\uff0c\u4e3b\u8981\u662fMySQL\u5bf9\u4e8e\u914d\u7f6e\u6570\u636e\u521d\u59cb\u5316\u548c\u7ef4\u62a4\u7ba1\u7406\uff0c\u4f7f\u7528FlinkCDC\u8bfb\u53d6\u914d\u7f6e\u4fe1\u606f\u8868\uff0c\u5c06\u914d\u7f6e\u6d41\u4f5c\u4e3a\u5e7f\u64ad\u6d41\u4e0e\u4e3b\u6d41\u8fdb\u884c\u8fde\u63a5\u3002"),(0,i.kt)("p",null,"\u6240\u4ee5\u5c31\u6709\u4e86\u5982\u4e0b\u56fe\uff1a"),(0,i.kt)("p",null," ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242138-a6ab05fb-7e84-43af-a703-7c3af95b4f14.png",alt:"img"})),(0,i.kt)("h3",{id:"\u628a\u6d41\u4e2d\u7684\u6570\u636e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u7ef4\u5ea6\u8868"},"\u628a\u6d41\u4e2d\u7684\u6570\u636e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u7ef4\u5ea6\u8868"),(0,i.kt)("p",null,"\u7ef4\u5ea6\u6570\u636e\u4fdd\u5b58\u5230HBase\u7684\u8868\u4e2d\u3002"),(0,i.kt)("h2",{id:"\u4ee3\u7801\u5b9e\u73b0"},"\u4ee3\u7801\u5b9e\u73b0"),(0,i.kt)("h3",{id:"\u63a5\u6536kafka\u6570\u636e\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e-1"},"\u63a5\u6536Kafka\u6570\u636e\uff0c\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e"),(0,i.kt)("p",null,"1\uff09\u521b\u5efa KafkaUtil \u5de5\u5177\u7c7b"),(0,i.kt)("p",null,"\u548c Kafka \u4ea4\u4e92\u8981\u7528\u5230 Flink \u63d0\u4f9b\u7684 FlinkKafkaConsumer\u3001FlinkKafkaProducer \u7c7b\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6a21\u677f\u4ee3\u7801\u7684\u590d\u7528\u6027\uff0c\u5c06\u5176\u5c01\u88c5\u5230 KafkaUtil \u5de5\u5177\u7c7b\u4e2d\u3002"),(0,i.kt)("p",null,"\u6b64\u5904\u4ece Kafka \u8bfb\u53d6\u6570\u636e\uff0c\u521b\u5efa getKafkaConsumer(String topic, String groupId) \u65b9\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public class KafkaUtil {\n    static String BOOTSTRAP_SERVERS = "hadoop102:9092, hadoop103:9092, hadoop104:9092";\n    static String DEFAULT_TOPIC = "default_topic";\n\n    public static FlinkKafkaConsumer<String>  getKafkaConsumer(String topic, String groupId) {\n        Properties prop = new Properties();\n        prop.setProperty("bootstrap.servers", BOOTSTRAP_SERVERS);\n        prop.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n\n        FlinkKafkaConsumer<String> consumer = new FlinkKafkaConsumer<>(topic,\n                new KafkaDeserializationSchema<String>() {\n                    @Override\n                    public boolean isEndOfStream(String nextElement) {\n                        return false;\n                    }\n\n                    @Override\n                    public String deserialize(ConsumerRecord<byte[], byte[]> record) throws Exception {\n                        if(record != null && record.value() != null) {\n                            return new String(record.value());\n                        }\n                        return null;\n                    }\n\n                    @Override\n                    public TypeInformation<String> getProducedType() {\n                        return TypeInformation.of(String.class);\n                    }\n                }, prop);\n        return consumer;\n}\n}\n')),(0,i.kt)("p",null,"2\uff09\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public class DimSinkApp {\n    public static void main(String[] args) throws Exception {\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                10, Time.of(1L, TimeUnit.DAYS), Time.of(3L, TimeUnit.MINUTES)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/gmall/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u8bfb\u53d6\u4e1a\u52a1\u4e3b\u6d41\n        String topic = "topic_db";\n        String groupId = "dim_sink_app";\n        DataStreamSource<String> gmallDS = env.addSource(KafkaUtil.getKafkaConsumer(topic, groupId));\n\n        // TODO 4. \u4e3b\u6d41\u6570\u636e\u7ed3\u6784\u8f6c\u6362\n        SingleOutputStreamOperator<JSONObject> jsonDS = gmallDS.map(JSON::parseObject);\n\n        // TODO 5. \u4e3b\u6d41 ETL\n        SingleOutputStreamOperator<JSONObject> filterDS = jsonDS.filter(\n                jsonObj ->\n                {\n                    try {\n                        jsonObj.getJSONObject("data");\n                        if(jsonObj.getString("type").equals("bootstrap-start")\n                        || jsonObj.getString("type").equals("bootstrap-complete")) {\n                            return false;\n                        }\n                        return true;\n                    } catch (JSONException jsonException) {\n                        return false;\n                    }\n                });\n        \n        // \u6253\u5370\u6d4b\u8bd5\n        filterDS.print("filterDS >>> ");\n\n        env.execute();\n}\n}\n')),(0,i.kt)("h3",{id:"\u6839\u636emysql\u7684\u914d\u7f6e\u8868\u52a8\u6001\u8fdb\u884c\u5206\u6d41"},"\u6839\u636eMySQL\u7684\u914d\u7f6e\u8868\uff0c\u52a8\u6001\u8fdb\u884c\u5206\u6d41"),(0,i.kt)("p",null,"1\uff09\u5bfc\u5165\u4f9d\u8d56"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-connector-jdbc_${scala.version}</artifactId>\n            <version>${flink.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.ververica</groupId>\n            <artifactId>flink-connector-mysql-cdc</artifactId>\n            <version>2.1.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.phoenix</groupId>\n            <artifactId>phoenix-spark</artifactId>\n            <version>5.0.0-HBase-2.0</version>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.glassfish</groupId>\n                    <artifactId>javax.el</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n    \x3c!-- \u5982\u679c\u4e0d\u5f15\u5165 flink-table \u76f8\u5173\u4f9d\u8d56\uff0c\u5219\u4f1a\u62a5\u9519\uff1a\nCaused by: java.lang.ClassNotFoundException: \norg.apache.flink.connector.base.source.reader.RecordEmitter\n\u5f15\u5165\u4ee5\u4e0b\u4f9d\u8d56\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u5f15\u5165\u67d0\u4e9b\u5176\u5b83\u7684 flink-table\u76f8\u5173\u4f9d\u8d56\u4e5f\u53ef\uff09\n--\x3e\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-table-api-java-bridge_2.12</artifactId>\n            <version>1.13.0</version>\n        </dependency>\n")),(0,i.kt)("p",null,"2\uff09\u521b\u5efa\u914d\u7f6e\u8868\u5b9e\u4f53\u7c7b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package com.atguigu.gmall.realtime.bean;\nimport lombok.Data;\n\n@Data\npublic class TableProcess {\n    //\u6765\u6e90\u8868\n    String sourceTable;\n    //\u8f93\u51fa\u8868\n    String sinkTable;\n    //\u8f93\u51fa\u5b57\u6bb5\n    String sinkColumns;\n    //\u4e3b\u952e\u5b57\u6bb5\n    String sinkPk;\n    //\u5efa\u8868\u6269\u5c55\n    String sinkExtend;\n}\n")),(0,i.kt)("p",null,"4\uff09\u7f16\u5199\u64cd\u4f5c\u8bfb\u53d6\u914d\u7f6e\u8868\u5f62\u6210\u5e7f\u64ad\u6d41"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// TODO 6. FlinkCDC \u8bfb\u53d6\u914d\u7f6e\u6d41\u5e76\u5e7f\u64ad\u6d41\n        // 6.1 FlinkCDC \u8bfb\u53d6\u914d\u7f6e\u8868\u4fe1\u606f\n        MySqlSource<String> mySqlSource = MySqlSource.<String>builder()\n                .hostname("hadoop102")\n                .port(3306)\n                .databaseList("gmall_config") // set captured database\n                .tableList("gmall_config.table_process") // set captured table\n                .username("root")\n                .password("000000")\n                .deserializer(new JsonDebeziumDeserializationSchema()) // converts SourceRecord to JSON String\n                .startupOptions(StartupOptions.initial())\n                .build();\n\n        // 6.2 \u5c01\u88c5\u4e3a\u6d41\n        DataStreamSource<String> mysqlDSSource = env.fromSource(mySqlSource, WatermarkStrategy.noWatermarks(), "MysqlSource");\n\n        // 6.3 \u5e7f\u64ad\u914d\u7f6e\u6d41\n        MapStateDescriptor<String, TableProcess> tableConfigDescriptor = new MapStateDescriptor<String, TableProcess>("table-process-state", String.class, TableProcess.class);\n        BroadcastStream<String> broadcastDS = mysqlDSSource.broadcast(tableConfigDescriptor);\n\n        // TODO 7. \u8fde\u63a5\u6d41\n        BroadcastConnectedStream<JSONObject, String> connectedStream = filterDS.connect(broadcastDS);\n')),(0,i.kt)("p",null,"5\uff09\u5b9a\u4e49\u4e00\u4e2a\u9879\u76ee\u4e2d\u5e38\u7528\u7684\u914d\u7f6e\u5e38\u91cf\u7c7bGmallConfig"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.common;\n\npublic class GmallConfig {\n\n    // Phoenix\u5e93\u540d\n    public static final String HBASE_SCHEMA = "GMALL2022_REALTIME";\n\n    // Phoenix\u9a71\u52a8\n    public static final String PHOENIX_DRIVER = "org.apache.phoenix.jdbc.PhoenixDriver";\n\n    // Phoenix\u8fde\u63a5\u53c2\u6570\n    public static final String PHOENIX_SERVER = "jdbc:phoenix:hadoop102,hadoop103,hadoop104:2181";\n}\n')),(0,i.kt)("p",null,"6\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction"),(0,i.kt)("p",null," ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242215-ed2186bf-6999-4501-bf09-e7c855071ae1.png",alt:"img"})),(0,i.kt)("p",null,"\uff081\uff09\u5b9a\u4e49\u7c7bMyBroadcastFunction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package com.atguigu.gmall.realtime.app.func;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction;\nimport org.apache.flink.util.Collector;\nimport org.apache.flink.util.OutputTag;\n\npublic class MyBroadcastFunction extends BroadcastProcessFunction<JSONObject, String, JSONObject> {\n\n    private MapStateDescriptor<String, TableProcess> tableConfigDescriptor;\n\npublic MyBroadcastFunction(MapStateDescriptor<String, TableProcess> tableConfigDescriptor) {\n        this.tableConfigDescriptor = tableConfigDescriptor;\n}\n\n    @Override\n    public void processElement(JSONObject jsonObj, ReadOnlyContext readOnlyContext, Collector<JSONObject> out) throws Exception {\n\n    }\n\n    @Override\n    public void processBroadcastElement(String jsonStr, Context context, Collector<JSONObject> out) throws Exception {\n\n    }\n}\n")),(0,i.kt)("p",null,"\uff082\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-open"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// \u5b9a\u4e49Phoenix\u7684\u8fde\u63a5\nprivate Connection conn;\n\n@Override\n    public void open(Configuration parameter) throws Exception {\n        super.open(parameter);\n        Class.forName(GmallConfig.PHOENIX_DRIVER);\n        conn = DriverManager.getConnection(GmallConfig.PHOENIX_SERVER);\n    }\n")),(0,i.kt)("p",null,"\uff083\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-processBroadcastElement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@Override\n    public void processBroadcastElement(String jsonStr, Context context, Collector<JSONObject> out) throws Exception {\n        JSONObject jsonObj = JSON.parseObject(jsonStr);\n        TableProcess config = jsonObj.getObject("after", TableProcess.class);\n\n        String sourceTable = config.getSourceTable();\n        String sinkTable = config.getSinkTable();\n        String sinkColumns = config.getSinkColumns();\n        String sinkPk = config.getSinkPk();\n        String sinkExtend = config.getSinkExtend();\n\n        BroadcastState<String, TableProcess> tableConfigState = context.getBroadcastState(tableConfigDescriptor);\n        tableConfigState.put(sourceTable, config);\n\n        checkTable(sinkTable, sinkColumns, sinkPk, sinkExtend);\n    }\n')),(0,i.kt)("p",null,"\uff084\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-checkTable"),(0,i.kt)("p",null,"\u5728 Phoenix \u5efa\u8868\u4e4b\u524d\u8981\u5148\u521b\u5efa\u547d\u540d\u7a7a\u95f4 GMALL2022_REALTIM\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"0: jdbc:phoenix:> create schema GMALL2022_REALTIME;\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"checkTable() \u65b9\u6cd5\u5982\u4e0b\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'/**\n     * Phoenix \u5efa\u8868\u51fd\u6570\n     *\n     * @param sinkTable \u76ee\u6807\u8868\u540d  eg. test\n     * @param sinkColumns \u76ee\u6807\u8868\u5b57\u6bb5  eg. id,name,sex\n     * @param sinkPk \u76ee\u6807\u8868\u4e3b\u952e  eg. id\n     * @param sinkExtend \u76ee\u6807\u8868\u5efa\u8868\u6269\u5c55\u5b57\u6bb5  eg. ""\n     *                   eg. create table if not exists mydb.test(id varchar primary key, name varchar, sex varchar)...\n     */\n    private void checkTable(String sinkTable, String sinkColumns, String sinkPk, String sinkExtend) {\n        // \u5c01\u88c5\u5efa\u8868 SQL \n        StringBuilder sql = new StringBuilder();\n        sql.append("create table if not exists " + GmallConfig.HBASE_SCHEMA\n                + "." + sinkTable + "(\\n");\n        String[] columnArr = sinkColumns.split(",");\n        // \u4e3a\u4e3b\u952e\u53ca\u6269\u5c55\u5b57\u6bb5\u8d4b\u9ed8\u8ba4\u503c\n        if (sinkPk == null) {\n            sinkPk = "id";\n        }\n        if (sinkExtend == null) {\n            sinkExtend = "";\n        }\n        // \u904d\u5386\u6dfb\u52a0\u5b57\u6bb5\u4fe1\u606f\n        for (int i = 0; i < columnArr.length; i++) {\n            sql.append(columnArr[i] + " varchar");\n            // \u5224\u65ad\u5f53\u524d\u5b57\u6bb5\u662f\u5426\u4e3a\u4e3b\u952e\n            if (sinkPk.equals(columnArr[i])) {\n                sql.append(" primary key");\n            }\n            // \u5982\u679c\u5f53\u524d\u5b57\u6bb5\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5219\u8ffd\u52a0","\n            if (i < columnArr.length - 1) {\n                sql.append(",\\n");\n            }\n        }\n        sql.append(")");\n        sql.append(sinkExtend);\n        String createStatement = sql.toString();\n        // \u4e3a\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u8d4b\u9ed8\u8ba4\u503c\uff0c\u6267\u884c\u5efa\u8868 SQL \n        PreparedStatement preparedSt = null;\n        try {\n            preparedSt = conn.prepareStatement(createStatement);\n            preparedSt.execute();\n        } catch (SQLException sqlException) {\n            sqlException.printStackTrace();\n            System.out.println("\u5efa\u8868\u8bed\u53e5\\n" + createStatement + "\\n\u6267\u884c\u5f02\u5e38");\n        } finally {\n            if (preparedSt != null) {\n                try {\n                    preparedSt.close();\n                } catch (SQLException sqlException) {\n                    sqlException.printStackTrace();\n                    throw new RuntimeException("\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u91ca\u653e\u5f02\u5e38");\n                }\n            }\n        }\n    }\n')),(0,i.kt)("p",null,"\uff085\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-processElement()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'@Override\n   public void processElement(JSONObject jsonObj, ReadOnlyContext readOnlyContext, Collector<JSONObject> out) throws Exception {\n       ReadOnlyBroadcastState<String, TableProcess> tableConfigState = readOnlyContext.getBroadcastState(tableConfigDescriptor);\n       // \u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\n       String sourceTable = jsonObj.getString("table");\n       TableProcess tableConfig = tableConfigState.get(sourceTable);\n       if (tableConfig != null) {\n           JSONObject data = jsonObj.getJSONObject("data");\n           String sinkTable = tableConfig.getSinkTable();\n\n           // \u6839\u636e sinkColumns \u8fc7\u6ee4\u6570\u636e\n           String sinkColumns = tableConfig.getSinkColumns();\n           filterColumns(data, sinkColumns);\n\n           // \u5c06\u76ee\u6807\u8868\u540d\u52a0\u5165\u5230\u4e3b\u6d41\u6570\u636e\u4e2d\n           data.put("sinkTable", sinkTable);\n            \n           out.collect(data);\n       }\n   }\n')),(0,i.kt)("p",null,"\uff086\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-filterColumns()\uff0c\u6821\u9a8c\u5b57\u6bb5\uff0c\u8fc7\u6ee4\u6389\u591a\u4f59\u7684\u5b57\u6bb5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"private void filterColumns(JSONObject data, String sinkColumns) {\n        Set<Map.Entry<String, Object>> dataEntries = data.entrySet();\n        dataEntries.removeIf(r -> !sinkColumns.contains(r.getKey()));\n    }\n")),(0,i.kt)("p",null,"\uff087\uff09\u4e3b\u7a0b\u5e8fDimSinkApp\u4e2d\u8c03\u7528MyBroadcastFunction\u63d0\u53d6\u7ef4\u5ea6\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// TODO 8. \u5904\u7406\u7ef4\u5ea6\u8868\u6570\u636e\n        SingleOutputStreamOperator<JSONObject> dimDS = connectedStream.process(\n                new MyBroadcastFunction(tableConfigDescriptor)\n        );\n")),(0,i.kt)("h3",{id:"\u4fdd\u5b58\u7ef4\u5ea6\u5230hbasephoenix"},"\u4fdd\u5b58\u7ef4\u5ea6\u5230HBase(Phoenix)"),(0,i.kt)("p",null,"1\uff09\u7a0b\u5e8f\u6d41\u7a0b\u5206\u6790"),(0,i.kt)("p",null," ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242508-adc1dcaa-f20d-4c50-8d52-02eb20e6a79f.png",alt:"img"})),(0,i.kt)("p",null,"DimSink \u7ee7\u627f\u4e86RickSinkFunction\uff0c\u8fd9\u4e2afunction\u5f97\u5206\u4e24\u6761\u65f6\u95f4\u7ebf\uff1a"),(0,i.kt)("p",null,"\u4e00\u6761\u662f\u4efb\u52a1\u542f\u52a8\u65f6\u6267\u884copen\u64cd\u4f5c\uff08\u56fe\u4e2d\u7d2b\u7ebf\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fde\u63a5\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u653e\u5728\u6b64\u5904\u4e00\u6b21\u6027\u6267\u884c\uff1b"),(0,i.kt)("p",null,"\u53e6\u4e00\u6761\u662f\u968f\u7740\u6bcf\u6761\u6570\u636e\u7684\u5230\u8fbe\u53cd\u590d\u6267\u884cinvoke()\uff08\u56fe\u4e2d\u9ed1\u7ebf\uff09,\u5728\u8fd9\u91cc\u9762\u6211\u4eec\u8981\u5b9e\u73b0\u6570\u636e\u7684\u4fdd\u5b58\uff0c\u4e3b\u8981\u7b56\u7565\u5c31\u662f\u6839\u636e\u6570\u636e\u7ec4\u5408\u6210sql\u63d0\u4ea4\u7ed9hbase\u3002"),(0,i.kt)("p",null,"3\uff09\u521b\u5efa PhoenixUtil \u5de5\u5177\u7c7b\uff0c\u5728\u5176\u4e2d\u521b\u5efainitializeConnection()\u65b9\u6cd5\u548cinsertValues()\u65b9\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.util;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.atguigu.gmall.realtime.common.GmallConfig;\nimport org.apache.commons.beanutils.BeanUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\n\npublic class PhoenixUtil {\n    // \u5b9a\u4e49\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\n    private static Connection conn;\n\n    /**\n     * \u521d\u59cb\u5316 SQL \u6267\u884c\u73af\u5883\n     */\n    public static void initializeConnection() {\n        try {\n            // 1. \u6ce8\u518c\u9a71\u52a8\n            Class.forName("org.apache.phoenix.jdbc.PhoenixDriver");\n            // 2. \u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61\n            conn = DriverManager.getConnection("jdbc:phoenix:hadoop102,hadoop103,hadoop104:2181");\n            // 3. \u8bbe\u7f6e Phoenix SQL \u6267\u884c\u4f7f\u7528\u7684 schema\uff08\u5bf9\u5e94 mysql \u7684 database\uff09\n            conn.setSchema(GmallConfig.HBASE_SCHEMA);\n        } catch (ClassNotFoundException classNotFoundException) {\n            System.out.println("\u6ce8\u518c\u9a71\u52a8\u5f02\u5e38");\n            classNotFoundException.printStackTrace();\n        } catch (SQLException sqlException) {\n            System.out.println("\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61\u5f02\u5e38");\n            ;\n            sqlException.printStackTrace();\n        }\n    }\n\n    /**\n     * Phoenix \u8868\u6570\u636e\u5bfc\u5165\u65b9\u6cd5\n     * @param sinkTable \u5199\u5165\u6570\u636e\u7684 Phoenix \u76ee\u6807\u8868\u540d\n     * @param data \u5f85\u5199\u5165\u7684\u6570\u636e\n     */\n    public static void insertValues(String sinkTable, JSONObject data) {\n        // \u53cc\u91cd\u6821\u9a8c\u9501\u521d\u59cb\u5316\u8fde\u63a5\u5bf9\u8c61\n        if(conn == null) {\n            synchronized (PhoenixUtil.class) {\n                if(conn == null) {\n                    initializeConnection();\n                }\n            }\n        }\n        // \u83b7\u53d6\u5b57\u6bb5\u540d\n        Set<String> columns = data.keySet();\n        // \u83b7\u53d6\u5b57\u6bb5\u5bf9\u5e94\u7684\u503c\n        Collection<Object> values = data.values();\n        // \u62fc\u63a5\u5b57\u6bb5\u540d\n        String columnStr = StringUtils.join(columns, ",");\n        // \u62fc\u63a5\u5b57\u6bb5\u503c\n        String valueStr = StringUtils.join(values, "\',\'");\n        // \u62fc\u63a5\u63d2\u5165\u8bed\u53e5\n        String sql = "upsert into " + GmallConfig.HBASE_SCHEMA\n                + "." + sinkTable + "(" +\n                columnStr + ") values (\'" + valueStr + "\')";\n\n        // \u4e3a\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u8d4b\u9ed8\u8ba4\u503c\n        PreparedStatement preparedSt = null;\n\n        // \u6267\u884c SQL\n        try {\n            System.out.println("\u63d2\u5165\u8bed\u53e5\u4e3a:" + sql);\n            preparedSt = conn.prepareStatement(sql);\n            preparedSt.execute();\n            conn.commit();\n        } catch (SQLException sqlException) {\n            sqlException.printStackTrace();\n            throw new RuntimeException("\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u83b7\u53d6\u6216\u6267\u884c\u5f02\u5e38");\n        } finally {\n            if(preparedSt != null) {\n                try {\n                    preparedSt.close();\n                } catch (SQLException sqlException) {\n                    sqlException.printStackTrace();\n                    throw new RuntimeException("\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u91ca\u653e\u5f02\u5e38");\n                }\n            }\n        }\n}\n}\n')),(0,i.kt)("p",null,"4\uff09MyPhoenixSink"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u81ea\u5b9a\u4e49 SinkFunction \u5b50\u7c7b MyPhoenixSink\uff0c\u5728\u5176\u4e2d\u8c03\u7528 Phoenix \u5de5\u5177\u7c7b\u7684 insertValues(String sinkTable, JSONObject data) \u65b9\u6cd5\uff0c\u5c06\u7ef4\u5ea6\u6570\u636e\u5199\u51fa\u5230 Phoenix \u7684\u7ef4\u5ea6\u8868\u4e2d\u3002\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.func;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.atguigu.gmall.realtime.util.PhoenixUtil;\nimport org.apache.flink.streaming.api.functions.sink.SinkFunction;\n\npublic class MyPhoenixSink implements SinkFunction<JSONObject> {\n\n    @Override\n    public void invoke(JSONObject jsonObj, Context context) throws Exception {\n        // \u83b7\u53d6\u76ee\u6807\u8868\u8868\u540d\n        String sinkTable = jsonObj.getString("sinkTable");\n        // \u6e05\u9664 JSON \u5bf9\u8c61\u4e2d\u7684 sinkTable \u5b57\u6bb5\uff0c\u4ee5\u4fbf\u53ef\u5c06\u8be5\u5bf9\u8c61\u76f4\u63a5\u7528\u4e8e HBase \u8868\u7684\u6570\u636e\u5199\u5165\n        jsonObj.remove("sinkTable");\n        PhoenixUtil.insertValues(sinkTable, jsonObj);\n    }\n}\n')),(0,i.kt)("p",null,"5\uff09\u4e3b\u7a0b\u5e8f DimSinkApp \u4e2d\u8c03\u7528 MyPhoenixSink"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// TODO 9. \u5c06\u6570\u636e\u5199\u5165 Phoenix \u8868\n        dimDS.addSink(new MyPhoenixSink());\n")),(0,i.kt)("p",null,"6\uff09\u6d4b\u8bd5"),(0,i.kt)("p",null,"\uff081\uff09\u542f\u52a8HDFS\u3001ZK\u3001Kafka\u3001Maxwell\u3001HBase"),(0,i.kt)("p",null,"\uff082\uff09\u8fd0\u884c IDEA \u4e2d\u7684 DimSinkApp"),(0,i.kt)("p",null,"\uff083\uff09\u6267\u884c mysql_to_kafka_init.sh \u811a\u672c"),(0,i.kt)("p",null,"mysql_to_kafka_init.sh all"),(0,i.kt)("p",null,"\uff086\uff09\u901a\u8fc7phoenix\u67e5\u770bhbase\u7684schema\u4ee5\u53ca\u8868\u60c5\u51b5"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242537-b7d64239-fd24-4615-af0f-37dc0d4b4245.png",alt:"img"})),(0,i.kt)("h1",{id:"\u6570\u4ed3\u5f00\u53d1\u4e4bdwd\u5c42"},"\u6570\u4ed3\u5f00\u53d1\u4e4bDWD\u5c42"),(0,i.kt)("p",null,"DWD\u5c42\u8bbe\u8ba1\u8981\u70b9\uff1a"),(0,i.kt)("p",null,"\uff081\uff09DWD\u5c42\u7684\u8bbe\u8ba1\u4f9d\u636e\u662f\u7ef4\u5ea6\u5efa\u6a21\u7406\u8bba\uff0c\u8be5\u5c42\u5b58\u50a8\u7ef4\u5ea6\u6a21\u578b\u7684\u4e8b\u5b9e\u8868\u3002"),(0,i.kt)("p",null,"\uff082\uff09DWD\u5c42\u8868\u540d\u7684\u547d\u540d\u89c4\u8303\u4e3adwd",(0,i.kt)("em",{parentName:"p"},"\u6570\u636e\u57df"),"\u8868\u540d"),(0,i.kt)("h2",{id:"\u6d41\u91cf\u57df\u672a\u7ecf\u52a0\u5de5\u7684\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u6d41\u91cf\u57df\u672a\u7ecf\u52a0\u5de5\u7684\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-1"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"1\uff09\u6570\u636e\u6e05\u6d17\uff08ETL\uff09"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u90e8\u5206\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u5bfc\u81f4 JSON \u6570\u636e\u7ed3\u6784\u4e0d\u518d\u5b8c\u6574\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u810f\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u3002\n")),(0,i.kt)("p",null,"2\uff09\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u65e5\u5fd7\u6570\u636e common \u5b57\u6bb5\u4e0b\u7684 is_new \u5b57\u6bb5\u662f\u7528\u6765\u6807\u8bb0\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u7684\uff0c1 \u8868\u793a\u65b0\u8bbf\u5ba2\uff0c2 \u8868\u793a\u8001\u8bbf\u5ba2\u3002\u524d\u7aef\u57cb\u70b9\u91c7\u96c6\u5230\u7684\u6570\u636e\u53ef\u9760\u6027\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8001\u8bbf\u5ba2\u88ab\u6807\u8bb0\u4e3a\u65b0\u8bbf\u5ba2\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u8be5\u6807\u8bb0\u8fdb\u884c\u4fee\u590d\u3002\n")),(0,i.kt)("p",null,"3\uff09\u5206\u6d41"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u672c\u8282\u5c06\u901a\u8fc7\u5206\u6d41\u5bf9\u65e5\u5fd7\u6570\u636e\u8fdb\u884c\u62c6\u5206\uff0c\u751f\u6210\u4e94\u5f20\u4e8b\u52a1\u4e8b\u5b9e\u8868\u5199\u5165 Kafka\n")),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"\u6d41\u91cf\u57df\u9875\u9762\u6d4f\u89c8\u4e8b\u52a1\u4e8b\u5b9e\u8868\n\n\u6d41\u91cf\u57df\u542f\u52a8\u4e8b\u52a1\u4e8b\u5b9e\u8868\n\n\u6d41\u91cf\u57df\u52a8\u4f5c\u4e8b\u52a1\u4e8b\u5b9e\u8868\n\n\u6d41\u91cf\u57df\u66dd\u5149\u4e8b\u52a1\u4e8b\u5b9e\u8868\n\n\u6d41\u91cf\u57df\u9519\u8bef\u4e8b\u52a1\u4e8b\u5b9e\u8868\n")),(0,i.kt)("h3",{parentName:"blockquote",id:"\u601d\u8def"},"\u601d\u8def")),(0,i.kt)("p",null,"1\uff09\u6570\u636e\u6e05\u6d17\uff08ETL\uff09"),(0,i.kt)("p",null,"\u5bf9\u6d41\u4e2d\u6570\u636e\u8fdb\u884c\u89e3\u6790\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a JSONObject\uff0c\u5982\u679c\u89e3\u6790\u62a5\u9519\u5219\u5fc5\u7136\u4e3a\u810f\u6570\u636e\u3002\u5b9a\u4e49\u4fa7\u8f93\u51fa\u6d41\uff0c\u5c06\u810f\u6570\u636e\u53d1\u9001\u5230\u4fa7\u8f93\u51fa\u6d41\uff0c\u5199\u5165 Kafka \u810f\u6570\u636e\u4e3b\u9898"),(0,i.kt)("p",null,"2\uff09\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d"),(0,i.kt)("p",null,"\uff081\uff09\u524d\u7aef\u57cb\u70b9\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u8bbe\u7f6e\u89c4\u5219"),(0,i.kt)("p",null,"\u4ee5\u795e\u7b56\u63d0\u4f9b\u7684\u7b2c\u4e09\u65b9\u57cb\u70b9\u670d\u52a1\u4e2d\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u8bbe\u7f6e\u89c4\u5219\u4e3a\u4f8b"),(0,i.kt)("blockquote",null,(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre"},"- Web \u7aef\uff1a\u7528\u6237\u7b2c\u4e00\u6b21\u8bbf\u95ee\u57cb\u5165\u795e\u7b56 SDK \u9875\u9762\u7684\u5f53\u5929\uff08\u5373\u7b2c\u4e00\u5929\uff09\uff0cJS SDK \u4f1a\u5728\u7f51\u9875\u7684 cookie \u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u9996\u65e5\u8bbf\u95ee\u7684\u6807\u8bb0\uff0c\u5e76\u8bbe\u7f6e\u7b2c\u4e00\u5929 24 \u70b9\u4e4b\u524d\uff0c\u8be5\u6807\u8bb0\u4e3a true\uff0c\u5373\u7b2c\u4e00\u5929\u89e6\u53d1\u7684\u7f51\u9875\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 1\u3002\n\u7b2c\u4e00\u5929\u4e4b\u540e\uff0c\u8be5\u6807\u8bb0\u5219\u4e3a false\uff0c\u5373\u7b2c\u4e00\u5929\u4e4b\u540e\u89e6\u53d1\u7684\u7f51\u9875\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 0\uff1b\n\n- \u5c0f\u7a0b\u5e8f\u7aef\uff1a\u7528\u6237\u7b2c\u4e00\u5929\u8bbf\u95ee\u57cb\u5165\u795e\u7b56 SDK \u7684\u9875\u9762\u65f6\uff0c\u5c0f\u7a0b\u5e8f SDK \u4f1a\u5728 storage \u7f13\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u9996\u65e5\u4e3a true \u7684\u6807\u8bb0\uff0c\u5e76\u4e14\u8bbe\u7f6e\u7b2c\u4e00\u5929 24 \u70b9\u4e4b\u524d\uff0c\u8be5\u6807\u8bb0\u5747\u4e3a true\u3002\n\u5373\u7b2c\u4e00\u5929\u89e6\u53d1\u7684\u5c0f\u7a0b\u5e8f\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 1\u3002\u7b2c\u4e00\u5929\u4e4b\u540e\uff0c\u8be5\u6807\u8bb0\u5219\u4e3a false\uff0c\u5373\u7b2c\u4e00\u5929\u4e4b\u540e\u89e6\u53d1\u7684\u5c0f\u7a0b\u5e8f\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 0\uff1b\n\n- APP \u7aef\uff1a\u7528\u6237\u5b89\u88c5 App \u540e\uff0c\u7b2c\u4e00\u6b21\u6253\u5f00\u57cb\u5165\u795e\u7b56 SDK \u7684 App \u7684\u5f53\u5929\uff0cAndroid/iOS SDK \u4f1a\u5728\u624b\u673a\u672c\u5730\u7f13\u5b58\u5185\uff0c\u521b\u5efa\u4e00\u4e2a\u9996\u65e5\u4e3a true \u7684\u6807\u8bb0\uff0c\u5e76\u4e14\u8bbe\u7f6e\u7b2c\u4e00\u5929 24 \u70b9\u4e4b\u524d\uff0c\u8be5\u6807\u8bb0\u5747\u4e3a true\u3002\n\u5373\u7b2c\u4e00\u5929\u89e6\u53d1\u7684 APP \u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 1\u3002\u7b2c\u4e00\u5929\u4e4b\u540e\uff0c\u8be5\u6807\u8bb0\u5219\u4e3a false\uff0c\u5373\u7b2c\u4e00\u5929\u4e4b\u540e\u89e6\u53d1\u7684 APP \u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 0\u3002\n")),(0,i.kt)("p",{parentName:"blockquote"},"\u672c\u9879\u76ee\u6a21\u62df\u751f\u6210\u7684\u662f APP \u7aef\u65e5\u5fd7\u6570\u636e\u3002\u5bf9\u4e8e\u6b64\u7c7b\u65e5\u5fd7\uff0c\u5982\u679c\u9996\u65e5\u4e4b\u540e\u7528\u6237\u6e05\u9664\u4e86\u624b\u673a\u672c\u5730\u7f13\u5b58\u4e2d\u7684\u6807\u8bb0\uff0c\u518d\u6b21\u542f\u52a8 APP \u4f1a\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e2a\u9996\u65e5\u4e3a true \u7684\u6807\u8bb0\uff0c\u5bfc\u81f4\u672c\u5e94\u4e3a 0 \u7684 is_new \u5b57\u6bb5\u88ab\u7f6e\u4e3a 1\uff0c\u53ef\u80fd\u4f1a\u7ed9\u76f8\u5173\u6307\u6807\u5e26\u6765\u8bef\u5dee\u3002")),(0,i.kt)("p",null,"\u56e0\u6b64\uff0c\u6709\u5fc5\u8981\u5bf9\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u8fdb\u884c\u4fee\u590d\u3002"),(0,i.kt)("p",null,"\uff082\uff09\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\u601d\u8def"),(0,i.kt)("p",null,"\u8fd0\u7528 Flink \u72b6\u6001\u7f16\u7a0b\uff0c\u4e3a\u6bcf\u4e2a mid \u7ef4\u62a4\u4e00\u4e2a\u952e\u63a7\u72b6\u6001\uff0c\u8bb0\u5f55\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u3002"),(0,i.kt)("p",null,"\u2460\u5982\u679c is_new \u7684\u503c\u4e3a 1"),(0,i.kt)("p",null,"a\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e3a null\uff0c\u8ba4\u4e3a\u672c\u6b21\u662f\u8be5\u8bbf\u5ba2\u9996\u6b21\u8bbf\u95ee APP\uff0c\u5c06\u65e5\u5fd7\u4e2d ts \u5bf9\u5e94\u7684\u65e5\u671f\u66f4\u65b0\u5230\u72b6\u6001\u4e2d\uff0c\u4e0d\u5bf9 is_new \u5b57\u6bb5\u505a\u4fee\u6539\uff1b"),(0,i.kt)("p",null,"b\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e0d\u4e3a null\uff0c\u4e14\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u4e0d\u662f\u5f53\u65e5\uff0c\u8bf4\u660e\u8bbf\u95ee\u7684\u662f\u8001\u8bbf\u5ba2\uff0c\u5c06 is_new \u5b57\u6bb5\u7f6e\u4e3a 0\uff1b"),(0,i.kt)("p",null,"c\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e0d\u4e3a null\uff0c\u4e14\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u662f\u5f53\u65e5\uff0c\u8bf4\u660e\u8bbf\u95ee\u7684\u662f\u65b0\u8bbf\u5ba2\uff0c\u4e0d\u505a\u64cd\u4f5c\uff1b"),(0,i.kt)("p",null,"\u2461\u5982\u679c is_new \u7684\u503c\u4e3a 0"),(0,i.kt)("p",null,"a\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e3a null\uff0c\u8bf4\u660e\u8bbf\u95ee APP \u7684\u662f\u8001\u8bbf\u5ba2\u4f46\u672c\u6b21\u662f\u8be5\u8bbf\u5ba2\u7684\u9875\u9762\u65e5\u5fd7\u9996\u6b21\u8fdb\u5165\u7a0b\u5e8f\u3002\u5f53\u524d\u7aef\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4e22\u5931\u65f6\uff0c\u65e5\u5fd7\u8fdb\u5165\u7a0b\u5e8f\u88ab\u5224\u5b9a\u4e3a\u8001\u8bbf\u5ba2\uff0cFlink \u7a0b\u5e8f\u5c31\u53ef\u4ee5\u7ea0\u6b63\u88ab\u8bef\u5224\u7684\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\uff0c\u53ea\u8981\u5c06\u72b6\u6001\u4e2d\u7684\u65e5\u671f\u8bbe\u7f6e\u4e3a\u4eca\u5929\u4e4b\u524d\u5373\u53ef\u3002\u672c\u7a0b\u5e8f\u9009\u62e9\u5c06\u72b6\u6001\u66f4\u65b0\u4e3a\u6628\u65e5\uff1b"),(0,i.kt)("p",null,"b\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e0d\u4e3a null\uff0c\u8bf4\u660e\u7a0b\u5e8f\u5df2\u7ecf\u7ef4\u62a4\u4e86\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\uff0c\u4e0d\u505a\u64cd\u4f5c\u3002"),(0,i.kt)("p",null,"3\uff09\u5229\u7528\u4fa7\u8f93\u51fa\u6d41\u5b9e\u73b0\u6570\u636e\u62c6\u5206"),(0,i.kt)("p",null,"\uff081\uff09\u57cb\u70b9\u65e5\u5fd7\u7ed3\u6784\u5206\u6790"),(0,i.kt)("p",null,"\u524d\u7aef\u57cb\u70b9\u83b7\u53d6\u7684 JSON \u5b57\u7b26\u4e32\uff08\u65e5\u5fd7\uff09\u53ef\u80fd\u5b58\u5728 common\u3001start\u3001page\u3001displays\u3001actions\u3001err \u516d\u79cd\u5b57\u6bb5\u3002\u5176\u4e2d"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"common \u5bf9\u5e94\u7684\u662f\u516c\u5171\u4fe1\u606f\uff0c\u662f\u6240\u6709\u65e5\u5fd7\u90fd\u6709\u7684\u5b57\u6bb5"),(0,i.kt)("li",{parentName:"ul"},"err \u5bf9\u5e94\u7684\u662f\u9519\u8bef\u4fe1\u606f\uff0c\u6240\u6709\u65e5\u5fd7\u90fd\u53ef\u80fd\u6709\u7684\u5b57\u6bb5"),(0,i.kt)("li",{parentName:"ul"},"start \u5bf9\u5e94\u7684\u662f\u542f\u52a8\u4fe1\u606f\uff0c\u542f\u52a8\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5"),(0,i.kt)("li",{parentName:"ul"},"page \u5bf9\u5e94\u7684\u662f\u9875\u9762\u4fe1\u606f\uff0c\u9875\u9762\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5"),(0,i.kt)("li",{parentName:"ul"},"displays \u5bf9\u5e94\u7684\u662f\u66dd\u5149\u4fe1\u606f\uff0c\u66dd\u5149\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5\uff0c\u66dd\u5149\u65e5\u5fd7\u53ef\u4ee5\u5f52\u4e3a\u9875\u9762\u65e5\u5fd7\uff0c\u56e0\u6b64\u5fc5\u7136\u6709 page \u5b57\u6bb5"),(0,i.kt)("li",{parentName:"ul"},"actions \u5bf9\u5e94\u7684\u662f\u52a8\u4f5c\u4fe1\u606f\uff0c\u52a8\u4f5c\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5\uff0c\u540c\u6837\u5c5e\u4e8e\u9875\u9762\u65e5\u5fd7\uff0c\u5fc5\u7136\u6709 page \u5b57\u6bb5\u3002\u52a8\u4f5c\u4fe1\u606f\u548c\u66dd\u5149\u4fe1\u606f\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\u3002"),(0,i.kt)("li",{parentName:"ul"},"ts \u5bf9\u5e94\u7684\u662f\u65f6\u95f4\u6233\uff0c\u5355\u4f4d\uff1a\u6beb\u79d2\uff0c\u6240\u6709\u65e5\u5fd7\u90fd\u6709\u7684\u5b57\u6bb5")),(0,i.kt)("p",null,"\u7efc\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7aef\u57cb\u70b9\u83b7\u53d6\u7684\u65e5\u5fd7\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a\u542f\u52a8\u65e5\u5fd7\u548c\u9875\u9762\u65e5\u5fd7\u3002"),(0,i.kt)("p",null,"\u4e8c\u8005\u90fd\u6709 common \u5b57\u6bb5\u548c ts \u5b57\u6bb5\uff0c\u90fd\u53ef\u80fd\u6709 err \u5b57\u6bb5\u3002\u9875\u9762\u65e5\u5fd7\u4e00\u5b9a\u6709 page \u5b57\u6bb5\uff0c\u4e00\u5b9a\u6ca1\u6709 start \u5b57\u6bb5\uff0c\u53ef\u80fd\u6709 displays \u548c actions \u5b57\u6bb5\uff1b"),(0,i.kt)("p",null,"\u542f\u52a8\u65e5\u5fd7\u4e00\u5b9a\u6709 start \u5b57\u6bb5\uff0c\u4e00\u5b9a\u6ca1\u6709 page\u3001displays \u548c actions \u5b57\u6bb5\u3002"),(0,i.kt)("p",null,"\uff082\uff09\u5206\u6d41\u65e5\u5fd7\u5206\u7c7b"),(0,i.kt)("p",null,"\u672c\u8282\u5c06\u6309\u7167\u5185\u5bb9\uff0c\u5c06\u65e5\u5fd7\u5206\u4e3a\u4ee5\u4e0b\u4e94\u7c7b"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u542f\u52a8\u65e5\u5fd7"),(0,i.kt)("li",{parentName:"ul"},"\u9875\u9762\u65e5\u5fd7"),(0,i.kt)("li",{parentName:"ul"},"\u66dd\u5149\u65e5\u5fd7"),(0,i.kt)("li",{parentName:"ul"},"\u52a8\u4f5c\u65e5\u5fd7"),(0,i.kt)("li",{parentName:"ul"},"\u9519\u8bef\u65e5\u5fd7\n\uff083\uff09\u5206\u6d41\u601d\u8def")),(0,i.kt)("p",null,"\u2460\u6240\u6709\u65e5\u5fd7\u6570\u636e\u90fd\u53ef\u80fd\u62e5\u6709 err \u5b57\u6bb5\uff0c\u6240\u6709\u9996\u5148\u83b7\u53d6 err \u5b57\u6bb5\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u4e3a null \u5219\u5c06\u6574\u6761\u65e5\u5fd7\u6570\u636e\u53d1\u9001\u5230\u9519\u8bef\u4fa7\u8f93\u51fa\u6d41\u3002\u7136\u540e\u5220\u6389 JSONObject \u4e2d\u7684 err \u5b57\u6bb5\u53ca\u5bf9\u5e94\u503c\uff1b"),(0,i.kt)("p",null,"\u2461\u5224\u65ad\u662f\u5426\u6709 start \u5b57\u6bb5\uff0c\u5982\u679c\u6709\u5219\u8bf4\u660e\u6570\u636e\u4e3a\u542f\u52a8\u65e5\u5fd7\uff0c\u5c06\u5176\u53d1\u9001\u5230\u542f\u52a8\u4fa7\u8f93\u51fa\u6d41\uff1b\u5982\u679c\u6ca1\u6709\u5219\u8bf4\u660e\u4e3a\u9875\u9762\u65e5\u5fd7\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\uff1b"),(0,i.kt)("p",null,"\u2462\u9875\u9762\u65e5\u5fd7\u5fc5\u7136\u6709 page \u5b57\u6bb5\u3001 common \u5b57\u6bb5\u548c ts \u5b57\u6bb5\uff0c\u83b7\u53d6\u5b83\u4eec\u7684\u503c\uff0cts \u5c01\u88c5\u4e3a\u5305\u88c5\u7c7b Long\uff0c\u5176\u4f59\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u5c01\u88c5\u4e3a JSONObject\uff1b"),(0,i.kt)("p",null,"\u2463\u5224\u65ad\u662f\u5426\u6709 displays \u5b57\u6bb5\uff0c\u5982\u679c\u6709\uff0c\u5c06\u5176\u503c\u5c01\u88c5\u4e3a JSONArray\uff0c\u904d\u5386\u8be5\u6570\u7ec4\uff0c\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u5143\u7d20\uff08\u8bb0\u4e3a display\uff09\uff0c\u5c01\u88c5\u4e3aJSONObject\u3002\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 JSONObject\uff0c\u5c06 display\u3001common\u3001page\u548c ts \u6dfb\u52a0\u5230\u8be5\u5bf9\u8c61\u4e2d\uff0c\u83b7\u5f97\u5904\u7406\u597d\u7684\u66dd\u5149\u6570\u636e\uff0c\u53d1\u9001\u5230\u66dd\u5149\u4fa7\u8f93\u51fa\u6d41\u3002\u52a8\u4f5c\u65e5\u5fd7\u7684\u5904\u7406\u4e0e\u66dd\u5149\u65e5\u5fd7\u76f8\u540c\uff08\u6ce8\u610f\uff1a\u4e00\u6761\u9875\u9762\u65e5\u5fd7\u53ef\u80fd\u65e2\u6709\u66dd\u5149\u6570\u636e\u53c8\u6709\u52a8\u4f5c\u6570\u636e\uff0c\u4e8c\u8005\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u56e0\u6b64\u66dd\u5149\u6570\u636e\u4e0d\u4e3a null \u65f6\u4ecd\u8981\u5bf9\u52a8\u4f5c\u6570\u636e\u8fdb\u884c\u5904\u7406\uff09\uff1b"),(0,i.kt)("p",null,"\u2464\u52a8\u4f5c\u65e5\u5fd7\u548c\u66dd\u5149\u65e5\u5fd7\u5904\u7406\u7ed3\u675f\u540e\u5220\u9664 displays \u548c actions \u5b57\u6bb5\uff0c\u6b64\u65f6\u4e3b\u6d41\u7684 JSONObject \u4e2d\u53ea\u6709 common \u5b57\u6bb5\u3001 page \u5b57\u6bb5\u548c ts \u5b57\u6bb5\uff0c\u5373\u4e3a\u6700\u7ec8\u7684\u9875\u9762\u65e5\u5fd7\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u5904\u7406\u7ed3\u675f\u540e\uff0c\u9875\u9762\u65e5\u5fd7\u6570\u636e\u4f4d\u4e8e\u4e3b\u6d41\uff0c\u5176\u4f59\u56db\u79cd\u65e5\u5fd7\u5206\u522b\u4f4d\u4e8e\u5bf9\u5e94\u7684\u4fa7\u8f93\u51fa\u6d41\uff0c\u5c06\u4e94\u6761\u6d41\u7684\u6570\u636e\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u5373\u53ef\u3002\n")),(0,i.kt)("h3",{id:"\u56fe\u89e3"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242565-609d3749-447a-454f-880a-aad215e3763f.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,i.kt)("p",null,"1\uff09\u5728 KafkaUtil \u5de5\u5177\u7c7b\u4e2d\u8865\u5145 getKafkaProducer() \u65b9\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'public static FlinkKafkaProducer<String> getKafkaProducer(String topic) {\n\n        Properties prop = new Properties();\n        prop.setProperty("bootstrap.servers", BOOTSTRAP_SERVERS);\n        prop.setProperty(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 60 * 15 * 1000 + "");\n        FlinkKafkaProducer<String> producer = new FlinkKafkaProducer<String>(DEFAULT_TOPIC, new KafkaSerializationSchema<String>() {\n\n            @Override\n            public ProducerRecord<byte[], byte[]> serialize(String jsonStr, @Nullable Long timestamp) {\n                return new ProducerRecord<byte[], byte[]>(topic, jsonStr.getBytes());\n            }\n        }, prop,\n                FlinkKafkaProducer.Semantic.EXACTLY_ONCE);\n        return producer;\n    }\n')),(0,i.kt)("p",null,"2\uff09\u521b\u5efa DateFormatUtil \u5de5\u5177\u7c7b\u7528\u4e8e\u65e5\u671f\u683c\u5f0f\u5316"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.util;\n\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.time.ZoneOffset;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Date;\n\npublic class DateFormatUtil {\n\n    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");\n    private static final DateTimeFormatter dtfFull = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");\n\n    public static Long toTs(String dtStr, boolean isFull) {\n        \n        LocalDateTime localDateTime = null;\n        if (!isFull) {\n            dtStr = dtStr + " 00:00:00";\n        }\n        localDateTime = LocalDateTime.parse(dtStr, dtfFull);\n\n        return localDateTime.toInstant(ZoneOffset.of("+8")).toEpochMilli();\n    }\n\n    public static Long toTs(String dtStr) {\n        return toTs(dtStr, false);\n    }\n\n    public static String toDate(Long ts) {\n        Date dt = new Date(ts);\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());\n        return dtf.format(localDateTime);\n    }\n\n    public static String toYmdHms(Long ts) {\n        Date dt = new Date(ts);\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());\n        return dtfFull.format(localDateTime);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(toYmdHms(System.currentTimeMillis()));\n    }\n}\n')),(0,i.kt)("p",null,"3\uff09\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.log;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.atguigu.gmall.realtime.util.DateFormatUtil;\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.state.ValueState;\nimport org.apache.flink.api.common.state.ValueStateDescriptor;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.KeyedStream;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.functions.KeyedProcessFunction;\nimport org.apache.flink.streaming.api.functions.ProcessFunction;\nimport org.apache.flink.util.Collector;\nimport org.apache.flink.util.OutputTag;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class BaseLogApp {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u521d\u59cb\u5316\u73af\u5883\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies\n                .failureRateRestart(10,\n                        Time.of(3L, TimeUnit.DAYS),\n                        Time.of(1L, TimeUnit.MINUTES)));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/gmall/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e3b\u6d41\u6570\u636e\n        String topic = "topic_log";\n        String groupId = "base_log_consumer";\n        DataStreamSource<String> source = env.addSource(KafkaUtil.getKafkaConsumer(topic, groupId));\n\n        // TODO 4. \u6570\u636e\u6e05\u6d17\uff0c\u8f6c\u6362\u7ed3\u6784\n        // 4.1 \u5b9a\u4e49\u9519\u8bef\u4fa7\u8f93\u51fa\u6d41\n        OutputTag<String> dirtyStreamTag = new OutputTag<String>("dirtyStream") {\n        };\n        SingleOutputStreamOperator<String> cleanedStream = source.process(\n                new ProcessFunction<String, String>() {\n                    @Override\n                    public void processElement(String jsonStr, Context ctx, Collector<String> out) throws Exception {\n                        try {\n                            JSONObject jsonObj = JSON.parseObject(jsonStr);\n                            out.collect(jsonStr);\n                        } catch (Exception e) {\n                            ctx.output(dirtyStreamTag, jsonStr);\n                        }\n                    }\n                }\n        );\n\n        // 4.2 \u5c06\u810f\u6570\u636e\u5199\u51fa\u5230 Kafka \u6307\u5b9a\u4e3b\u9898\n        DataStream<String> dirtyStream = cleanedStream.getSideOutput(dirtyStreamTag);\n        String dirtyTopic = "dirty_data";\n        dirtyStream.addSink(KafkaUtil.getKafkaProducer(dirtyTopic));\n\n        // 4.3 \u8f6c\u6362\u4e3b\u6d41\u6570\u636e\u7ed3\u6784 jsonStr -> jsonObj\n        SingleOutputStreamOperator<JSONObject> mappedStream = cleanedStream.map(JSON::parseObject);\n\n        // TODO 5. \u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\n        // 5.1 \u6309\u7167 mid \u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4\n        KeyedStream<JSONObject, String> keyedStream = mappedStream.keyBy(r -> r.getJSONObject("common").getString("mid"));\n\n        // 5.2 \u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\n        SingleOutputStreamOperator<JSONObject> fixedStream = keyedStream.process(\n                new KeyedProcessFunction<String, JSONObject, JSONObject>() {\n\n                    ValueState<String> firstViewDtState;\n\n                    @Override\n                    public void open(Configuration param) throws Exception {\n                        super.open(param);\n                        firstViewDtState = getRuntimeContext().getState(new ValueStateDescriptor<String>(\n                                "lastLoginDt", String.class\n                        ));\n                    }\n\n                    @Override\n                    public void processElement(JSONObject jsonObj, Context ctx, Collector<JSONObject> out) throws Exception {\n                        String isNew = jsonObj.getJSONObject("common").getString("is_new");\n                        String firstViewDt = firstViewDtState.value();\n                        Long ts = jsonObj.getLong("ts");\n                        String dt = DateFormatUtil.toDate(ts);\n\n                        if ("1".equals(isNew)) {\n                            if (firstViewDt == null) {\n                                firstViewDtState.update(dt);\n                            } else {\n                                if (!firstViewDt.equals(dt)) {\n                                    isNew = "0";\n                                    jsonObj.getJSONObject("common").put("is_new", isNew);\n                                }\n                            }\n                        } else {\n                            if (firstViewDt == null) {\n                                // \u5c06\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u7f6e\u4e3a\u6628\u65e5\n                                String yesterday = DateFormatUtil.toDate(ts - 1000 * 60 * 60 * 24);\n                                firstViewDtState.update(yesterday);\n                            }\n                        }\n\n                        out.collect(jsonObj);\n                    }\n                }\n        );\n\n        // TODO 6. \u5206\u6d41\n        // 6.1 \u5b9a\u4e49\u542f\u52a8\u3001\u66dd\u5149\u3001\u52a8\u4f5c\u3001\u9519\u8bef\u4fa7\u8f93\u51fa\u6d41\n        OutputTag<String> startTag = new OutputTag<String>("startTag") {\n        };\n        OutputTag<String> displayTag = new OutputTag<String>("displayTag") {\n        };\n        OutputTag<String> actionTag = new OutputTag<String>("actionTag") {\n        };\n        OutputTag<String> errorTag = new OutputTag<String>("errorTag") {\n        };\n\n        // 6.2 \u5206\u6d41\n        SingleOutputStreamOperator<String> separatedStream = fixedStream.process(\n                new ProcessFunction<JSONObject, String>() {\n                    @Override\n                    public void processElement(JSONObject jsonObj, Context context, Collector<String> out) throws Exception {\n\n                        // 6.2.1 \u6536\u96c6\u9519\u8bef\u6570\u636e\n                        JSONObject error = jsonObj.getJSONObject("err");\n                        if (error != null) {\n                            context.output(errorTag, jsonObj.toJSONString());\n                        }\n\n                        // \u5254\u9664 "err" \u5b57\u6bb5\n                        jsonObj.remove("err");\n\n                        // 6.2.2 \u6536\u96c6\u542f\u52a8\u6570\u636e\n                        JSONObject start = jsonObj.getJSONObject("start");\n                        if (start != null) {\n                            context.output(startTag, jsonObj.toJSONString());\n                        } else {\n                            // \u83b7\u53d6 "page" \u5b57\u6bb5\n                            JSONObject page = jsonObj.getJSONObject("page");\n                            // \u83b7\u53d6 "common" \u5b57\u6bb5\n                            JSONObject common = jsonObj.getJSONObject("common");\n                            // \u83b7\u53d6 "ts"\n                            Long ts = jsonObj.getLong("ts");\n\n                            // 6.2.3 \u6536\u96c6\u66dd\u5149\u6570\u636e\n                            JSONArray displays = jsonObj.getJSONArray("displays");\n                            if (displays != null) {\n                                for (int i = 0; i < displays.size(); i++) {\n                                    JSONObject display = displays.getJSONObject(i);\n                                    JSONObject displayObj = new JSONObject();\n                                    displayObj.put("display", display);\n                                    displayObj.put("common", common);\n                                    displayObj.put("page", page);\n                                    displayObj.put("ts", ts);\n                                    context.output(displayTag, displayObj.toJSONString());\n                                }\n                            }\n\n                            // 6.2.4 \u6536\u96c6\u52a8\u4f5c\u6570\u636e\n                            JSONArray actions = jsonObj.getJSONArray("actions");\n                            if (actions != null) {\n                                for (int i = 0; i < actions.size(); i++) {\n                                    JSONObject action = actions.getJSONObject(i);\n                                    JSONObject actionObj = new JSONObject();\n                                    actionObj.put("action", action);\n                                    actionObj.put("common", common);\n                                    actionObj.put("page", page);\n                                    actionObj.put("ts", ts);\n                                    context.output(actionTag, actionObj.toJSONString());\n                                }\n                            }\n\n                            // 6.2.5 \u6536\u96c6\u9875\u9762\u6570\u636e\n                            jsonObj.remove("displays");\n                            jsonObj.remove("actions");\n                            out.collect(jsonObj.toJSONString());\n                        }\n\n                    }\n                }\n        );\n\n        // \u6253\u5370\u4e3b\u6d41\u548c\u5404\u4fa7\u8f93\u51fa\u6d41\u67e5\u770b\u5206\u6d41\u6548\u679c\n//        separatedStream.print("page>>>");\n//        separatedStream.getSideOutput(startTag).print("start!!!");\n//        separatedStream.getSideOutput(displayTag).print("display@@@");\n//        separatedStream.getSideOutput(actionTag).print("action###");\n//        separatedStream.getSideOutput(errorTag).print("error$$$");\n\n        // TODO 7. \u5c06\u6570\u636e\u8f93\u51fa\u5230 Kafka \u7684\u4e0d\u540c\u4e3b\u9898\n        // 7.1 \u63d0\u53d6\u5404\u4fa7\u8f93\u51fa\u6d41\n        DataStream<String> startDS = separatedStream.getSideOutput(startTag);\n        DataStream<String> displayDS = separatedStream.getSideOutput(displayTag);\n        DataStream<String> actionDS = separatedStream.getSideOutput(actionTag);\n        DataStream<String> errorDS = separatedStream.getSideOutput(errorTag);\n\n        // 7.2 \u5b9a\u4e49\u4e0d\u540c\u65e5\u5fd7\u8f93\u51fa\u5230 Kafka \u7684\u4e3b\u9898\u540d\u79f0\n        String page_topic = "dwd_traffic_page_log";\n        String start_topic = "dwd_traffic_start_log";\n        String display_topic = "dwd_traffic_display_log";\n        String action_topic = "dwd_traffic_action_log";\n        String error_topic = "dwd_traffic_error_log";\n\n        separatedStream.addSink(KafkaUtil.getKafkaProducer(page_topic));\n        startDS.addSink(KafkaUtil.getKafkaProducer(start_topic));\n        displayDS.addSink(KafkaUtil.getKafkaProducer(display_topic));\n        actionDS.addSink(KafkaUtil.getKafkaProducer(action_topic));\n        errorDS.addSink(KafkaUtil.getKafkaProducer(error_topic));\n\n        env.execute();\n    }\n}\n')),(0,i.kt)("h2",{id:"\u6d41\u91cf\u57df\u72ec\u7acb\u8bbf\u5ba2\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u6d41\u91cf\u57df\u72ec\u7acb\u8bbf\u5ba2\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-2"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8fc7\u6ee4\u9875\u9762\u6570\u636e\u4e2d\u7684\u72ec\u7acb\u8bbf\u5ba2\u8bbf\u95ee\u8bb0\u5f55\u3002\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u8fc7\u6ee4 last_page_id \u4e0d\u4e3a null \u7684\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u72ec\u7acb\u8bbf\u5ba2\u6570\u636e\u5bf9\u5e94\u7684\u9875\u9762\u5fc5\u7136\u662f\u4f1a\u8bdd\u8d77\u59cb\u9875\u9762\uff0clast_page_id \u5fc5\u4e3a null\u3002\u8fc7\u6ee4 last_page_id != null \u7684\u6570\u636e\uff0c\u51cf\u5c0f\u6570\u636e\u91cf\uff0c\u63d0\u5347\u8ba1\u7b97\u6548\u7387\u3002\n")),(0,i.kt)("p",null,"2\uff09\u7b5b\u9009\u72ec\u7acb\u8bbf\u5ba2\u8bb0\u5f55"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8fd0\u7528 Flink \u72b6\u6001\u7f16\u7a0b\uff0c\u4e3a\u6bcf\u4e2a mid \u7ef4\u62a4\u4e00\u4e2a\u952e\u63a7\u72b6\u6001\uff0c\u8bb0\u5f55\u672b\u6b21\u767b\u5f55\u65e5\u671f\u3002\n\n\u5982\u679c\u672b\u6b21\u767b\u5f55\u65e5\u671f\u4e3a null \u6216\u8005\u4e0d\u662f\u4eca\u65e5\uff0c\u5219\u672c\u6b21\u8bbf\u95ee\u662f\u8be5 mid \u5f53\u65e5\u9996\u6b21\u8bbf\u95ee\uff0c\u4fdd\u7559\u6570\u636e\uff0c\u5c06\u672b\u6b21\u767b\u5f55\u65e5\u671f\u66f4\u65b0\u4e3a\u5f53\u65e5\u3002\u5426\u5219\u4e0d\u662f\u5f53\u65e5\u9996\u6b21\u8bbf\u95ee\uff0c\u4e22\u5f03\u6570\u636e\u3002\n")),(0,i.kt)("p",null,"3\uff09\u72b6\u6001\u5b58\u6d3b\u65f6\u95f4\u8bbe\u7f6e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u5982\u679c\u4fdd\u7559\u72b6\u6001\uff0c\u7b2c\u4e8c\u65e5\u540c\u4e00 mid \u518d\u6b21\u8bbf\u95ee\u65f6\u4f1a\u88ab\u5224\u5b9a\u4e3a\u65b0\u8bbf\u5ba2\uff0c\u5982\u679c\u6e05\u7a7a\u72b6\u6001\uff0c\u5224\u5b9a\u7ed3\u679c\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u8981\u65f6\u949f\u8fdb\u5165\u7b2c\u4e8c\u65e5\u72b6\u6001\u5c31\u53ef\u4ee5\u6e05\u7a7a\u3002\n")),(0,i.kt)("p",null,"\u8bbe\u7f6e\u72b6\u6001\u7684 TTL \u4e3a 1 \u5929\uff0c\u66f4\u65b0\u6a21\u5f0f\u4e3a OnCreateAndWrite\uff0c\u8868\u793a\u5728\u521b\u5efa\u548c\u66f4\u65b0\u72b6\u6001\u65f6\u91cd\u7f6e\u72b6\u6001\u5b58\u6d3b\u65f6\u95f4\u3002"),(0,i.kt)("p",null,"\u5982\uff1a2022-02-21 08:00:00 \u9996\u6b21\u8bbf\u95ee\uff0c\u82e5 2022-02-22 \u6ca1\u6709\u8bbf\u95ee\u8bb0\u5f55\uff0c\u5219 2022-02-22 08:00:00 \u4e4b\u540e\u72b6\u6001\u6e05\u7a7a\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-1"},"\u56fe\u89e3"),(0,i.kt)("p",null,"  ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242617-99e9fac8-1ce0-480b-aeda-6166a13aa3bc.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-1"},"\u4ee3\u7801"),(0,i.kt)("p",null,"1\uff09\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.log;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.atguigu.gmall.realtime.util.DateFormatUtil;\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.api.common.functions.RichFilterFunction;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.state.StateTtlConfig;\nimport org.apache.flink.api.common.state.ValueState;\nimport org.apache.flink.api.common.state.ValueStateDescriptor;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.KeyedStream;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;\n\npublic class DwdTrafficUniqueVisitorDetail {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(30 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece kafka dwd_traffic_page_log \u4e3b\u9898\u8bfb\u53d6\u65e5\u5fd7\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u6d41\n        String topic = "dwd_traffic_page_log";\n        String groupId = "dwd_traffic_user_jump_detail";\n        FlinkKafkaConsumer<String> kafkaConsumer = KafkaUtil.getKafkaConsumer(topic, groupId);\n        DataStreamSource<String> pageLog = env.addSource(kafkaConsumer);\n\n        // TODO 4. \u8f6c\u6362\u7ed3\u6784\n        SingleOutputStreamOperator<JSONObject> mappedStream = pageLog.map(JSON::parseObject);\n\n        // TODO 5. \u8fc7\u6ee4 last_page_id \u4e0d\u4e3a null \u7684\u6570\u636e\n        SingleOutputStreamOperator<JSONObject> firstPageStream = mappedStream.filter(\n                jsonObj -> jsonObj\n                        .getJSONObject("page")\n                        .getString("last_page_id") == null\n        );\n\n        // TODO 6. \u6309\u7167 mid \u5206\u7ec4\n        KeyedStream<JSONObject, String> keyedStream = firstPageStream\n                .keyBy(jsonObj -> jsonObj.getJSONObject("common").getString("mid"));\n\n        // TODO 7. \u901a\u8fc7 Flink \u72b6\u6001\u7f16\u7a0b\u8fc7\u6ee4\u72ec\u7acb\u8bbf\u5ba2\u8bb0\u5f55\n        SingleOutputStreamOperator<JSONObject> filteredStream = keyedStream.filter(\n                new RichFilterFunction<JSONObject>() {\n\n                    private ValueState<String> lastVisitDt;\n\n                    @Override\n                    public void open(Configuration paramenters) throws Exception {\n                        super.open(paramenters);\n                        ValueStateDescriptor<String> valueStateDescriptor =\n                                new ValueStateDescriptor<>("last_visit_dt", String.class);\n                        valueStateDescriptor.enableTimeToLive(\n                                StateTtlConfig\n                                        .newBuilder(Time.days(1L))\n                                        // \u8bbe\u7f6e\u5728\u521b\u5efa\u548c\u66f4\u65b0\u72b6\u6001\u65f6\u66f4\u65b0\u5b58\u6d3b\u65f6\u95f4\n                                        .setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)\n                                        .build()\n                        );\n                        lastVisitDt = getRuntimeContext().getState(valueStateDescriptor);\n                    }\n\n                    @Override\n                    public boolean filter(JSONObject jsonObj) throws Exception {\n                        String visitDt = DateFormatUtil.toDate(jsonObj.getLong("ts"));\n                        String lastDt = lastVisitDt.value();\n                        if (lastDt == null || !lastDt.equals(visitDt)) {\n                            lastVisitDt.update(visitDt);\n                            return true;\n                        }\n                        return false;\n                    }\n                }\n        );\n\n        // TODO 8. \u5c06\u72ec\u7acb\u8bbf\u5ba2\u6570\u636e\u5199\u5165\n        // Kafka dwd_traffic_unique_visitor_detail \u4e3b\u9898\n        String targetTopic = "dwd_traffic_unique_visitor_detail";\n        FlinkKafkaProducer<String> kafkaProducer = KafkaUtil.getKafkaProducer(targetTopic);\n        filteredStream.map(JSONAware::toJSONString).addSink(kafkaProducer);\n\n        // TODO 9. \u542f\u52a8\u4efb\u52a1\n        env.execute();\n    }\n}\n')),(0,i.kt)("h2",{id:"\u6d41\u91cf\u57df\u7528\u6237\u8df3\u51fa\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u6d41\u91cf\u57df\u7528\u6237\u8df3\u51fa\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-3"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8fc7\u6ee4\u7528\u6237\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-1"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u7b5b\u9009\u7b56\u7565"),(0,i.kt)("p",null,"\u8df3\u51fa\u662f\u6307\u4f1a\u8bdd\u4e2d\u53ea\u6709\u4e00\u4e2a\u9875\u9762\u7684\u8bbf\u95ee\u884c\u4e3a\uff0c\u5982\u679c\u80fd\u83b7\u53d6\u4f1a\u8bdd\u7684\u6240\u6709\u9875\u9762\uff0c\u53ea\u8981\u7b5b\u9009\u9875\u9762\u6570\u4e3a 1 \u7684\u4f1a\u8bdd\u5373\u53ef\u83b7\u53d6\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002"),(0,i.kt)("p",null,"\uff081\uff09\u79bb\u7ebf\u6570\u4ed3\u4e2d\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4e00\u6574\u5929\u7684\u6570\u636e\uff0c\u7ed3\u5408\u8bbf\u95ee\u65f6\u95f4\u3001page_id \u548c last_page_id \u5b57\u6bb5\u5bf9\u6574\u4f53\u6570\u636e\u96c6\u505a\u5904\u7406\u53ef\u4ee5\u6309\u7167\u4f1a\u8bdd\u5bf9\u9875\u9762\u65e5\u5fd7\u8fdb\u884c\u5212\u5206\uff0c\u4ece\u800c\u83b7\u5f97\u6bcf\u4e2a\u4f1a\u8bdd\u7684\u9875\u9762\u6570\uff0c\u53ea\u8981\u7b5b\u9009\u9875\u9762\u6570\u4e3a 1 \u7684\u4f1a\u8bdd\u5373\u53ef\u63d0\u53d6\u8df3\u51fa\u660e\u7ec6\u6570\u636e\uff1b"),(0,i.kt)("p",null,"\uff082\uff09\u5b9e\u65f6\u8ba1\u7b97\u4e2d\u65e0\u6cd5\u8003\u8651\u6574\u4f53\u6570\u636e\u96c6\uff0c\u5f88\u96be\u6309\u7167\u4f1a\u8bdd\u5bf9\u9875\u9762\u8bbf\u95ee\u8bb0\u5f55\u8fdb\u884c\u5212\u5206\u3002\u800c\u672c\u9879\u76ee\u6a21\u62df\u751f\u6210\u7684\u65e5\u5fd7\u6570\u636e\u4e2d\u6ca1\u6709 session_id\uff08\u4f1a\u8bddid\uff09\u5b57\u6bb5\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u6309\u7167 session_id \u5206\u7ec4\u7684\u65b9\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u4f1a\u8bdd\u7684\u9875\u9762\u6570\u3002"),(0,i.kt)("p",null,"\uff083\uff09\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6362\u4e00\u79cd\u89e3\u51b3\u601d\u8def\u3002\u5982\u679c\u80fd\u5224\u5b9a\u9996\u9875\u65e5\u5fd7\u4e4b\u540e\u6ca1\u6709\u540c\u4e00\u4f1a\u8bdd\u7684\u9875\u9762\u8bbf\u95ee\u8bb0\u5f55\u540c\u6837\u53ef\u4ee5\u7b5b\u9009\u8df3\u51fa\u6570\u636e\u3002\u5982\u679c\u65e5\u5fd7\u6570\u636e\u5b8c\u5168\u6709\u5e8f\uff0c\u4f1a\u8bdd\u9875\u9762\u4e0d\u5b58\u5728\u4ea4\u53c9\u60c5\u51b5\uff0c\u5219\u8df3\u51fa\u9875\u9762\u7684\u5224\u5b9a\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a"),(0,i.kt)("p",null,"\u2460 \u4e24\u6761\u7d27\u90bb\u7684\u9996\u9875\u65e5\u5fd7\u8fdb\u5165\u7b97\u5b50\uff0c\u53ef\u4ee5\u5224\u5b9a\u7b2c\u4e00\u6761\u9996\u9875\u65e5\u5fd7\u6240\u5c5e\u4f1a\u8bdd\u4e3a\u8df3\u51fa\u4f1a\u8bdd\uff1b"),(0,i.kt)("p",null,"\u2461 \u7b2c\u4e00\u6761\u9996\u9875\u65e5\u5fd7\u8fdb\u5165\u7b97\u5b50\u540e\uff0c\u63a5\u6536\u5230\u7684\u7b2c\u4e8c\u6761\u65e5\u5fd7\u4e3a\u975e\u9996\u9875\u65e5\u5fd7\uff0c\u5219\u7b2c\u4e00\u6761\u65e5\u5fd7\u6240\u5c5e\u4f1a\u8bdd\u4e0d\u662f\u8df3\u51fa\u4f1a\u8bdd\uff1b"),(0,i.kt)("p",null,"\u2462 \u7b2c\u4e00\u6761\u9996\u9875\u65e5\u5fd7\u8fdb\u5165\u7b97\u5b50\u540e\uff0c\u6ca1\u6709\u6536\u5230\u7b2c\u4e8c\u6761\u65e5\u5fd7\uff0c\u6b64\u65f6\u65e0\u6cd5\u5f97\u51fa\u7ed3\u8bba\uff0c\u5fc5\u987b\u7ee7\u7eed\u7b49\u5f85\u3002\u4f46\u662f\u65e0\u4f11\u6b62\u5730\u7b49\u5f85\u663e\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\u3002"),(0,i.kt)("p",null,"\u56e0\u6b64\uff0c\u4eba\u4e3a\u8bbe\u5b9a\u8d85\u65f6\u65f6\u95f4\uff0c\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u7b2c\u4e8c\u6761\u6570\u636e\u5c31\u5224\u5b9a\u4e3a\u8df3\u51fa\u884c\u4e3a\uff0c\u8fd9\u662f\u4e00\u79cd\u8fd1\u4f3c\u5904\u7406\uff0c\u5b58\u5728\u8bef\u5dee\uff0c\u4f46\u82e5\u80fd\u7ed3\u5408\u4e1a\u52a1\u573a\u666f\u8bbe\u7f6e\u5408\u7406\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u8bef\u5dee\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002"),(0,i.kt)("p",null,"\u672c\u7a0b\u5e8f\u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u4e3a 10s\uff0c\u4e3a\u4e86\u66f4\u5feb\u770b\u5230\u6548\u679c\u53ef\u4ee5\u8bbe\u7f6e\u66f4\u5c0f\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u751f\u4ea7\u73af\u5883\u7684\u8bbe\u7f6e\u7ed3\u5408\u4e1a\u52a1\u9700\u6c42\u786e\u5b9a\u3002"),(0,i.kt)("p",null,"\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\uff0c\u60c5\u51b5 \u2460 \u7684\u9996\u9875\u6570\u636e\u548c\u60c5\u51b5 \u2462 \u4e2d\u7684\u8d85\u65f6\u6570\u636e\u4e3a\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002"),(0,i.kt)("p",null,"2\uff09\u77e5\u8bc6\u50a8\u5907"),(0,i.kt)("p",null,"\uff081\uff09Flink CEP\n\u8df3\u51fa\u884c\u4e3a\u9700\u8981\u8003\u8651\u4f1a\u8bdd\u4e2d\u7684\u4e24\u6761\u9875\u9762\u65e5\u5fd7\u6570\u636e\uff08\u7b2c\u4e00\u6761\u4e3a\u9996\u9875\u65e5\u5fd7\u4e14\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u63a5\u6536\u5230\u7b2c\u4e8c\u6761\uff0c\u6216\u4e24\u6761\u7d27\u90bb\u7684\u9996\u9875\u65e5\u5fd7\u5230\u6765\u53ef\u4ee5\u5224\u5b9a\u7b2c\u4e00\u6761\u4e3a\u8df3\u51fa\u6570\u636e\uff09\uff0c\u8981\u7b5b\u9009\u7684\u662f\u7ec4\u5408\u4e8b\u4ef6\uff0c\u7528 filter \u65e0\u6cd5\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u7531\u6b64\u5f15\u51fa Flink CEP\u3002"),(0,i.kt)("p",null,"Flink CEP\uff08Complex Event Processing \u590d\u6742\u4e8b\u4ef6\u5904\u7406\uff09\u662f\u5728Flink\u4e0a\u5c42\u5b9e\u73b0\u7684\u590d\u6742\u4e8b\u4ef6\u5904\u7406\u5e93\uff0c\u53ef\u4ee5\u5728\u65e0\u754c\u6d41\u4e2d\u68c0\u6d4b\u51fa\u7279\u5b9a\u7684\u4e8b\u4ef6\u6a21\u578b\u3002"),(0,i.kt)("p",null,"\u7528\u6237\u5b9a\u4e49\u590d\u6742\u89c4\u5219\uff08Pattern\uff09\uff0c\u5c06\u5176\u5e94\u7528\u5230\u6d41\u4e0a\uff0c\u5373\u53ef\u4ece\u6d41\u4e2d\u63d0\u53d6\u6ee1\u8db3 Pattern \u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7b80\u5355\u4e8b\u4ef6\u6784\u6210\u7684\u590d\u6742\u4e8b\u4ef6\u3002"),(0,i.kt)("p",null,"\uff082\uff09Flink CEP \u5b9a\u4e49\u7684\u89c4\u5219\u4e4b\u95f4\u7684\u8fde\u7eed\u7b56\u7565"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u4e25\u683c\u8fde\u7eed: \u671f\u671b\u6240\u6709\u5339\u914d\u7684\u4e8b\u4ef6\u4e25\u683c\u7684\u4e00\u4e2a\u63a5\u4e00\u4e2a\u51fa\u73b0\uff0c\u4e2d\u95f4\u6ca1\u6709\u4efb\u4f55\u4e0d\u5339\u914d\u7684\u4e8b\u4ef6\u3002\u5bf9\u5e94\u65b9\u6cd5\u4e3a next()\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u677e\u6563\u8fde\u7eed: \u5ffd\u7565\u5339\u914d\u7684\u4e8b\u4ef6\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u7684\u4e8b\u4ef6\u3002\u5bf9\u5e94\u65b9\u6cd5\u4e3afollowedBy()\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed: \u66f4\u8fdb\u4e00\u6b65\u7684\u677e\u6563\u8fde\u7eed\uff0c\u5141\u8bb8\u5ffd\u7565\u6389\u4e00\u4e9b\u5339\u914d\u4e8b\u4ef6\u7684\u9644\u52a0\u5339\u914d\u3002\u5bf9\u5e94\u65b9\u6cd5\u4e3afollowedByAny()\u3002")),(0,i.kt)("p",null,"3\uff09\u5b9e\u73b0\u6b65\u9aa4"),(0,i.kt)("p",null,"\uff081\uff09\u6309\u7167 mid \u5206\u7ec4"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u4e0d\u540c\u8bbf\u5ba2\u7684\u6d4f\u89c8\u8bb0\u5f55\u4e92\u4e0d\u5e72\u6d89\uff0c\u8df3\u51fa\u884c\u4e3a\u7684\u5206\u6790\u5e94\u5728\u76f8\u540c mid \u4e0b\u8fdb\u884c\uff0c\u9996\u5148\u6309\u7167 mid \u5206\u7ec4\u3002\n")),(0,i.kt)("p",null,"\uff082\uff09\u5b9a\u4e49 CEP \u5339\u914d\u89c4\u5219"),(0,i.kt)("p",null,"\u2460\u89c4\u5219\u4e00\n\u8df3\u51fa\u884c\u4e3a\u5bf9\u5e94\u7684\u9875\u9762\u65e5\u5fd7\u5fc5\u7136\u4e3a\u67d0\u4e00\u4f1a\u8bdd\u7684\u9996\u9875\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u89c4\u5219\u5224\u5b9a last_page_id \u662f\u5426\u4e3a null\uff0c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\uff1b"),(0,i.kt)("p",null,"\u2461\u89c4\u5219\u4e8c\n\u89c4\u5219\u4e8c\u548c\u89c4\u5219\u4e00\u4e4b\u95f4\u7684\u7b56\u7565\u91c7\u7528\u4e25\u683c\u8fde\u7eed\uff0c\u8981\u6c42\u4e8c\u8005\u4e4b\u95f4\u4e0d\u80fd\u6709\u5176\u5b83\u4e8b\u4ef6\u3002"),(0,i.kt)("p",null,"\u5224\u65ad last_page_id \u662f\u5426\u4e3a null\uff0c\u5728\u6570\u636e\u5b8c\u6574\u6709\u5e8f\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u679c\u4e0d\u662f null \u8bf4\u660e\u672c\u6761\u65e5\u5fd7\u7684\u9875\u9762\u4e0d\u662f\u9996\u9875\uff0c\u53ef\u4ee5\u65ad\u5b9a\u5b83\u4e0e\u89c4\u5219\u4e00\u5339\u914d\u5230\u7684\u4e8b\u4ef6\u540c\u5c5e\u4e8e\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u8fd4\u56de false\uff1b"),(0,i.kt)("p",null,"\u5982\u679c\u662f null \u5219\u5f00\u542f\u4e86\u4e00\u4e2a\u65b0\u7684\u4f1a\u8bdd\uff0c\u6b64\u65f6\u53ef\u4ee5\u5224\u5b9a\u4e0a\u4e00\u6761\u9875\u9762\u65e5\u5fd7\u6240\u5c5e\u4f1a\u8bdd\u4e3a\u8df3\u51fa\u4f1a\u8bdd\uff0c\u662f\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\uff0c\u8fd4\u56de true\uff1b"),(0,i.kt)("p",null,"\u2462\u8d85\u65f6\u65f6\u95f4\n\u8d85\u65f6\u65f6\u95f4\u5185\u89c4\u5219\u4e00\u88ab\u6ee1\u8db3\uff0c\u672a\u7b49\u5230\u7b2c\u4e8c\u6761\u6570\u636e\u5219\u4f1a\u88ab\u5224\u5b9a\u4e3a\u8d85\u65f6\u6570\u636e\u3002"),(0,i.kt)("p",null,"\uff083\uff09\u628a\u5339\u914d\u89c4\u5219\uff08Pattern\uff09\u5e94\u7528\u5230\u6d41\u4e0a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u6839\u636e Pattern \u5b9a\u4e49\u7684\u89c4\u5219\u5bf9\u6d41\u4e2d\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u3002\n")),(0,i.kt)("p",null,"\uff084\uff09\u63d0\u53d6\u8d85\u65f6\u6d41\n\u63d0\u53d6\u8d85\u65f6\u6d41\uff0c\u8d85\u65f6\u6d41\u4e2d\u6ee1\u8db3\u89c4\u5219\u4e00\u7684\u6570\u636e\u5373\u4e3a\u8df3\u51fa\u660e\u7ec6\u6570\u636e\uff0c\u53d6\u51fa\u3002"),(0,i.kt)("p",null,"\uff085\uff09\u5408\u5e76\u4e3b\u6d41\u548c\u8d85\u65f6\u6d41\uff0c\u5199\u5165 Kafka \u8c03\u51fa\u660e\u7ec6\u4e3b\u9898"),(0,i.kt)("p",null,"\uff086\uff09\u7ed3\u679c\u5206\u6790\n\u7406\u8bba\u4e0a Flink \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6c34\u4f4d\u7ebf\u4fdd\u8bc1\u6570\u636e\u4e25\u683c\u6709\u5e8f\uff08\u8d85\u65f6\u65f6\u95f4\u8db3\u591f\u5927\uff09\uff0c\u5728\u6b64\u524d\u63d0\u4e0b\uff0c\u540c\u4e00 mid \u7684\u4f1a\u8bdd\u4e4b\u95f4\u4e0d\u4f1a\u51fa\u73b0\u4ea4\u53c9\u3002"),(0,i.kt)("p",null,"\u82e5\u5047\u8bbe\u65e5\u5fd7\u6570\u636e\u6ca1\u6709\u4e22\u5931\uff0c\u6309\u7167\u4e0a\u8ff0\u5339\u914d\u89c4\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e24\u7c7b\u660e\u7ec6\u6570\u636e"),(0,i.kt)("p",null,"\u2460\u4e24\u4e2a\u89c4\u5219\u90fd\u88ab\u6ee1\u8db3\uff0c\u6ee1\u8db3\u89c4\u5219\u4e00\u7684\u6570\u636e\u4e3a\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002\u5728\u4f1a\u8bdd\u4e4b\u95f4\u4e0d\u4f1a\u4ea4\u53c9\u4e14\u65e5\u5fd7\u6570\u636e\u6ca1\u6709\u4e22\u5931\u7684\u524d\u63d0\u4e0b\uff0c\u6b64\u65f6\u83b7\u53d6\u7684\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u6ca1\u6709\u8bef\u5dee\uff1b"),(0,i.kt)("p",null,"\u2461\u7b2c\u4e00\u6761\u6570\u636e\u6ee1\u8db3\u89c4\u5219\u4e8c\uff0c\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u63a5\u6536\u5230\u7b2c\u4e8c\u6761\u6570\u636e\uff0c\u6c34\u4f4d\u7ebf\u8fbe\u5230\u8d85\u65f6\u65f6\u95f4\uff0c\u7b2c\u4e00\u6761\u6570\u636e\u88ab\u53d1\u9001\u5230\u8d85\u65f6\u4fa7\u8f93\u51fa\u6d41\u3002"),(0,i.kt)("p",null,"\u5373\u4fbf\u5728\u4f1a\u8bdd\u4e4b\u95f4\u4e0d\u4ea4\u53c9\u4e14\u65e5\u5fd7\u6570\u636e\u4e0d\u4e22\u5931\u7684\u524d\u63d0\u4e0b\uff0c\u6b64\u65f6\u83b7\u53d6\u7684\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u4ecd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u8d85\u65f6\u65f6\u95f4\u4e4b\u540e\u4f1a\u8bdd\u53ef\u80fd\u5e76\u672a\u7ed3\u675f\uff0c\u5982\u679c\u6b64\u65f6\u8bbf\u5ba2\u5728\u540c\u4e00\u4f1a\u8bdd\u5185\u8df3\u8f6c\u5230\u4e86\u5176\u5b83\u9875\u9762\uff0c\u5c31\u4f1a\u5bfc\u81f4\u4f1a\u8bdd\u9875\u9762\u6570\u5927\u4e8e 1 \u7684\u8bbf\u95ee\u88ab\u5224\u5b9a\u4e3a\u8df3\u51fa\u884c\u4e3a\uff0c\u4e0b\u6e38\u8ba1\u7b97\u7684\u8df3\u51fa\u7387\u504f\u5927\u3002"),(0,i.kt)("p",null,"\u8bef\u5dee\u5927\u5c0f\u548c\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\u5448\u8d1f\u76f8\u5173\u5173\u7cfb\uff0c\u8d85\u65f6\u65f6\u95f4\u8d8a\u5927\uff0c\u7406\u8bba\u4e0a\u8bef\u5dee\u8d8a\u5c0f\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-2"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242665-cbab2fa8-9aca-4e02-8d09-55111af38e1c.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-2"},"\u4ee3\u7801"),(0,i.kt)("p",null,"1\uff09\u6dfb\u52a0 CEP \u76f8\u5173\u4f9d\u8d56"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>org.apache.flink</groupId>\n    <artifactId>flink-cep_${scala.version}</artifactId>\n    version>${flink.version}</version>\n</dependency>\n")),(0,i.kt)("p",null,"2\uff09\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.log;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;\nimport org.apache.flink.api.common.eventtime.WatermarkStrategy;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.cep.CEP;\nimport org.apache.flink.cep.PatternFlatSelectFunction;\nimport org.apache.flink.cep.PatternFlatTimeoutFunction;\nimport org.apache.flink.cep.PatternStream;\nimport org.apache.flink.cep.pattern.Pattern;\nimport org.apache.flink.cep.pattern.conditions.SimpleCondition;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.KeyedStream;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;\nimport org.apache.flink.util.Collector;\nimport org.apache.flink.util.OutputTag;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class\nDwdTrafficUserJumpDetail {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(30 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece kafka dwd_traffic_page_log \u4e3b\u9898\u8bfb\u53d6\u65e5\u5fd7\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u6d41\n        String topic = "dwd_traffic_page_log";\n        String groupId = "dwd_traffic_user_jump_detail";\n        FlinkKafkaConsumer<String> kafkaConsumer = KafkaUtil.getKafkaConsumer(topic, groupId);\n        DataStreamSource<String> pageLog = env.addSource(kafkaConsumer);\n\n        // \u6d4b\u8bd5\u6570\u636e\n        /*DataStream<String> kafkaDS = env\n            .fromElements(\n                "{\\"common\\":{\\"mid\\":\\"101\\"},\\"page\\":{\\"page_id\\":\\"home\\"},\\"ts\\":10000} ",\n                "{\\"common\\":{\\"mid\\":\\"102\\"},\\"page\\":{\\"page_id\\":\\"home\\"},\\"ts\\":12000}",\n                "{\\"common\\":{\\"mid\\":\\"102\\"},\\"page\\":{\\"page_id\\":\\"good_list\\",\\"last_page_id\\":" +\n                    "\\"home\\"},\\"ts\\":15000} ",\n                "{\\"common\\":{\\"mid\\":\\"102\\"},\\"page\\":{\\"page_id\\":\\"good_list\\",\\"last_page_id\\":" +\n                    "\\"detail\\"},\\"ts\\":30000} "\n            );*/\n\n        // TODO 4. \u8f6c\u6362\u7ed3\u6784\n        SingleOutputStreamOperator<JSONObject> mappedStream = pageLog.map(JSON::parseObject);\n\n        // TODO 5. \u8bbe\u7f6e\u6c34\u4f4d\u7ebf\uff0c\u7528\u4e8e\u7528\u6237\u8df3\u51fa\u7edf\u8ba1\n        SingleOutputStreamOperator<JSONObject> withWatermarkStream = mappedStream.assignTimestampsAndWatermarks(\n                WatermarkStrategy\n                        .<JSONObject>forMonotonousTimestamps()\n                        .withTimestampAssigner(\n                                new SerializableTimestampAssigner<JSONObject>() {\n                                    @Override\n                                    public long extractTimestamp(JSONObject jsonObj, long recordTimestamp) {\n                                        return jsonObj.getLong("ts");\n                                    }\n                                }\n                        )\n        );\n\n        // TODO 6. \u6309\u7167 mid \u5206\u7ec4\n        KeyedStream<JSONObject, String> keyedStream = withWatermarkStream.keyBy(jsonOjb -> jsonOjb.getJSONObject("common").getString("mid"));\n\n        // TODO 7. \u5b9a\u4e49 CEP \u5339\u914d\u89c4\u5219\n        Pattern<JSONObject, JSONObject> pattern = Pattern.<JSONObject>begin("first").where(\n                new SimpleCondition<JSONObject>() {\n\n                    @Override\n                    public boolean filter(JSONObject jsonObj) throws Exception {\n                        String lastPageId = jsonObj.getJSONObject("page").getString("last_page_id");\n                        return lastPageId == null;\n                    }\n                }\n        ).next("second").where(\n                new SimpleCondition<JSONObject>() {\n                    @Override\n                    public boolean filter(JSONObject jsonObj) throws Exception {\n                        String lastPageId = jsonObj.getJSONObject("page").getString("last_page_id");\n                        return lastPageId == null;\n                    }\n                }\n                // \u4e0a\u6587\u8c03\u7528\u4e86\u540c\u540d Time \u7c7b\uff0c\u6b64\u5904\u9700\u8981\u4f7f\u7528\u5168\u7c7b\u540d\n        ).within(org.apache.flink.streaming.api.windowing.time.Time.seconds(10L));\n\n        // TODO 8. \u628a Pattern \u5e94\u7528\u5230\u6d41\u4e0a\n        PatternStream<JSONObject> patternStream = CEP.pattern(keyedStream, pattern);\n\n        // TODO 9. \u63d0\u53d6\u5339\u914d\u4e0a\u7684\u4e8b\u4ef6\u4ee5\u53ca\u8d85\u65f6\u4e8b\u4ef6\n        OutputTag<JSONObject> timeoutTag = new OutputTag<JSONObject>("timeoutTag") {\n        };\n        SingleOutputStreamOperator<JSONObject> flatSelectStream = patternStream.flatSelect(\n                timeoutTag,\n                new PatternFlatTimeoutFunction<JSONObject, JSONObject>() {\n                    @Override\n                    public void timeout(Map<String, List<JSONObject>> pattern, long timeoutTimestamp, Collector<JSONObject> out) throws Exception {\n                        JSONObject element = pattern.get("first").get(0); \n                        out.collect(element);\n                        \n                    }\n                },\n                new PatternFlatSelectFunction<JSONObject, JSONObject>() {\n                    @Override\n                    public void flatSelect(Map<String, List<JSONObject>> pattern, Collector<JSONObject> out) throws Exception {\n                        JSONObject element = pattern.get("first").get(0); \n                        out.collect(element);\n                    }\n                }\n        );\n\n        DataStream<JSONObject> timeOutDStream = flatSelectStream.getSideOutput(timeoutTag);\n\n        // TODO 11. \u5408\u5e76\u4e24\u4e2a\u6d41\u5e76\u5c06\u6570\u636e\u5199\u51fa\u5230 Kafka\n        DataStream<JSONObject> unionDStream = flatSelectStream.union(timeOutDStream);\n        String targetTopic = "dwd_traffic_user_jump_detail";\n        FlinkKafkaProducer<String> kafkaProducer = KafkaUtil.getKafkaProducer(targetTopic);\n          unionDStream .map(JSONAware::toJSONString)\n.addSink(kafkaProducer);\n\n        env.execute();\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u52a0\u8d2d\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4ea4\u6613\u57df\u52a0\u8d2d\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-4"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u63d0\u53d6\u52a0\u8d2d\u64cd\u4f5c\u751f\u6210\u52a0\u8d2d\u8868\uff0c\u5e76\u5c06\u5b57\u5178\u8868\u4e2d\u7684\u76f8\u5173\u7ef4\u5ea6\u9000\u5316\u5230\u52a0\u8d2d\u8868\u4e2d\uff0c\u5199\u51fa\u5230 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-2"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u7ef4\u5ea6\u5173\u8054\uff08\u7ef4\u5ea6\u9000\u5316\uff09\u5b9e\u73b0\u7b56\u7565\u5206\u6790"),(0,i.kt)("p",null,"\u672c\u7ae0\u4e1a\u52a1\u4e8b\u5b9e\u8868\u7684\u6784\u5efa\u5168\u90e8\u4f7f\u7528 FlinkSQL \u5b9e\u73b0\uff0c\u5b57\u5178\u8868\u6570\u636e\u5b58\u50a8\u5728 MySQL \u7684\u4e1a\u52a1\u6570\u636e\u5e93\u4e2d\uff0c\u8981\u505a\u7ef4\u5ea6\u9000\u5316\uff0c\u5c31\u8981\u5c06\u8fd9\u4e9b\u6570\u636e\u4ece MySQL \u4e2d\u63d0\u53d6\u51fa\u6765\u5c01\u88c5\u6210 FlinkSQL \u8868\uff0cFlink \u7684 JDBC SQL Connector \u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u7684\u9700\u6c42\u3002"),(0,i.kt)("p",null,"2\uff09\u77e5\u8bc6\u50a8\u5907\n\uff081\uff09JDBC SQL Connector\nJDBC \u8fde\u63a5\u5668\u53ef\u4ee5\u8ba9 Flink \u7a0b\u5e8f\u4ece\u62e5\u6709 JDBC \u9a71\u52a8\u7684\u4efb\u610f\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u6216\u5c06\u6570\u636e\u5199\u5165\u6570\u636e\u5e93\u3002"),(0,i.kt)("p",null,"\u5982\u679c\u5728 Flink SQL \u8868\u7684 DDL \u8bed\u53e5\u4e2d\u5b9a\u4e49\u4e86\u4e3b\u952e\uff0c\u5219\u4f1a\u4ee5 upsert \u6a21\u5f0f\u5c06\u6d41\u4e2d\u6570\u636e\u5199\u5165\u6570\u636e\u5e93\uff0c\u6b64\u65f6\u6d41\u4e2d\u53ef\u4ee5\u5b58\u5728 UPDATE/DElETE\uff08\u66f4\u65b0/\u5220\u9664\uff09\u7c7b\u578b\u7684\u6570\u636e\u3002\u5426\u5219\uff0c\u4f1a\u4ee5 append \u6a21\u5f0f\u5c06\u6570\u636e\u5199\u51fa\u5230\u6570\u636e\u5e93\uff0c\u6b64\u65f6\u6d41\u4e2d\u53ea\u80fd\u6709 INSERT\uff08\u63d2\u5165\uff09\u7c7b\u578b\u7684\u6570\u636e\u3002"),(0,i.kt)("p",null,"DDL \u7528\u6cd5\u5b9e\u4f8b\u5982\u4e0b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"CREATE TABLE MyUserTable (\n  id BIGINT,\n  name STRING,\n  age INT,\n  status BOOLEAN,\n  PRIMARY KEY (id) NOT ENFORCED\n) WITH (\n   'connector' = 'jdbc',\n   'url' = 'jdbc:mysql://localhost:3306/mydatabase',\n   'table-name' = 'users'\n);\n")),(0,i.kt)("p",null,"\uff082\uff09Lookup Cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"JDBC \u8fde\u63a5\u5668\u53ef\u4ee5\u4f5c\u4e3a\u65f6\u6001\u8868\u5173\u8054\u4e2d\u7684\u67e5\u8be2\u6570\u636e\u6e90\uff08\u53c8\u79f0\u7ef4\u8868\uff09\u3002\u76ee\u524d\uff0c\u4ec5\u652f\u6301\u540c\u6b65\u67e5\u8be2\u6a21\u5f0f\u3002\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u7f13\u5b58\uff08Lookup Cache\uff09\u672a\u88ab\u542f\u7528\uff0c\u9700\u8981\u8bbe\u7f6e lookup.cache.max-rows \u548c lookup.cache.ttl \u53c2\u6570\u6765\u542f\u7528\u6b64\u529f\u80fd\u3002\n\nLookup \u7f13\u5b58\u662f\u7528\u6765\u63d0\u5347\u6709 JDBC \u8fde\u63a5\u5668\u53c2\u4e0e\u7684\u65f6\u6001\u5173\u8054\u6027\u80fd\u7684\u3002\n")),(0,i.kt)("p",null,"  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f13\u5b58\u672a\u542f\u7528\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u4f1a\u88ab\u53d1\u9001\u5230\u5916\u90e8\u6570\u636e\u5e93\u3002"),(0,i.kt)("p",null,"  \u5f53\u7f13\u5b58\u542f\u7528\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\uff08\u5373 TaskManager\uff09\u7ef4\u62a4\u4e00\u4efd\u7f13\u5b58\u3002\u6536\u5230\u8bf7\u6c42\u65f6\uff0cFlink \u4f1a\u5148\u67e5\u8be2\u7f13\u5b58\uff0c\u5982\u679c\u7f13\u5b58\u672a\u547d\u4e2d\u624d\u4f1a\u5411\u5916\u90e8\u6570\u636e\u5e93\u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u7528\u67e5\u8be2\u7ed3\u679c\u66f4\u65b0\u7f13\u5b58\u3002"),(0,i.kt)("p",null,"  \u5982\u679c\u7f13\u5b58\u4e2d\u7684\u8bb0\u5f55\u6761\u6570\u8fbe\u5230\u4e86 lookup.cache.max-rows \u89c4\u5b9a\u7684\u6700\u5927\u884c\u6570\u65f6\u5c06\u6e05\u9664\u5b58\u6d3b\u65f6\u95f4\u6700\u4e45\u7684\u8bb0\u5f55\u3002"),(0,i.kt)("p",null,"  \u5982\u679c\u7f13\u5b58\u4e2d\u7684\u8bb0\u5f55\u5b58\u6d3b\u65f6\u95f4\u8d85\u8fc7\u4e86 lookup.cache.ttl \u89c4\u5b9a\u7684\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u9664\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7f13\u5b58\u4e2d\u7684\u8bb0\u5f55\u672a\u5fc5\u662f\u6700\u65b0\u7684\uff0c\u53ef\u4ee5\u5c06 lookup.cache.ttl \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u503c\u6765\u83b7\u5f97\u65f6\u6548\u6027\u66f4\u597d\u7684\u6570\u636e\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u589e\u52a0\u53d1\u9001\u5230\u6570\u636e\u5e93\u7684\u8bf7\u6c42\u6570\u91cf\u3002\u6240\u4ee5\u9700\u8981\u5728\u541e\u5410\u91cf\u548c\u6b63\u786e\u6027\u4e4b\u95f4\u5bfb\u6c42\u5e73\u8861\u3002\n\n\uff083\uff09Lookup Join\n\nLookup Join \u901a\u5e38\u5728 Flink SQL \u8868\u548c\u5916\u90e8\u7cfb\u7edf\u67e5\u8be2\u7ed3\u679c\u5173\u8054\u65f6\u4f7f\u7528\u3002\n")),(0,i.kt)("p",null,"  \u8fd9\u79cd\u5173\u8054\u8981\u6c42\u4e00\u5f20\u8868\uff08\u4e3b\u8868\uff09\u6709\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\uff0c\u800c\u53e6\u4e00\u5f20\u8868\uff08\u7ef4\u8868\uff09\u7531 Lookup \u8fde\u63a5\u5668\u751f\u6210\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Lookup Join \u505a\u7684\u662f\u7ef4\u5ea6\u5173\u8054\uff0c\u800c\u7ef4\u5ea6\u6570\u636e\u662f\u6709\u65f6\u6548\u6027\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5b57\u6bb5\u6765\u5bf9\u6570\u636e\u7684\u7248\u672c\u8fdb\u884c\u6807\u8bc6\u3002\n")),(0,i.kt)("p",null,"  \u56e0\u6b64\uff0cFlink \u8981\u6c42\u6211\u4eec\u63d0\u4f9b\u5904\u7406\u65f6\u95f4\u7528\u4f5c\u7248\u672c\u5b57\u6bb5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u6b64\u5904\u9009\u62e9\u8c03\u7528 PROCTIME() \u51fd\u6570\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\uff0c\u5c06\u5176\u4f5c\u4e3a\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\u3002\u8be5\u51fd\u6570\u8c03\u7528\u793a\u4f8b\u5982\u4e0b\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'tableEnv.sqlQuery("select PROCTIME() proc_time")\n              .execute()\n              .print();\n// \u7ed3\u679c\n+----+-------------------------+\n| op |               proc_time |\n+----+-------------------------+\n| +I | 2022-04-09 15:45:50.752 |\n+----+-------------------------+\n1 row in set\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\uff084\uff09JDBC SQL Connector \u53c2\u6570\u89e3\u8bfb\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"connector\uff1a\u8fde\u63a5\u5668\u7c7b\u578b\uff0c\u6b64\u5904\u4e3a jdbc"),(0,i.kt)("li",{parentName:"ul"},"url\uff1a\u6570\u636e\u5e93 url"),(0,i.kt)("li",{parentName:"ul"},"table-name\uff1a\u6570\u636e\u5e93\u4e2d\u8868\u540d"),(0,i.kt)("li",{parentName:"ul"},"lookup.cache.max-rows\uff1alookup \u7f13\u5b58\u4e2d\u7684\u6700\u5927\u8bb0\u5f55\u6761\u6570"),(0,i.kt)("li",{parentName:"ul"},"lookup.cache.ttl\uff1alookup \u7f13\u5b58\u4e2d\u6bcf\u6761\u8bb0\u5f55\u7684\u6700\u5927\u5b58\u6d3b\u65f6\u95f4"),(0,i.kt)("li",{parentName:"ul"},"username\uff1a\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u7528\u6237\u540d"),(0,i.kt)("li",{parentName:"ul"},"password\uff1a\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u5bc6\u7801"),(0,i.kt)("li",{parentName:"ul"},"driver\uff1a\u6570\u636e\u5e93\u9a71\u52a8\uff0c\u6ce8\u610f\uff1a\u901a\u5e38\u6ce8\u518c\u9a71\u52a8\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u662f\u81ea\u52a8\u83b7\u53d6\u7684\u9a71\u52a8\u662f com.mysql.jdbc.Driver\uff0cFlink CDC 2.1.0 \u8981\u6c42 mysql \u9a71\u52a8\u7248\u672c\u5fc5\u987b\u4e3a 8 \u53ca\u4ee5\u4e0a\uff0c\u5728 mysql-connector -8.x \u4e2d\u8be5\u9a71\u52a8\u5df2\u8fc7\u65f6\uff0c\u65b0\u7684\u9a71\u52a8\u4e3a com.mysql.cj.jdbc.Driver\u3002\u7701\u7565\u8be5\u53c2\u6570\u63a7\u5236\u53f0\u6253\u5370\u7684\u8b66\u544a\u5982\u4e0b\nLoading class ",(0,i.kt)("inlineCode",{parentName:"li"},"com.mysql.jdbc.Driver'. This is deprecated. The new driver class is "),"com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.","  5\uff09Kafka Connector \u76f8\u5173\u77e5\u8bc6\u9700\u8981\u7ed3\u5408 left join \u7684\u5b9e\u73b0\u8fc7\u7a0b\u8bb2\u89e3\uff0c\u672c\u8282\u5e76\u672a\u6d89\u53ca left join\u3002\u4e8c\u8005\u5c06\u5728\u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u4e00\u5e76\u4ecb\u7ecd\u3002\n")),(0,i.kt)("p",null,"3\uff09\u6267\u884c\u6b65\u9aa4"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\uff081\uff09\u8bfb\u53d6\u8d2d\u7269\u8f66\u8868\u6570\u636e\u3002\n")),(0,i.kt)("p",null,"  \uff082\uff09\u5efa\u7acb Mysql-LookUp \u5b57\u5178\u8868\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\uff083\uff09\u5173\u8054\u8d2d\u7269\u8f66\u8868\u548c\u5b57\u5178\u8868\uff0c\u7ef4\u5ea6\u9000\u5316\u3002\n")),(0,i.kt)("h3",{id:"\u56fe\u89e3-3"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242725-1b8b6830-26c8-4a57-87cb-a3493a5f2196.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-3"},"\u4ee3\u7801"),(0,i.kt)("p",null,"1\uff09\u8865\u5145 Flink SQL \u76f8\u5173\u4f9d\u8d56"),(0,i.kt)("p",null,"\u8981\u6267\u884c Flink SQL \u7a0b\u5e8f\uff0c\u8865\u5145\u76f8\u5173\u4f9d\u8d56\u3002JDBC SQL Connector \u9700\u8981\u7684\u4f9d\u8d56\u5305\u542b\u5728 Flink CDC \u9700\u8981\u7684\u4f9d\u8d56\u4e2d\uff0c\u4e0d\u53ef\u91cd\u590d\u5f15\u5165\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"<dependency>\n<groupId>org.apache.flink</groupId>\n    <artifactId>flink-table-planner-blink_${scala.version}</artifactId>\n    <version>${flink.version}</version>\n</dependency>\n")),(0,i.kt)("p",null,"2\uff09\u5728 KafkaUtil \u4e2d\u8865\u5145 getKafkaDDL \u65b9\u6cd5\u548c getUpsertKafkaDDL \u65b9\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"/**\n     * Kafka-Source DDL \u8bed\u53e5\n     *\n     * @param topic   \u6570\u636e\u6e90\u4e3b\u9898\n     * @param groupId \u6d88\u8d39\u8005\u7ec4\n     * @return \u62fc\u63a5\u597d\u7684 Kafka \u6570\u636e\u6e90 DDL \u8bed\u53e5\n     */\npublic static String getKafkaDDL(String topic, String groupId) {\n\n        return \" with ('connector' = 'kafka', \" +\n                \" 'topic' = '\" + topic + \"',\" +\n                \" 'properties.bootstrap.servers' = '\" + BOOTSTRAP_SERVERS + \"', \" +\n                \" 'properties.group.id' = '\" + groupId + \"', \" +\n                \" 'format' = 'json', \" +\n                \" 'scan.startup.mode' = 'group-offsets')\";\n}\n\n/**\n     * Kafka-Sink DDL \u8bed\u53e5\n     *\n     * @param topic \u8f93\u51fa\u5230 Kafka \u7684\u76ee\u6807\u4e3b\u9898\n     * @return \u62fc\u63a5\u597d\u7684 Kafka-Sink DDL \u8bed\u53e5\n     */\npublic static String getUpsertKafkaDDL(String topic) {\n\n        return \"WITH ( \" +\n                \"  'connector' = 'upsert-kafka', \" +\n                \"  'topic' = '\" + topic + \"', \" +\n                \"  'properties.bootstrap.servers' = '\" + BOOTSTRAP_SERVERS + \"', \" +\n                \"  'key.format' = 'json', \" +\n                \"  'value.format' = 'json' \" +\n                \")\";\n    }\n")),(0,i.kt)("p",null,"3\uff09\u521b\u5efa MysqlUtil \u5de5\u5177\u7c7b"),(0,i.kt)("p",null,"\u5c01\u88c5 mysqlLookUpTableDDL() \u65b9\u6cd5\u548c getBaesDicLookUpDDL() \u65b9\u6cd5\uff0c\u7528\u4e8e\u5c06 MySQL \u6570\u636e\u5e93\u4e2d\u7684\u5b57\u5178\u8868\u8bfb\u53d6\u4e3a Flink LookUp \u8868\uff0c\u4ee5\u4fbf\u7ef4\u5ea6\u9000\u5316\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.util;\n\npublic class MysqlUtil {\npublic static String getBaseDicLookUpDDL() {\n\n        return "create table `base_dic`(\\n" +\n                "`dic_code` string,\\n" +\n                "`dic_name` string,\\n" +\n                "`parent_code` string,\\n" +\n                "`create_time` timestamp,\\n" +\n                "`operate_time` timestamp,\\n" +\n                "primary key(`dic_code`) not enforced\\n" +\n                ")" + MysqlUtil.mysqlLookUpTableDDL("base_dic");\n    }\n\npublic static String mysqlLookUpTableDDL(String tableName) {\n\n        String ddl = "WITH (\\n" +\n                "\'connector\' = \'jdbc\',\\n" +\n                "\'url\' = \'jdbc:mysql://hadoop102:3306/gmall\',\\n" +\n                "\'table-name\' = \'" + tableName + "\',\\n" +\n                "\'lookup.cache.max-rows\' = \'10\',\\n" +\n                "\'lookup.cache.ttl\' = \'1 hour\',\\n" +\n                "\'username\' = \'root\',\\n" +\n                "\'password\' = \'000000\',\\n" +\n                "\'driver\' = \'com.mysql.cj.jdbc.Driver\'\\n" +\n                ")";\n        return ddl;\n    }\n}\n')),(0,i.kt)("p",null,"4\uff09\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.time.ZoneId;\n\n\npublic class DwdTradeCartAdd {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // \u8bbe\u5b9a Table \u4e2d\u7684\u65f6\u533a\u4e3a\u672c\u5730\u65f6\u533a\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of("GMT+8"));\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("" +\n                "create table topic_db(\\n" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`type` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`old` map<string, string>,\\n" +\n                "`ts` string,\\n" +\n                "`proc_time` as PROCTIME()\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_trade_cart_add"));\n\n        // TODO 4. \u8bfb\u53d6\u8d2d\u7269\u8f66\u8868\u6570\u636e\n        Table cartAdd = tableEnv.sqlQuery("" +\n                "select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'sku_id\'] sku_id,\\n" +\n                "data[\'source_id\'] source_id,\\n" +\n                "data[\'source_type\'] source_type,\\n" +\n                "if(`type` = \'insert\',\\n" +\n                "data[\'sku_num\'],cast((cast(data[\'sku_num\'] as int) - cast(`old`[\'sku_num\'] as int)) as string)) sku_num,\\n" +\n                "ts,\\n" +\n                "proc_time\\n" +\n                "from `topic_db` \\n" +\n                "where `table` = \'cart_info\'\\n" +\n                "and (`type` = \'insert\'\\n" +\n                "or (`type` = \'update\' \\n" +\n                "and `old`[\'sku_num\'] is not null \\n" +\n                "and cast(data[\'sku_num\'] as int) > cast(`old`[\'sku_num\'] as int)))");\n        tableEnv.createTemporaryView("cart_add", cartAdd);\n\n        // TODO 5. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\n\n        // TODO 6. \u5173\u8054\u4e24\u5f20\u8868\u83b7\u5f97\u52a0\u8d2d\u660e\u7ec6\u8868\n        Table resultTable = tableEnv.sqlQuery("select\\n" +\n                "cadd.id,\\n" +\n                "user_id,\\n" +\n                "sku_id,\\n" +\n                "source_id,\\n" +\n                "source_type,\\n" +\n                "dic_name source_type_name,\\n" +\n                "sku_num,\\n" +\n                "ts\\n" +\n                "from cart_add cadd\\n" +\n                "left join base_dic for system_time as of cadd.proc_time as dic\\n" +\n                "on cadd.source_type=dic.dic_code");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 7. \u5efa\u7acb Upsert-Kafka dwd_trade_cart_add \u8868\n        tableEnv.executeSql("" +\n                "create table dwd_trade_cart_add(\\n" +\n                "id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "source_id string,\\n" +\n                "source_type_code string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "ts string,\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_cart_add"));\n\n        // TODO 8. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_trade_cart_add select * from result_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u8868"},"\u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-5"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u7ecf\u8fc7\u5206\u6790\uff0c\u8ba2\u5355\u660e\u7ec6\u8868\u548c\u8ba2\u5355\u8868\u7684\u6570\u636e\u6765\u6e90\u3001\u8868\u7ed3\u6784\u90fd\u76f8\u540c\uff0c\u5dee\u522b\u53ea\u5728\u4e1a\u52a1\u8fc7\u7a0b\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u4e3a\u4e86\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u5c06\u4e24\u5f20\u8868\u516c\u5171\u7684\u5173\u8054\u8fc7\u7a0b\u63d0\u53d6\u51fa\u6765\uff0c\u5f62\u6210\u8ba2\u5355\u9884\u5904\u7406\u8868\u3002"),(0,i.kt)("p",null,"\u5173\u8054\u8ba2\u5355\u660e\u7ec6\u8868\u3001\u8ba2\u5355\u8868\u3001\u8ba2\u5355\u660e\u7ec6\u6d3b\u52a8\u5173\u8054\u8868\u3001\u8ba2\u5355\u660e\u7ec6\u4f18\u60e0\u5238\u5173\u8054\u8868\u56db\u5f20\u4e8b\u5b9e\u4e1a\u52a1\u8868\u548c\u5b57\u5178\u8868\uff08\u7ef4\u5ea6\u4e1a\u52a1\u8868\uff09\u5f62\u6210\u8ba2\u5355\u9884\u5904\u7406\u8868\uff0c\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002"),(0,i.kt)("p",null,"\u672c\u8282\u5f62\u6210\u7684\u9884\u5904\u7406\u8868\u4e2d\u8981\u4fdd\u7559\u8ba2\u5355\u8868\u7684 type \u548c old \u5b57\u6bb5\uff0c\u7528\u4e8e\u8fc7\u6ee4\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u548c\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u3002"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-3"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u77e5\u8bc6\u50a8\u5907"),(0,i.kt)("p",null,"\uff081\uff09left join \u5b9e\u73b0\u8fc7\u7a0b"),(0,i.kt)("p",null,"\u5047\u8bbe A \u8868\u4f5c\u4e3a\u4e3b\u8868\u4e0e B \u8868\u505a\u7b49\u503c\u5de6\u5916\u8054\u3002\u5f53 A \u8868\u6570\u636e\u8fdb\u5165\u7b97\u5b50\uff0c\u800c B \u8868\u6570\u636e\u672a\u81f3\u65f6\u4f1a\u5148\u751f\u6210\u4e00\u6761 B \u8868\u5b57\u6bb5\u5747\u4e3a null \u7684\u5173\u8054\u6570\u636eab1\uff0c\u5176\u6807\u8bb0\u4e3a +I\u3002"),(0,i.kt)("p",null,"\u5176\u540e\uff0cB \u8868\u6570\u636e\u5230\u6765\uff0c\u4f1a\u5148\u5c06\u4e4b\u524d\u7684\u6570\u636e\u64a4\u56de\uff0c\u5373\u751f\u6210\u4e00\u6761\u4e0e ab1 \u5185\u5bb9\u76f8\u540c\uff0c\u4f46\u6807\u8bb0\u4e3a -D \u7684\u6570\u636e\uff0c\u518d\u751f\u6210\u4e00\u6761\u5173\u8054\u540e\u7684\u6570\u636e\uff0c\u6807\u8bb0\u4e3a +I\u3002\u8fd9\u6837\u751f\u6210\u7684\u52a8\u6001\u8868\u5bf9\u5e94\u7684\u6d41\u79f0\u4e4b\u4e3a\u56de\u64a4\u6d41\u3002"),(0,i.kt)("p",null,"\uff082\uff09Kafka SQL Connector"),(0,i.kt)("p",null,"Kafka SQL Connector \u5206\u4e3a Kafka SQL Connector \u548c Upsert Kafka SQL Connector"),(0,i.kt)("p",null,"\u2460 \u529f\u80fd\nUpsert Kafka Connector\u652f\u6301\u4ee5 upsert \u65b9\u5f0f\u4ece Kafka topic \u4e2d\u8bfb\u5199\u6570\u636e\nKafka Connector\u652f\u6301\u4ece Kafka topic \u4e2d\u8bfb\u5199\u6570\u636e"),(0,i.kt)("p",null,"\u2461 \u533a\u522b"),(0,i.kt)("p",null,"a\uff09\u5efa\u8868\u8bed\u53e5\u7684\u4e3b\u952e"),(0,i.kt)("p",null,"i\uff09Kafka Connector \u8981\u6c42\u8868\u4e0d\u80fd\u6709\u4e3b\u952e\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u4e3b\u952e\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b"),(0,i.kt)("p",null,"Caused by: org.apache.flink.table.api.ValidationException: The Kafka table 'default_catalog.default_database.normal_sink_topic' with 'json' format doesn't support defining PRIMARY KEY constraint on the table, because it can't guarantee the semantic of primary key.\nii\uff09"),(0,i.kt)("p",null,"\u800c Upsert Kafka Connector \u8981\u6c42\u8868\u5fc5\u987b\u6709\u4e3b\u952e\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u4e3b\u952e\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b"),(0,i.kt)("p",null,"Caused by: org.apache.flink.table.api.ValidationException: 'upsert-kafka' tables require to define a PRIMARY KEY constraint. The PRIMARY KEY specifies which columns should be read from or write to the Kafka message key. The PRIMARY KEY also defines records in the 'upsert-kafka' table should update or delete on which keys.\niii\uff09"),(0,i.kt)("p",null,"\u8bed\u6cd5\uff1a primary key(id) not enforced "),(0,i.kt)("p",null,"\u6ce8\u610f\uff1anot enforced \u8868\u793a\u4e0d\u5bf9\u6765\u5f80\u6570\u636e\u505a\u7ea6\u675f\u6821\u9a8c\uff0cFlink \u5e76\u4e0d\u662f\u6570\u636e\u7684\u4e3b\u4eba\uff0c\u56e0\u6b64\u53ea\u652f\u6301 not enforced \u6a21\u5f0f"),(0,i.kt)("p",null,"\u5982\u679c\u6ca1\u6709 not enforced\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b"),(0,i.kt)("p",null,'Exception in thread "main" org.apache.flink.table.api.ValidationException: Flink doesn\'t support ENFORCED mode for PRIMARY KEY constaint. ENFORCED/NOT ENFORCED  controls if the constraint checks are performed on the incoming/outgoing data. Flink does not own the data therefore the only supported mode is the NOT ENFORCED mode'),(0,i.kt)("p",null,"b\uff09\u5bf9\u8868\u4e2d\u6570\u636e\u64cd\u4f5c\u7c7b\u578b\u7684\u8981\u6c42"),(0,i.kt)("p",null,"i\uff09Kafka Connector \u4e0d\u80fd\u6d88\u8d39\u5e26\u6709 Upsert/Delete \u64cd\u4f5c\u7c7b\u578b\u6570\u636e\u7684\u8868\uff0c\u5982 left join \u751f\u6210\u7684\u52a8\u6001\u8868\u3002\u5982\u679c\u5bf9\u8fd9\u7c7b\u8868\u8fdb\u884c\u6d88\u8d39\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b"),(0,i.kt)("p",null,"Exception in thread \"main\" org.apache.flink.table.api.TableException: Table sink 'default_catalog.default_database.normal_sink_topic' doesn't support consuming update and delete changes which is produced by node TableSourceScan(table=[","[default_catalog, default_database, Unregistered_DataStream_Source_9]","], fields=","[l_id, tag_left, tag_right]",")\nii\uff09"),(0,i.kt)("p",null,"Upsert Kafka Connector \u5c06 INSERT/UPDATE_AFTER \u6570\u636e\u4f5c\u4e3a\u6b63\u5e38\u7684 Kafka \u6d88\u606f\u5199\u5165\uff0c\u5e76\u5c06 DELETE \u6570\u636e\u4ee5 value \u4e3a\u7a7a\u7684 Kafka \u6d88\u606f\u5199\u5165\uff08\u8868\u793a\u5bf9\u5e94 key \u7684\u6d88\u606f\u88ab\u5220\u9664\uff09\u3002"),(0,i.kt)("p",null,"Flink \u5c06\u6839\u636e\u4e3b\u952e\u5217\u7684\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u533a\uff0c\u56e0\u6b64\u540c\u4e00\u4e3b\u952e\u7684\u66f4\u65b0/\u5220\u9664\u6d88\u606f\u5c06\u843d\u5728\u540c\u4e00\u5206\u533a\uff0c\u4ece\u800c\u4fdd\u8bc1\u540c\u4e00\u4e3b\u952e\u7684\u6d88\u606f\u6709\u5e8f\u3002"),(0,i.kt)("p",null,"\u2462 left join \u7ed3\u5408 Upsert Kafka Connector \u4f7f\u7528\u8303\u4f8b"),(0,i.kt)("p",null,"\u8bf4\u660e\uff1aKafka \u5e76\u884c\u5ea6\u4e3a 4"),(0,i.kt)("p",null,"a\uff09\u8868\u7ed3\u6784"),(0,i.kt)("p",null,"left\u8868\nid    tag\nA    left\nB    left\nC    left "),(0,i.kt)("p",null,"right \u8868\nid    tag\nA    right\nB    right\nC    right"),(0,i.kt)("p",null,"b\uff09\u67e5\u8be2\u8bed\u53e5"),(0,i.kt)("p",null,"select\nl.id l_id,\nl.tag l_tag,\nr.tag r_tag\nfrom left l\nleft join\nright r\non l.id = r.id"),(0,i.kt)("p",null,"c\uff09\u5173\u8054\u7ed3\u679c\u5199\u5165\u5230 Upsert Kafka \u8868\uff0c\u6d88\u8d39 Kafka \u5bf9\u5e94\u4e3b\u9898\u6570\u636e\u7ed3\u679c\u5c55\u793a"),(0,i.kt)("p",null,'{"l_id":"A","tag_left":"left","tag_right":null}\nnull\n{"l_id":"A","tag_left":"left","tag_right":"right"}\n{"l_id":"C","tag_left":"left","tag_right":null}\nnull\n{"l_id":"C","tag_left":"left","tag_right":"right"}\n{"l_id":"B","tag_left":"left","tag_right":null}\nnull\n{"l_id":"B","tag_left":"left","tag_right":"right"}'),(0,i.kt)("p",null,"\u2463 \u53c2\u6570\u89e3\u8bfb\n\u672c\u8282\u9700\u8981\u7528\u5230 Kafka \u8fde\u63a5\u5668\u7684\u660e\u7ec6\u8868\u6570\u636e\u6765\u6e90\u4e8e topic_db \u4e3b\u9898\uff0c\u4e8e Kafka \u800c\u8a00\uff0c\u8be5\u4e3b\u9898\u7684\u6570\u636e\u7684\u64cd\u4f5c\u7c7b\u578b\u5747\u4e3a INSERT\uff0c\u6240\u4ee5\u8bfb\u53d6\u6570\u636e\u4f7f\u7528 Kafka Connector \u5373\u53ef\u3002\u800c\u7531\u4e8e left join \u7684\u5b58\u5728\uff0c\u6d41\u4e2d\u5b58\u5728\u4fee\u6539\u6570\u636e\uff0c\u6240\u4ee5\u5199\u51fa\u6570\u636e\u4f7f\u7528 Upsert Kafka Connector\u3002"),(0,i.kt)("p",null,"a\uff09Kafka Connector \u53c2\u6570"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"connector\uff1a\u6307\u5b9a\u4f7f\u7528\u7684\u8fde\u63a5\u5668\uff0c\u5bf9\u4e8e Kafka\uff0c\u53ea\u7528 'kafka'"),(0,i.kt)("li",{parentName:"ul"},"topic\uff1a\u4e3b\u9898"),(0,i.kt)("li",{parentName:"ul"},"properties.bootstrap.servers\uff1a\u4ee5\u9017\u53f7\u5206\u9694\u7684 Kafka broker \u5217\u8868\u3002\u6ce8\u610f\uff1a\u53ef\u4ee5\u901a\u8fc7 properties.",(0,i.kt)("em",{parentName:"li"}," \u7684\u65b9\u5f0f\u6307\u5b9a\u914d\u7f6e\u9879\uff0c"),"\u7684\u4f4d\u7f6e\u7528 Kafka \u5b98\u65b9\u89c4\u5b9a\u7684\u914d\u7f6e\u9879\u7684 key \u66ff\u4ee3\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u914d\u7f6e\uff0c\u56e0\u4e3a Flink \u53ef\u80fd\u4f1a\u5c06\u5b83\u4eec\u8986\u76d6\uff0c\u5982\uff1a'key.deserializer' \u548c 'value.deserializer'"),(0,i.kt)("li",{parentName:"ul"},"properties.group.id\uff1a\u6d88\u8d39\u8005\u7ec4 ID"),(0,i.kt)("li",{parentName:"ul"},"format\uff1a\u6307\u5b9a Kafka \u6d88\u606f\u4e2d value \u90e8\u5206\u7684\u5e8f\u5217\u5316\u7684\u53cd\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c'format' \u548c 'value.format' \u4e8c\u8005\u5fc5\u6709\u5176\u4e00"),(0,i.kt)("li",{parentName:"ul"},"scan.startup.mode\uff1aKafka \u6d88\u8d39\u8005\u542f\u52a8\u6a21\u5f0f\uff0c\u6709\u56db\u79cd\u53d6\u503c"),(0,i.kt)("li",{parentName:"ul"},"'earliest-offset'\uff1a\u4ece\u504f\u79fb\u91cf\u6700\u65e9\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u6570\u636e"),(0,i.kt)("li",{parentName:"ul"},"'latest-offset'\uff1a\u4ece\u504f\u79fb\u91cf\u6700\u65b0\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u6570\u636e"),(0,i.kt)("li",{parentName:"ul"},"'group-offsets'\uff1a\u4ece Zookeeper/Kafka broker \u4e2d\u7ef4\u62a4\u7684\u6d88\u8d39\u8005\u7ec4\u504f\u79fb\u91cf\u5f00\u59cb\u8bfb\u53d6\u6570\u636e"),(0,i.kt)("li",{parentName:"ul"},"'timestamp'\uff1a\u4ece\u7528\u6237\u4e3a\u6bcf\u4e2a\u5206\u533a\u63d0\u4f9b\u7684\u65f6\u95f4\u6233\u5f00\u59cb\u8bfb\u53d6\u6570\u636e"),(0,i.kt)("li",{parentName:"ul"},"'specific-offsets'\uff1a\u4ece\u7528\u6237\u4e3a\u6bcf\u4e2a\u5206\u533a\u63d0\u4f9b\u7684\u504f\u79fb\u91cf\u5f00\u59cb\u8bfb\u53d6\u6570\u636e")),(0,i.kt)("p",null,"\u9ed8\u8ba4\u503c\u4e3a group-offsets\u3002\u8981\u6ce8\u610f\uff1alatest-offset \u4e0e Kafka \u5b98\u65b9\u63d0\u4f9b\u7684\u914d\u7f6e\u9879 latest \u4e0d\u540c\uff0c Flink \u4f1a\u5c06\u504f\u79fb\u91cf\u7f6e\u4e3a\u6700\u65b0\u4f4d\u7f6e\uff0c\u8986\u76d6\u6389 Zookeeper \u6216 Kafka \u4e2d\u7ef4\u62a4\u7684\u504f\u79fb\u91cf\u3002"),(0,i.kt)("p",null,"\u4e0e\u5b98\u65b9\u63d0\u4f9b\u7684 latest \u76f8\u5bf9\u5e94\u7684\u662f\u6b64\u5904\u7684 group-offsets\u3002"),(0,i.kt)("p",null,"b\uff09Upsert Kafka Connector \u53c2\u6570"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"connector\uff1a\u6307\u5b9a\u4f7f\u7528\u7684\u8fde\u63a5\u5668\uff0c\u5bf9\u4e8e Upsert Kafka\uff0c\u4f7f\u7528 'upsert-kafka'"),(0,i.kt)("li",{parentName:"ul"},"topic\uff1a\u4e3b\u9898"),(0,i.kt)("li",{parentName:"ul"},"properties.bootstrap.servers\uff1a\u4ee5\u9017\u53f7\u5206\u9694\u7684 Kafka broker \u5217\u8868"),(0,i.kt)("li",{parentName:"ul"},"key.format\uff1akey \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u683c\u5f0f"),(0,i.kt)("li",{parentName:"ul"},"value.format\uff1avalue \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u683c\u5f0f")),(0,i.kt)("p",null,"2\uff09\u6267\u884c\u6b65\u9aa4\n\u9884\u5904\u7406\u8868\u4e0e\u8ba2\u5355\u660e\u7ec6\u4e8b\u52a1\u4e8b\u5b9e\u8868\u7684\u533a\u522b\u53ea\u5728\u4e8e\u524d\u8005\u4e0d\u4f1a\u6309\u7167\u8ba2\u5355\u6570\u636e\u7684 type \u548c old \u5b57\u6bb5\u505a\u8fc7\u6ee4\uff0c\u4e14\u5728\u8868\u4e2d\u589e\u52a0\u4e86\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u3002\u4e8c\u8005\u7684\u7c92\u5ea6\u3001\u805a\u5408\u903b\u8f91\u90fd\u76f8\u540c\uff0c\u56e0\u6b64\u6309\u7167\u8ba2\u5355\u660e\u7ec6\u8868\u7684\u601d\u8def\u5bf9\u9884\u5904\u7406\u8868\u8fdb\u884c\u5206\u6790\u5373\u53ef\u3002"),(0,i.kt)("p",null,"\uff081\uff09\u4ece Kafka topic_db \u4e3b\u9898\u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff1b\n\u8fd9\u4e00\u6b65\u8981\u8c03\u7528 PROCTIME() \u51fd\u6570\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\u4f5c\u4e3a\u4e0e\u5b57\u5178\u8868\u505a Lookup Join \u7684\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\u3002"),(0,i.kt)("p",null,"\uff082\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u8868\u6570\u636e\uff1b\n\u5e94\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u4e8b\u5b9e\u8868\u7684\u7c92\u5ea6\u4e3a\u6700\u7ec6\u7c92\u5ea6\uff0c\u5728\u4e0b\u5355\u4e1a\u52a1\u8fc7\u7a0b\u4e2d\uff0c\u6700\u7ec6\u7c92\u5ea6\u7684\u4e8b\u4ef6\u4e3a\u4e00\u4e2a\u8ba2\u5355\u7684\u4e00\u4e2a SKU \u7684\u4e0b\u5355\u64cd\u4f5c\uff0c\u8ba2\u5355\u660e\u7ec6\u8868\u7684\u7c92\u5ea6\u4e0e\u6700\u7ec6\u7c92\u5ea6\u76f8\u540c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e3b\u8868\u3002"),(0,i.kt)("p",null,"\uff083\uff09\u7b5b\u9009\u8ba2\u5355\u8868\u6570\u636e\uff1b\n\u901a\u8fc7\u8be5\u8868\u83b7\u53d6 user_id \u548c province_id\u3002\u4fdd\u7559 type \u5b57\u6bb5\u548c old \u5b57\u6bb5\u7528\u4e8e\u8fc7\u6ee4\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u548c\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u3002"),(0,i.kt)("p",null,"\uff084\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u6d3b\u52a8\u5173\u8054\u8868\u6570\u636e\uff1b\n\u901a\u8fc7\u8be5\u8868\u83b7\u53d6\u6d3b\u52a8 id \u548c\u6d3b\u52a8\u89c4\u5219 id\u3002"),(0,i.kt)("p",null,"\uff085\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u4f18\u60e0\u5238\u5173\u8054\u8868\u6570\u636e\uff1b\n\u901a\u8fc7\u8be5\u8868\u83b7\u53d6\u4f18\u60e0\u5238 id\u3002"),(0,i.kt)("p",null,"\uff086\uff09\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\uff1b\n\u901a\u8fc7\u5b57\u5178\u8868\u83b7\u53d6\u8ba2\u5355\u6765\u6e90\u7c7b\u578b\u540d\u79f0\u3002"),(0,i.kt)("p",null,"\uff087\uff09\u5173\u8054\u4e0a\u8ff0\u4e94\u5f20\u8868\u83b7\u5f97\u8ba2\u5355\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u4e3b\u9898\n\u4e3b\u8868\u4e0e\u5176\u4f59\u56db\u5f20\u8868\u7684\u5173\u8054\u90fd\u4e3a\u4e86\u83b7\u53d6\u7ef4\u5ea6\u4fe1\u606f\uff0c\u4f7f\u7528\u5de6\u5916\u8fde\u63a5\u5373\u53ef\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-4"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242778-9c825356-7b33-4916-a436-fdc6475d9f1e.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-4"},"\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.time.ZoneId;\n\npublic class DwdTradeOrderPreProcess {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.setRestartStrategy(\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\n        );\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of("GMT+8"));\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` String,\\n" +\n                "`table` String,\\n" +\n                "`type` String,\\n" +\n                "`data` map<String, String>,\\n" +\n                "`old` map<String, String>,\\n" +\n                "`proc_time` as PROCTIME(),\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_trade_order_pre_process"));\n\n        // TODO 4. \u8bfb\u53d6\u8ba2\u5355\u660e\u7ec6\u8868\u6570\u636e\n        Table orderDetail = tableEnv.sqlQuery("select \\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'order_id\'] order_id,\\n" +\n                "data[\'sku_id\'] sku_id,\\n" +\n                "data[\'sku_name\'] sku_name,\\n" +\n                "data[\'create_time\'] create_time,\\n" +\n                "data[\'source_id\'] source_id,\\n" +\n                "data[\'source_type\'] source_type,\\n" +\n                "data[\'sku_num\'] sku_num,\\n" +\n                "cast(cast(data[\'sku_num\'] as decimal(16,2)) * " +\n                "cast(data[\'order_price\'] as decimal(16,2)) as String) split_original_amount,\\n" +\n                "data[\'split_total_amount\'] split_total_amount,\\n" +\n                "data[\'split_activity_amount\'] split_activity_amount,\\n" +\n                "data[\'split_coupon_amount\'] split_coupon_amount,\\n" +\n                "ts od_ts,\\n" +\n                "proc_time\\n" +\n                "from `topic_db` where `table` = \'order_detail\' " +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("order_detail", orderDetail);\n\n        // TODO 5. \u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\n        Table orderInfo = tableEnv.sqlQuery("select \\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'province_id\'] province_id,\\n" +\n                "data[\'operate_time\'] operate_time,\\n" +\n                "data[\'order_status\'] order_status,\\n" +\n                "`type`,\\n" +\n                "`old`,\\n" +\n                "ts oi_ts\\n" +\n                "from `topic_db`\\n" +\n                "where `table` = \'order_info\'\\n" +\n                "and (`type` = \'insert\' or `type` = \'update\')");\n        tableEnv.createTemporaryView("order_info", orderInfo);\n\n        // TODO 6. \u8bfb\u53d6\u8ba2\u5355\u660e\u7ec6\u6d3b\u52a8\u5173\u8054\u8868\u6570\u636e\n        Table orderDetailActivity = tableEnv.sqlQuery("select \\n" +\n                "data[\'order_detail_id\'] order_detail_id,\\n" +\n                "data[\'activity_id\'] activity_id,\\n" +\n                "data[\'activity_rule_id\'] activity_rule_id\\n" +\n                "from `topic_db`\\n" +\n                "where `table` = \'order_detail_activity\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("order_detail_activity", orderDetailActivity);\n\n        // TODO 7. \u8bfb\u53d6\u8ba2\u5355\u660e\u7ec6\u4f18\u60e0\u5238\u5173\u8054\u8868\u6570\u636e\n        Table orderDetailCoupon = tableEnv.sqlQuery("select\\n" +\n                "data[\'order_detail_id\'] order_detail_id,\\n" +\n                "data[\'coupon_id\'] coupon_id\\n" +\n                "from `topic_db`\\n" +\n                "where `table` = \'order_detail_coupon\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("order_detail_coupon", orderDetailCoupon);\n\n        // TODO 8. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\n\n        // TODO 9. \u5173\u8054\u4e94\u5f20\u8868\u83b7\u5f97\u8ba2\u5355\u660e\u7ec6\u8868\n        Table resultTable = tableEnv.sqlQuery("select \\n" +\n                "od.id,\\n" +\n                "od.order_id,\\n" +\n                "oi.user_id,\\n" +\n                "oi.order_status,\\n" +\n                "od.sku_id,\\n" +\n                "od.sku_name,\\n" +\n                "oi.province_id,\\n" +\n                "act.activity_id,\\n" +\n                "act.activity_rule_id,\\n" +\n                "cou.coupon_id,\\n" +\n                "date_format(od.create_time, \'yyyy-MM-dd\') date_id,\\n" +\n                "od.create_time,\\n" +\n                "date_format(oi.operate_time, \'yyyy-MM-dd\') operate_date_id,\\n" +\n                "oi.operate_time,\\n" +\n                "od.source_id,\\n" +\n                "od.source_type,\\n" +\n                "dic.dic_name source_type_name,\\n" +\n                "od.sku_num,\\n" +\n                "od.split_original_amount,\\n" +\n                "od.split_activity_amount,\\n" +\n                "od.split_coupon_amount,\\n" +\n                "od.split_total_amount,\\n" +\n                "oi.`type`,\\n" +\n                "oi.`old`,\\n" +\n                "od.od_ts,\\n" +\n                "oi.oi_ts,\\n" +\n                "current_row_timestamp() row_op_ts\\n" +\n                "from order_detail od \\n" +\n                "join order_info oi\\n" +\n                "on od.order_id = oi.id\\n" +\n                "left join order_detail_activity act\\n" +\n                "on od.id = act.order_detail_id\\n" +\n                "left join order_detail_coupon cou\\n" +\n                "on od.id = cou.order_detail_id\\n" +\n                "left join `base_dic` for system_time as of od.proc_time as dic\\n" +\n                "on od.source_type = dic.dic_code");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 10. \u5efa\u7acb Upsert-Kafka dwd_trade_order_pre_process \u8868\n        tableEnv.executeSql("" +\n                "create table dwd_trade_order_pre_process(\\n" +\n                "id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "order_status string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "operate_date_id string,\\n" +\n                "operate_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_total_amount string,\\n" +\n                "`type` string,\\n" +\n                "`old` map<string,string>,\\n" +\n                "od_ts string,\\n" +\n                "oi_ts string,\\n" +\n                "row_op_ts timestamp_ltz(3),\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_order_pre_process"));\n\n        // TODO 11. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_trade_order_pre_process \\n" +\n                "select * from result_table")\n                .print();\n\n        env.execute();\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4ea4\u6613\u57df\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-6"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u4ece Kafka \u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u8868\u6570\u636e\uff0c\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff0c\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-4"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"\u5b9e\u73b0\u6b65\u9aa4"),(0,i.kt)("p",null,"\uff081\uff09\u4ece Kafka dwd_trade_order_pre_process \u4e3b\u9898\u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u6570\u636e\uff1b"),(0,i.kt)("p",null,"\uff082\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff1a\u65b0\u589e\u6570\u636e\uff0c\u5373\u8ba2\u5355\u8868\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u4e3a\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff1b"),(0,i.kt)("p",null,"\uff083\uff09\u5199\u5165 Kafka \u8ba2\u5355\u660e\u7ec6\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-5"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242807-36dcfafa-0ea0-4ee0-b3c9-e076a5b343a0.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-5"},"\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.time.ZoneId;\n\npublic class DwdTradeOrderDetail {\n\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.setRestartStrategy(\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\n        );\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of("GMT+8"));\n\n        // TODO 3. \u8bfb\u53d6 Kafka dwd_trade_order_pre_process \u4e3b\u9898\u6570\u636e\n        tableEnv.executeSql("" +\n                "create table dwd_trade_order_pre_process(\\n" +\n                "id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "order_status string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "operate_date_id string,\\n" +\n                "operate_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_total_amount string,\\n" +\n                "`type` string,\\n" +\n                "`old` map<string,string>,\\n" +\n                "od_ts string,\\n" +\n                "oi_ts string,\\n" +\n                "row_op_ts timestamp_ltz(3)\\n" +\n                ")" + KafkaUtil.getKafkaDDL(\n                "dwd_trade_order_pre_process", "dwd_trade_order_detail"));\n\n        // TODO 4. \u8fc7\u6ee4\u4e0b\u5355\u6570\u636e\n        Table filteredTable = tableEnv.sqlQuery("" +\n                "select " +\n                "id,\\n" +\n                "order_id,\\n" +\n                "user_id,\\n" +\n                "sku_id,\\n" +\n                "sku_name,\\n" +\n                "province_id,\\n" +\n                "activity_id,\\n" +\n                "activity_rule_id,\\n" +\n                "coupon_id,\\n" +\n                "date_id,\\n" +\n                "create_time,\\n" +\n                "source_id,\\n" +\n                "source_type source_type_code,\\n" +\n                "source_type_name,\\n" +\n                "sku_num,\\n" +\n                "split_original_amount,\\n" +\n                "split_activity_amount,\\n" +\n                "split_coupon_amount,\\n" +\n                "split_total_amount,\\n" +\n                "od_ts ts,\\n" +\n                "row_op_ts\\n" +\n                "from dwd_trade_order_pre_process " +\n                "where `type`=\'insert\'");\n        tableEnv.createTemporaryView("filtered_table", filteredTable);\n\n        // TODO 5. \u521b\u5efa Kafka \u4e0b\u5355\u660e\u7ec6\u8868\n        tableEnv.executeSql("" +\n                "create table dwd_trade_order_detail(\\n" +\n                "id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type_code string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_total_amount string,\\n" +\n                "ts string,\\n" +\n                "row_op_ts timestamp_ltz(3),\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_order_detail"));\n\n        // TODO 6. \u5c06\u6570\u636e\u5199\u51fa\u5230 Kafka\n        tableEnv.executeSql("insert into dwd_trade_order_detail select * from filtered_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u53d6\u6d88\u8ba2\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4ea4\u6613\u57df\u53d6\u6d88\u8ba2\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-7"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u4ece Kafka \u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u8868\u6570\u636e\uff0c\u7b5b\u9009\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff0c\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-5"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"\u5b9e\u73b0\u6b65\u9aa4"),(0,i.kt)("p",null,"\uff081\uff09\u4ece Kafka dwd_trade_order_pre_process \u4e3b\u9898\u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u6570\u636e\uff1b"),(0,i.kt)("p",null,'\uff082\uff09\u7b5b\u9009\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff1a\u4fdd\u7559\u4fee\u6539\u4e86 order_status \u5b57\u6bb5\u4e14\u4fee\u6539\u540e\u8be5\u5b57\u6bb5\u503c\u4e3a "1003" \u7684\u6570\u636e;'),(0,i.kt)("p",null,"\uff083\uff09\u5199\u5165 Kafka \u53d6\u6d88\u8ba2\u5355\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-6"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242824-aeb7b7b9-afb7-407e-b5ab-3bd377c577e1.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-6"},"\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.time.ZoneId;\n\npublic class DwdTradeCancelDetail  {\n\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.setRestartStrategy(\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\n        );\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of("GMT+8"));\n\n        // TODO 3. \u8bfb\u53d6 Kafka dwd_trade_order_pre_process \u4e3b\u9898\u6570\u636e\n        tableEnv.executeSql("" +\n                "create table dwd_trade_order_pre_process(\\n" +\n                "id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "order_status string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "operate_date_id string,\\n" +\n                "operate_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_total_amount string,\\n" +\n                "`type` string,\\n" +\n                "`old` map<string,string>,\\n" +\n                "od_ts string,\\n" +\n                "oi_ts string,\\n" +\n                "row_op_ts timestamp_ltz(3)\\n" +\n                ")" + KafkaUtil.getKafkaDDL(\n                        "dwd_trade_order_pre_process", "dwd_trade_cancel_detail"));\n\n        // TODO 4. \u7b5b\u9009\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\n        Table filteredTable = tableEnv.sqlQuery("" +\n                "select\\n" +\n                "id,\\n" +\n                "order_id,\\n" +\n                "user_id,\\n" +\n                "sku_id,\\n" +\n                "sku_name,\\n" +\n                "province_id,\\n" +\n                "activity_id,\\n" +\n                "activity_rule_id,\\n" +\n                "coupon_id,\\n" +\n                "operate_date_id date_id,\\n" +\n                "operate_time cancel_time,\\n" +\n                "source_id,\\n" +\n                "source_type source_type_code,\\n" +\n                "source_type_name,\\n" +\n                "sku_num,\\n" +\n                "split_original_amount,\\n" +\n                "split_activity_amount,\\n" +\n                "split_coupon_amount,\\n" +\n                "split_total_amount,\\n" +\n                "oi_ts ts,\\n" +\n                "row_op_ts\\n" +\n                "from dwd_trade_order_pre_process\\n" +\n                "where `type` = \'update\'\\n" +\n                "and `old`[\'order_status\'] is not null\\n" +\n                "and order_status = \'1003\'");\n        tableEnv.createTemporaryView("filtered_table", filteredTable);\n\n        // TODO 5. \u5efa\u7acb Upsert-Kafka dwd_trade_cancel_detail \u8868\n        tableEnv.executeSql("create table dwd_trade_cancel_detail(\\n" +\n                "id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "date_id string,\\n" +\n                "cancel_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type_code string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_total_amount string,\\n" +\n                "ts string,\\n" +\n                "row_op_ts timestamp_ltz(3),\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_cancel_detail"));\n\n        // TODO 6. \u5c06\u6570\u636e\u5199\u51fa\u5230 Kafka\n        tableEnv.executeSql(\n                "insert into dwd_trade_cancel_detail select * from filtered_table");\n    }\n\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u652f\u4ed8\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4ea4\u6613\u57df\u652f\u4ed8\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-8"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u4ece Kafka topic_db\u4e3b\u9898\u7b5b\u9009\u652f\u4ed8\u6210\u529f\u6570\u636e\u3001\u4ecedwd_trade_order_detail\u4e3b\u9898\u4e2d\u8bfb\u53d6\u8ba2\u5355\u4e8b\u5b9e\u6570\u636e\u3001MySQL-LookUp\u5b57\u5178\u8868\uff0c\u5173\u8054\u4e09\u5f20\u8868\u5f62\u6210\u652f\u4ed8\u6210\u529f\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u652f\u4ed8\u6210\u529f\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-6"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u83b7\u53d6\u8ba2\u5355\u660e\u7ec6\u6570\u636e"),(0,i.kt)("p",null,"\u7528\u6237\u5fc5\u7136\u8981\u5148\u4e0b\u5355\u624d\u6709\u53ef\u80fd\u652f\u4ed8\u6210\u529f\uff0c\u56e0\u6b64\u652f\u4ed8\u6210\u529f\u660e\u7ec6\u6570\u636e\u96c6\u5fc5\u7136\u662f\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u96c6\u7684\u5b50\u96c6\u3002"),(0,i.kt)("p",null,"2\uff09\u7b5b\u9009\u652f\u4ed8\u8868\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u83b7\u53d6\u652f\u4ed8\u7c7b\u578b\u3001\u56de\u8c03\u65f6\u95f4\uff08\u652f\u4ed8\u6210\u529f\u65f6\u95f4\uff09\u3001\u652f\u4ed8\u6210\u529f\u65f6\u95f4\u6233\u3002\n\n\u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u7528\u6237\u652f\u4ed8\u540e\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u652f\u4ed8\u8868\u4f1a\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6\u7684\u56de\u8c03\u65f6\u95f4\u548c\u56de\u8c03\u5185\u5bb9\u4e3a\u7a7a\u3002\u901a\u5e38\u5e95\u5c42\u4f1a\u8c03\u7528\u7b2c\u4e09\u65b9\u652f\u4ed8\u63a5\u53e3\uff0c\u63a5\u53e3\u4f1a\u8fd4\u56de\u56de\u8c03\u4fe1\u606f\uff0c\u5982\u679c\u652f\u4ed8\u6210\u529f\u5219\u56de\u8c03\u4fe1\u606f\u4e0d\u4e3a\u7a7a\uff0c\u6b64\u65f6\u4f1a\u66f4\u65b0\u652f\u4ed8\u8868\uff0c\u8865\u5168\u56de\u8c03\u65f6\u95f4\u548c\u56de\u8c03\u5185\u5bb9\u5b57\u6bb5\u7684\u503c\uff0c\u5e76\u5c06 payment_status \u5b57\u6bb5\u7684\u503c\u4fee\u6539\u4e3a\u652f\u4ed8\u6210\u529f\u5bf9\u5e94\u7684\u72b6\u6001\u7801\uff08\u672c\u9879\u76ee\u4e3a 1602\uff09\u3002\n")),(0,i.kt)("p",null,"  \u652f\u4ed8\u6210\u529f\u4e4b\u540e\uff0c\u652f\u4ed8\u8868\u6570\u636e\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u4e14\u72b6\u6001\u7801\u4e3a 1602 \u5373\u4e3a\u652f\u4ed8\u6210\u529f\u6570\u636e\u3002"),(0,i.kt)("p",null,"\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\uff0c\u652f\u4ed8\u6210\u529f\u5bf9\u5e94\u7684\u4e1a\u52a1\u6570\u636e\u5e93\u53d8\u5316\u65e5\u5fd7\u5e94\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a"),(0,i.kt)("p",null,"\uff081\uff09payment_status \u5b57\u6bb5\u7684\u503c\u4e3a 1602\uff1b"),(0,i.kt)("p",null,"\uff082\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\u3002"),(0,i.kt)("p",null,"\u6ce8\uff1a1602 \u5728\u5b57\u5178\u8868\u4e2d\u5e76\u6ca1\u6709\u5bf9\u5e94\u8bb0\u5f55\uff0c\u4e14 payment_info \u4e2d payment_status \u5b57\u6bb5\u7684\u503c\u5747\u4e3a null\uff0c\u8fd9\u662f\u6a21\u62df\u6570\u636e\u7684\u95ee\u9898\uff0c\u5e76\u4e0d\u5f71\u54cd\u4e1a\u52a1\u903b\u8f91\uff0c\u65e0\u987b\u6df1\u7a76\u3002"),(0,i.kt)("p",null,"\u4e3a\u4e86\u770b\u5230\u6548\u679c\uff0c\u6ce8\u91ca\u5bf9\u6761\u4ef6\uff081\uff09\u7684\u5224\u65ad\u3002"),(0,i.kt)("p",null,"\u6b64\u5916\uff0c\u6a21\u62df\u7684 payment_info \u8868\u6570\u636e\u6ca1\u6709\u4e0a\u8ff0\u63d0\u5230\u7684\u53d8\u5316\uff0c\u53ea\u5728\u652f\u4ed8\u6210\u529f\u65f6\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6\u7684 callback_time \u5b57\u6bb5\u503c\u5df2\u7ecf\u4e0d\u4e3a null\uff0c\u5373\u8be5\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\u5747\u4e3a\u652f\u4ed8\u6210\u529f\u6570\u636e\u3002"),(0,i.kt)("p",null,"\u4e3a\u4e86\u770b\u5230\u6548\u679c\uff0c\u6ce8\u91ca\u5bf9\u6761\u4ef6\uff082\uff09\u7684\u5224\u65ad\u3002"),(0,i.kt)("p",null,"\u672c\u7a0b\u5e8f\u4e3a\u4e86\u53bb\u9664\u91cd\u590d\u6570\u636e\uff0c\u5728\u5173\u8054\u540e\u7684\u5bbd\u8868\u4e2d\u8865\u5145\u4e86\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\uff0cDWS \u5c42\u5c06\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\u3002"),(0,i.kt)("p",null,"\u652f\u4ed8\u6210\u529f\u8868\u662f\u7531\u652f\u4ed8\u6210\u529f\u6570\u636e\u4e0e\u8ba2\u5355\u660e\u7ec6\u505a\u5185\u8fde\u63a5\uff0c\u800c\u540e\u4e0e\u5b57\u5178\u8868\u505a LookUp Join \u5f97\u6765\u3002"),(0,i.kt)("p",null,"\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u56de\u64a4\u6570\u636e\uff0c\u5173\u8054\u540e\u8868\u7684\u91cd\u590d\u6570\u636e\u6765\u6e90\u4e8e\u8ba2\u5355\u660e\u7ec6\u8868\uff0c\u6240\u4ee5\u5e94\u6309\u7167\u8ba2\u5355\u660e\u7ec6\u8868\u7684\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\u53bb\u91cd\uff0c\u6545\u652f\u4ed8\u6210\u529f\u660e\u7ec6\u8868\u7684 row_op_ts \u53d6\u81ea\u8ba2\u5355\u660e\u7ec6\u8868\u3002"),(0,i.kt)("p",null,"3\uff09\u6784\u5efa MySQL-LookUp \u5b57\u5178\u8868"),(0,i.kt)("p",null,"4\uff09\u5173\u8054\u4e0a\u8ff0\u4e09\u5f20\u8868\u5f62\u6210\u652f\u4ed8\u6210\u529f\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u652f\u4ed8\u6210\u529f\u4e3b\u9898"),(0,i.kt)("h3",{id:"\u56fe\u89e3-7"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242855-0d3f0e7c-68d8-4445-ba81-d75ea6da16a1.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-7"},"\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.time.ZoneId;\n\npublic class DwdTradePayDetailSuc {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u57fa\u672c\u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of("GMT+8"));\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u8bfb\u53d6 Kafka dwd_trade_order_detail \u4e3b\u9898\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("" +\n                "create table dwd_trade_order_detail(\\n" +\n                "id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type_code string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_total_amount string,\\n" +\n                "ts string,\\n" +\n                "row_op_ts timestamp_ltz(3)\\n" +\n                ")" + KafkaUtil.getKafkaDDL("dwd_trade_order_detail", "dwd_trade_pay_detail_suc"));\n\n        // TODO 4. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` String,\\n" +\n                "`table` String,\\n" +\n                "`type` String,\\n" +\n                "`data` map<String, String>,\\n" +\n                "`old` map<String, String>,\\n" +\n                "`proc_time` as PROCTIME(),\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_trade_pay_detail_suc"));\n\n        // TODO 5. \u7b5b\u9009\u652f\u4ed8\u6210\u529f\u6570\u636e\n        Table paymentInfo = tableEnv.sqlQuery("select\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'order_id\'] order_id,\\n" +\n                "data[\'payment_type\'] payment_type,\\n" +\n                "data[\'callback_time\'] callback_time,\\n" +\n                "`proc_time`,\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'payment_info\'\\n"\n//                +\n//                "and `type` = \'update\'\\n" +\n//                "and data[\'payment_status\']=\'1602\'"\n        );\n        tableEnv.createTemporaryView("payment_info", paymentInfo);\n\n        // TODO 6. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\n\n        // TODO 7. \u5173\u8054 3 \u5f20\u8868\u83b7\u5f97\u652f\u4ed8\u6210\u529f\u5bbd\u8868\n        Table resultTable = tableEnv.sqlQuery("" +\n                "select\\n" +\n                "od.id order_detail_id,\\n" +\n                "od.order_id,\\n" +\n                "od.user_id,\\n" +\n                "od.sku_id,\\n" +\n                "od.sku_name,\\n" +\n                "od.province_id,\\n" +\n                "od.activity_id,\\n" +\n                "od.activity_rule_id,\\n" +\n                "od.coupon_id,\\n" +\n                "pi.payment_type payment_type_code,\\n" +\n                "dic.dic_name payment_type_name,\\n" +\n                "pi.callback_time,\\n" +\n                "od.source_id,\\n" +\n                "od.source_type_code,\\n" +\n                "od.source_type_name,\\n" +\n                "od.sku_num,\\n" +\n                "od.split_original_amount,\\n" +\n                "od.split_activity_amount,\\n" +\n                "od.split_coupon_amount,\\n" +\n                "od.split_total_amount split_payment_amount,\\n" +\n                "pi.ts,\\n" +\n                "od.row_op_ts row_op_ts\\n" +\n                "from payment_info pi\\n" +\n                "join dwd_trade_order_detail od\\n" +\n                "on pi.order_id = od.order_id\\n" +\n                "left join `base_dic` for system_time as of pi.proc_time as dic\\n" +\n                "on pi.payment_type = dic.dic_code");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 8. \u521b\u5efa Kafka dwd_trade_pay_detail \u8868\n        tableEnv.executeSql("create table dwd_trade_pay_detail_suc(\\n" +\n                "order_detail_id string,\\n" +\n                "order_id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "sku_name string,\\n" +\n                "province_id string,\\n" +\n                "activity_id string,\\n" +\n                "activity_rule_id string,\\n" +\n                "coupon_id string,\\n" +\n                "payment_type_code string,\\n" +\n                "payment_type_name string,\\n" +\n                "callback_time string,\\n" +\n                "source_id string,\\n" +\n                "source_type_code string,\\n" +\n                "source_type_name string,\\n" +\n                "sku_num string,\\n" +\n                "split_original_amount string,\\n" +\n                "split_activity_amount string,\\n" +\n                "split_coupon_amount string,\\n" +\n                "split_payment_amount string,\\n" +\n                "ts string,\\n" +\n                "row_op_ts timestamp_ltz(3),\\n" +\n                "primary key(order_detail_id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_pay_detail_suc"));\n\n        // TODO 9. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_trade_pay_detail_suc select * from result_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u9000\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4ea4\u6613\u57df\u9000\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-9"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u7b5b\u9009\u9000\u5355\u8868\u6570\u636e\uff0c\u7b5b\u9009\u6ee1\u8db3\u6761\u4ef6\u7684\u8ba2\u5355\u8868\u6570\u636e\uff0c\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\uff0c\u5173\u8054\u4e09\u5f20\u8868\u83b7\u5f97\u9000\u5355\u660e\u7ec6\u5bbd\u8868\u3002"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-7"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u7b5b\u9009\u9000\u5355\u8868\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u9000\u5355\u4e1a\u52a1\u8fc7\u7a0b\u6700\u7ec6\u7c92\u5ea6\u7684\u64cd\u4f5c\u4e3a\u4e00\u4e2a\u8ba2\u5355\u4e2d\u4e00\u4e2a SKU \u7684\u9000\u5355\u64cd\u4f5c\uff0c\u9000\u5355\u8868\u7c92\u5ea6\u4e0e\u6700\u7ec6\u7c92\u5ea6\u76f8\u540c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e3b\u8868\u3002\n")),(0,i.kt)("p",null,"2\uff09\u7b5b\u9009\u8ba2\u5355\u8868\u6570\u636e\u5e76\u8f6c\u5316\u4e3a\u6d41"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u83b7\u53d6 province_id\u3002\u9000\u5355\u64cd\u4f5c\u53d1\u751f\u65f6\uff0c\u8ba2\u5355\u8868\u7684 order_status \u5b57\u6bb5\u503c\u4f1a\u75311002\uff08\u5df2\u652f\u4ed8\uff09\u66f4\u65b0\u4e3a 1005\uff08\u9000\u6b3e\u4e2d\uff09\u3002\u8ba2\u5355\u8868\u4e2d\u7684\u6570\u636e\u8981\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\n")),(0,i.kt)("p",null,"\uff081\uff09order_status \u4e3a 1005\uff08\u9000\u6b3e\u4e2d\uff09\uff1b"),(0,i.kt)("p",null,"\uff082\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b"),(0,i.kt)("p",null,"\uff083\uff09\u66f4\u65b0\u7684\u5b57\u6bb5\u4e3a order_status\u3002"),(0,i.kt)("p",null,"\u8be5\u5b57\u6bb5\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u53d8\u66f4\u6570\u636e\u4e2d old \u5b57\u6bb5\u4e0b order_status \u7684\u503c\u4e0d\u4e3a null\uff08\u4e3a 1002\uff09\u3002"),(0,i.kt)("p",null,"3\uff09\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u83b7\u53d6\u9000\u6b3e\u7c7b\u578b\u540d\u79f0\u548c\u9000\u6b3e\u539f\u56e0\u7c7b\u578b\u540d\u79f0\u3002\n")),(0,i.kt)("p",null,"4\uff09\u5173\u8054\u8fd9\u51e0\u5f20\u8868\u83b7\u5f97\u9000\u5355\u660e\u7ec6\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u9000\u5355\u660e\u7ec6\u4e3b\u9898"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u4e3b\u8868\u4e2d\u7684\u6570\u636e\u90fd\u4e0e\u9000\u5355\u4e1a\u52a1\u76f8\u5173\uff0c\u56e0\u6b64\u6240\u6709\u5173\u8054\u5747\u7528\u5de6\u5916\u8054\u5373\u53ef\u3002\u7b2c\u4e8c\u6b65\u662f\u5426\u5bf9\u8ba2\u5355\u8868\u6570\u636e\u7b5b\u9009\u5e76\u4e0d\u5f71\u54cd\u67e5\u8be2\u7ed3\u679c\uff0c\u63d0\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u662f\u4e3a\u4e86\u51cf\u5c11\u6570\u636e\u91cf\uff0c\u51cf\u5c11\u6027\u80fd\u6d88\u8017\u3002\u4e0b\u6587\u540c\u7406\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n")),(0,i.kt)("h3",{id:"\u56fe\u89e3-8"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242887-d9848372-5e23-4e3e-9737-472fa67d50c4.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-8"},"\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class DwdTradeOrderRefund {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6 topic_db \u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`type` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`old` map<string, string>,\\n" +\n                "`proc_time` as PROCTIME(),\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_trade_order_refund"));\n\n        // TODO 4. \u8bfb\u53d6\u9000\u5355\u8868\u6570\u636e\n        Table orderRefundInfo = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'order_id\'] order_id,\\n" +\n                "data[\'sku_id\'] sku_id,\\n" +\n                "data[\'refund_type\'] refund_type,\\n" +\n                "data[\'refund_num\'] refund_num,\\n" +\n                "data[\'refund_amount\'] refund_amount,\\n" +\n                "data[\'refund_reason_type\'] refund_reason_type,\\n" +\n                "data[\'refund_reason_txt\'] refund_reason_txt,\\n" +\n                "data[\'create_time\'] create_time,\\n" +\n                "proc_time,\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'order_refund_info\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("order_refund_info", orderRefundInfo);\n\n        // TODO 5. \u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\uff0c\u7b5b\u9009\u9000\u5355\u6570\u636e\n        Table orderInfoRefund = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'province_id\'] province_id,\\n" +\n                "`old`\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'order_info\'\\n" +\n                "and `type` = \'update\'\\n" +\n                "and data[\'order_status\']=\'1005\'\\n" +\n                "and `old`[\'order_status\'] is not null");\n\n        tableEnv.createTemporaryView("order_info_refund", orderInfoRefund);\n\n        // TODO 6. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\n\n        // TODO 7. \u5173\u8054\u4e09\u5f20\u8868\u83b7\u5f97\u9000\u5355\u5bbd\u8868\n        Table resultTable = tableEnv.sqlQuery("select \\n" +\n                "ri.id,\\n" +\n                "ri.user_id,\\n" +\n                "ri.order_id,\\n" +\n                "ri.sku_id,\\n" +\n                "oi.province_id,\\n" +\n                "date_format(ri.create_time,\'yyyy-MM-dd\') date_id,\\n" +\n                "ri.create_time,\\n" +\n                "ri.refund_type,\\n" +\n                "type_dic.dic_name,\\n" +\n                "ri.refund_reason_type,\\n" +\n                "reason_dic.dic_name,\\n" +\n                "ri.refund_reason_txt,\\n" +\n                "ri.refund_num,\\n" +\n                "ri.refund_amount,\\n" +\n                "ri.ts,\\n" +\n                "current_row_timestamp() row_op_ts\\n" +\n                "from order_refund_info ri\\n" +\n                "left join \\n" +\n                "order_info_refund oi\\n" +\n                "on ri.order_id = oi.id\\n" +\n                "left join \\n" +\n                "base_dic for system_time as of ri.proc_time as type_dic\\n" +\n                "on ri.refund_type = type_dic.dic_code\\n" +\n                "left join\\n" +\n                "base_dic for system_time as of ri.proc_time as reason_dic\\n" +\n                "on ri.refund_reason_type=reason_dic.dic_code");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 8. \u5efa\u7acb Upsert-Kafka dwd_trade_order_refund \u8868\n        tableEnv.executeSql("create table dwd_trade_order_refund(\\n" +\n                "id string,\\n" +\n                "user_id string,\\n" +\n                "order_id string,\\n" +\n                "sku_id string,\\n" +\n                "province_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "refund_type_code string,\\n" +\n                "refund_type_name string,\\n" +\n                "refund_reason_type_code string,\\n" +\n                "refund_reason_type_name string,\\n" +\n                "refund_reason_txt string,\\n" +\n                "refund_num string,\\n" +\n                "refund_amount string,\\n" +\n                "ts string,\\n" +\n                "row_op_ts timestamp_ltz(3),\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_order_refund"));\n\n        // TODO 9. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_trade_order_refund select * from result_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4ea4\u6613\u57df\u9000\u6b3e\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4ea4\u6613\u57df\u9000\u6b3e\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-10"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"1\uff09\u4ece\u9000\u6b3e\u8868\u4e2d\u63d0\u53d6\u9000\u6b3e\u6210\u529f\u6570\u636e\uff0c\u5e76\u5c06\u5b57\u5178\u8868\u7684 dic_name \u7ef4\u5ea6\u9000\u5316\u5230\u8868\u4e2d"),(0,i.kt)("p",null,"2\uff09\u4ece\u8ba2\u5355\u8868\u4e2d\u63d0\u53d6\u9000\u6b3e\u6210\u529f\u8ba2\u5355\u6570\u636e"),(0,i.kt)("p",null,"3\uff09\u4ece\u9000\u5355\u8868\u4e2d\u63d0\u53d6\u9000\u6b3e\u6210\u529f\u7684\u660e\u7ec6\u6570\u636e"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-8"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u83b7\u53d6\u652f\u4ed8\u7c7b\u578b\u540d\u79f0\u3002\n")),(0,i.kt)("p",null,"2\uff09\u8bfb\u53d6\u9000\u6b3e\u8868\u6570\u636e\uff0c\u7b5b\u9009\u9000\u6b3e\u6210\u529f\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u9000\u6b3e\u8868 refund_payment \u7684\u7c92\u5ea6\u4e3a\u4e00\u4e2a\u8ba2\u5355\u4e2d\u4e00\u4e2a SKU \u7684\u9000\u6b3e\u8bb0\u5f55\uff0c\u4e0e\u9000\u6b3e\u4e1a\u52a1\u8fc7\u7a0b\u7684\u6700\u7ec6\u7c92\u5ea6\u76f8\u540c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e3b\u8868\u3002\n\n\u9000\u6b3e\u64cd\u4f5c\u53d1\u751f\u65f6\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u9000\u6b3e\u8868\u4f1a\u5148\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6 refund_status \u72b6\u6001\u7801\u5e94\u4e3a 0701\uff08\u5546\u5bb6\u5ba1\u6838\u4e2d\uff09\uff0ccallback_time \u4e3a null\uff0c\u800c\u540e\u7ecf\u5386\u4e00\u7cfb\u5217\u4e1a\u52a1\u8fc7\u7a0b\uff1a\u5546\u5bb6\u5ba1\u6838\u3001\u4e70\u5bb6\u53d1\u8d27\u3001\u9000\u5355\u5b8c\u6210\u3002\n")),(0,i.kt)("p",null,"  \u9000\u5355\u5b8c\u6210\u65f6\u4f1a\u5c06\u72b6\u6001\u7801\u7531 0701 \u66f4\u65b0\u4e3a 0705\uff08\u9000\u5355\u5b8c\u6210\uff09\uff0c\u540c\u65f6\u5c06 callback_time \u66f4\u65b0\u4e3a\u9000\u6b3e\u652f\u4ed8\u6210\u529f\u7684\u56de\u8c03\u65f6\u95f4\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\uff0c\u9000\u6b3e\u6210\u529f\u8bb0\u5f55\u5e94\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\n")),(0,i.kt)("p",null,"  \uff081\uff09\u6570\u636e\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b"),(0,i.kt)("p",null,"  \uff082\uff09refund_status \u4e3a 0705\uff1b"),(0,i.kt)("p",null,"  \uff083\uff09\u4fee\u6539\u7684\u5b57\u6bb5\u5305\u542b refund_status\u3002"),(0,i.kt)("p",null,"\u6ce8\uff1a\u672c\u9879\u76ee\u751f\u6210\u6a21\u62df\u6570\u636e\u7684\u5b57\u5178\u8868\u4e2d\u5e76\u6ca1\u6709\u4e0e\u9000\u5355\u72b6\u6001\u76f8\u5173\u7684\u72b6\u6001\u7801\u8bb0\u5f55\uff0c\u4e14\u9000\u6b3e\u8868\u7684\u6570\u636e\u5e76\u6ca1\u6709\u4e0a\u8ff0\u5206\u6790\u63d0\u5230\u7684\u5b8c\u6574\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u591a\u4e1a\u52a1\u8fc7\u7a0b\u7684\u53d8\u5316\uff0c\u4ec5\u5728\u9000\u6b3e\u64cd\u4f5c\u5b8c\u6210\u65f6\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6\u7684 refund_status \u4e3a 0702\uff0ccallback_time \u4e0d\u4e3a null\uff0c\u56e0\u6b64\u8981\u60f3\u89c2\u6d4b\u5230\u67e5\u8be2\u6548\u679c\uff0c\u67e5\u8be2\u6761\u4ef6\u5e94\u505a\u4fee\u6539\uff1a"),(0,i.kt)("p",null,"\uff081\uff09\u6ce8\u91ca\u5bf9\u64cd\u4f5c\u7c7b\u578b\u7684\u5224\u65ad\uff1b"),(0,i.kt)("p",null,"\uff082\uff09where \u5b50\u53e5\u4e2d refund_status \u7684\u503c\u5e94\u4e3a 0702\uff1b"),(0,i.kt)("p",null,"\uff083\uff09\u8be5\u6761\u4ef6\u7684\u6821\u9a8c\u662f\u901a\u8fc7\u5224\u65ad old","['refund_status']"," \u7684\u503c\u662f\u5426\u4e3a null \u6765\u5b9e\u73b0\u7684\uff0c\u6a21\u62df\u6570\u636e\u6ca1\u6709\u4fee\u6539\uff0cold","['refund_status']"," \u5fc5\u4e3a null\uff0c\u9700\u8981\u6ce8\u91ca\u8be5\u6761\u4ef6\u3002"),(0,i.kt)("p",null,"\u6a21\u62df\u6570\u636e\u751f\u6210\u7684\u95ee\u9898\u5e76\u4e0d\u5f71\u54cd\u6211\u4eec\u5bf9\u4e1a\u52a1\u903b\u8f91\u7684\u5206\u6790\uff0c\u65e0\u987b\u5728\u610f\u3002"),(0,i.kt)("p",null,"3\uff09\u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\uff0c\u8fc7\u6ee4\u9000\u6b3e\u6210\u529f\u8ba2\u5355\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7528\u4e8e\u83b7\u53d6 user_id \u548c province_id\u3002\u9000\u6b3e\u64cd\u4f5c\u5b8c\u540e\u65f6\uff0c\u8ba2\u5355\u8868\u7684 order_status \u5b57\u6bb5\u4f1a\u66f4\u65b0\u4e3a 1006\uff08\u9000\u6b3e\u5b8c\u6210\uff09\uff0c\u56e0\u6b64\u9000\u5355\u6210\u529f\u5bf9\u5e94\u7684\u8ba2\u5355\u6570\u636e\u5e94\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\n")),(0,i.kt)("p",null,"\uff081\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b"),(0,i.kt)("p",null,"\uff082\uff09order_status \u4e3a 1006\uff1b\uff083\uff09\u4fee\u6539\u4e86 order_status \u5b57\u6bb5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"order_status \u503c\u66f4\u6539\u4e3a 1006 \u4e4b\u540e\u5bf9\u5e94\u7684\u8ba2\u5355\u8868\u6570\u636e\u5c31\u4e0d\u4f1a\u518d\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u53ea\u8981\u6ee1\u8db3\u524d\u4e24\u4e2a\u6761\u4ef6\uff0c\u7b2c\u4e09\u4e2a\u6761\u4ef6\u5fc5\u5b9a\u6ee1\u8db3\u3002\n")),(0,i.kt)("p",null,"  \u672c\u9879\u76ee order_info \u8868\u5e76\u6ca1\u6709\u9000\u6b3e\u6210\u529f\u65f6\u5e94\u6709\u7684\u53d8\u5316\uff0c\u6ca1\u6709 order_status \u53d6\u503c\u4e3a 1006 \u7684\u8bb0\u5f55\u3002"),(0,i.kt)("p",null,"  \u4e3a\u4e86\u770b\u5230\u6548\u679c\u6ce8\u91ca\u6389\u6240\u6709\u8fc7\u6ee4\u6761\u4ef6\u3002order_info \u8868\u7684\u5173\u8054\u662f\u4e3a\u4e86\u83b7\u53d6 user_id \u548c province_id\uff0c\u6ca1\u6709\u8fc7\u6ee4\u6761\u4ef6\u4f1a\u628a order_info \u8868\u7684\u6240\u6709\u53d8\u66f4\u64cd\u4f5c\u4fdd\u7559\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u91cd\u590d\uff0c\u4f46\u4e0b\u6e38\u4f1a\u8fdb\u884c\u53bb\u91cd\uff0c\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002"),(0,i.kt)("p",null,"4\uff09\u7b5b\u9009\u9000\u6b3e\u6210\u529f\u7684\u9000\u5355\u660e\u7ec6\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7528\u4e8e\u83b7\u53d6\u9000\u5355\u4ef6\u6570 refund_num\u3002\u9000\u5355\u6210\u529f\u65f6 order_refund_info \u8868\u4e2d\u7684 refund_status \u5b57\u6bb5\u4f1a\u4fee\u6539\u4e3a0705\uff08\u9000\u6b3e\u6210\u529f\u72b6\u6001\u7801\uff09\u3002\n")),(0,i.kt)("p",null,"  \u56e0\u6b64\u7b5b\u9009\u6761\u4ef6\u6709\u4e09\uff1a"),(0,i.kt)("p",null,"  \uff081\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b"),(0,i.kt)("p",null,"  \uff082\uff09refund_status \u4e3a 0705\uff1b"),(0,i.kt)("p",null,"  \uff083\uff09\u4fee\u6539\u4e86 refund_status \u5b57\u6bb5\u3002\u7b5b\u9009\u65b9\u5f0f\u540c\u4e0a\u3002"),(0,i.kt)("p",null,"\u6ce8\uff1a\u672c\u9879\u76ee\u6a21\u62df\u6570\u636e\u7684\u5b57\u5178\u8868\u5e76\u672a\u7ef4\u62a4\u9000\u5355\u76f8\u5173\u7684\u72b6\u6001\u7801\uff08\u6682\u672a\u53d1\u5e03\u7684\u6570\u636e\u751f\u6210\u6587\u4ef6\u8865\u5145\u4e86\u76f8\u5173\u72b6\u6001\u7801\uff0c\u9000\u6b3e\u6210\u529f\u72b6\u6001\u7801\u4e3a 0705\uff09\u3002"),(0,i.kt)("p",null,"\u5f53\u524d\u4e1a\u52a1\u6570\u636e\u5e93\u4e2d order_refund_info \u8868\u6240\u6709\u8bb0\u5f55\u7684 refund_status \u5b57\u6bb5\u503c\u5747\u4e3a null\u3002"),(0,i.kt)("p",null,"\u6b64\u5916\uff0corder_refund_info \u8868\u53ea\u6709 insert \u64cd\u4f5c\uff0c\u5373\u6a21\u62df\u6570\u636e\u7684\u4e1a\u52a1\u903b\u8f91\u662f\u9000\u5355\u64cd\u4f5c\u548c\u9000\u6b3e\u5b8c\u6210\u540c\u65f6\u53d1\u751f\u3002"),(0,i.kt)("p",null,"\u56e0\u6b64\u8981\u60f3\u770b\u5230\u6548\u679c\uff0c\u9700\u8981\u5bf9\u8fc7\u6ee4\u6761\u4ef6\u505a\u7279\u6b8a\u5904\u7406\uff1a"),(0,i.kt)("p",null,"\uff081\uff09\u6ce8\u91ca\u5bf9 refund_status \u7684\u5224\u65ad\uff1b"),(0,i.kt)("p",null,"\uff082\uff09\u6ce8\u91ca\u5bf9\u64cd\u4f5c\u7c7b\u578b\u7684\u5224\u65ad\uff1b"),(0,i.kt)("p",null,"\uff083\uff09\u6ce8\u91ca\u5bf9\u4fee\u6539\u5b57\u6bb5\u7684\u5224\u65ad\u3002"),(0,i.kt)("p",null,"5\uff09\u5173\u8054\u56db\u5f20\u8868\u5e76\u5199\u51fa\u5230 Kafka \u9000\u6b3e\u6210\u529f\u4e3b\u9898"),(0,i.kt)("p",null,"\u4e3b\u8868\u6570\u636e\u7b5b\u9009\u5b8c\u6210\u540e\u5df2\u7ecf\u83b7\u53d6\u4e86\u5168\u90e8\u3001\u51c6\u786e\u7684\u9000\u6b3e\u6210\u529f\u6570\u636e\uff0c\u4e0e\u53e6\u5916\u4e24\u5f20\u8868\u7684\u5173\u8054\u53ea\u662f\u4e3a\u4e86\u8865\u5145\u5b57\u6bb5\uff0c\u56e0\u6b64\u4f7f\u7528 left join \u5373\u53ef\u3002\u4e4b\u6240\u4ee5\u63d0\u524d\u8fc7\u6ee4\u662f\u4e3a\u4e86\u51cf\u5c0f\u6570\u636e\u91cf\uff0c\u63d0\u5347\u8ba1\u7b97\u6548\u7387\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-9"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242919-007d7af2-34bf-4be2-b9c8-a11f87814317.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-9"},"\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class DwdTradeRefundPaySuc {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6 topic_db \u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`type` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`old` map<string, string>,\\n" +\n                "`proc_time` as PROCTIME(),\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_trade_refund_pay_suc"));\n\n        // TODO 4. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\n\n        // TODO 5. \u8bfb\u53d6\u9000\u6b3e\u8868\u6570\u636e\uff0c\u5e76\u7b5b\u9009\u9000\u6b3e\u6210\u529f\u6570\u636e\n        Table refundPayment = tableEnv.sqlQuery("select\\n" +\n                        "data[\'id\'] id,\\n" +\n                        "data[\'order_id\'] order_id,\\n" +\n                        "data[\'sku_id\'] sku_id,\\n" +\n                        "data[\'payment_type\'] payment_type,\\n" +\n                        "data[\'callback_time\'] callback_time,\\n" +\n                        "data[\'total_amount\'] total_amount,\\n" +\n                        "proc_time,\\n" +\n                        "ts\\n" +\n                        "from topic_db\\n" +\n                        "where `table` = \'refund_payment\'\\n" +\n//                "and `type` = \'update\'\\n" +\n                        "and data[\'refund_status\'] = \'0702\'\\n"\n//                        +\n//                "and `old`[\'refund_status\'] is not null"\n        );\n\n        tableEnv.createTemporaryView("refund_payment", refundPayment);\n\n        // TODO 6. \u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\u5e76\u8fc7\u6ee4\u9000\u6b3e\u6210\u529f\u8ba2\u5355\u6570\u636e\n        Table orderInfo = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'province_id\'] province_id,\\n" +\n                "`old`\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'order_info\'\\n" +\n                "and `type` = \'update\'\\n"\n//                +\n//                "and data[\'order_status\']=\'1006\'\\n" +\n//                "and `old`[\'order_status\'] is not null"\n        );\n\n        tableEnv.createTemporaryView("order_info", orderInfo);\n\n        // TODO 7. \u8bfb\u53d6\u9000\u5355\u8868\u6570\u636e\u5e76\u8fc7\u6ee4\u9000\u6b3e\u6210\u529f\u6570\u636e\n        Table orderRefundInfo = tableEnv.sqlQuery("select\\n" +\n                        "data[\'order_id\'] order_id,\\n" +\n                        "data[\'sku_id\'] sku_id,\\n" +\n                        "data[\'refund_num\'] refund_num,\\n" +\n                        "`old`\\n" +\n                        "from topic_db\\n" +\n                        "where `table` = \'order_refund_info\'\\n"\n//                        +\n//                        "and `type` = \'update\'\\n" +\n//                        "and data[\'refund_status\']=\'0705\'\\n" +\n//                        "and `old`[\'refund_status\'] is not null"\n                // order_refund_info \u8868\u7684 refund_status \u5b57\u6bb5\u503c\u5747\u4e3a null\n        );\n\n        tableEnv.createTemporaryView("order_refund_info", orderRefundInfo);\n\n        // TODO 8. \u5173\u8054\u56db\u5f20\u8868\u83b7\u5f97\u9000\u6b3e\u6210\u529f\u8868\n        Table resultTable = tableEnv.sqlQuery("select\\n" +\n                "rp.id,\\n" +\n                "oi.user_id,\\n" +\n                "rp.order_id,\\n" +\n                "rp.sku_id,\\n" +\n                "oi.province_id,\\n" +\n                "rp.payment_type,\\n" +\n                "dic.dic_name payment_type_name,\\n" +\n                "date_format(rp.callback_time,\'yyyy-MM-dd\') date_id,\\n" +\n                "rp.callback_time,\\n" +\n                "ri.refund_num,\\n" +\n                "rp.total_amount,\\n" +\n                "rp.ts,\\n" +\n                "current_row_timestamp() row_op_ts\\n" +\n                "from refund_payment rp \\n" +\n                "left join \\n" +\n                "order_info oi\\n" +\n                "on rp.order_id = oi.id\\n" +\n                "left join\\n" +\n                "order_refund_info ri\\n" +\n                "on rp.order_id = ri.order_id\\n" +\n                "and rp.sku_id = ri.sku_id\\n" +\n                "left join \\n" +\n                "base_dic for system_time as of rp.proc_time as dic\\n" +\n                "on rp.payment_type = dic.dic_code\\n");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 9. \u521b\u5efa Upsert-Kafka dwd_trade_refund_pay_suc \u8868\n        tableEnv.executeSql("create table dwd_trade_refund_pay_suc(\\n" +\n                "id string,\\n" +\n                "user_id string,\\n" +\n                "order_id string,\\n" +\n                "sku_id string,\\n" +\n                "province_id string,\\n" +\n                "payment_type_code string,\\n" +\n                "payment_type_name string,\\n" +\n                "date_id string,\\n" +\n                "callback_time string,\\n" +\n                "refund_num string,\\n" +\n                "refund_amount string,\\n" +\n                "ts string,\\n" +\n                "row_op_ts timestamp_ltz(3),\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_trade_refund_pay_suc"));\n\n        // TODO 10. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_trade_refund_pay_suc select * from result_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u9886\u53d6\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u9886\u53d6\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-11"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("p",null,"\u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u6570\u636e\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u9886\u7528\u4e3b\u9898"),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-9"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"\u7528\u6237\u9886\u53d6\u4f18\u60e0\u5238\u540e\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u4f18\u60e0\u5238\u9886\u7528\u8868\u4f1a\u65b0\u589e\u4e00\u6761\u6570\u636e\uff0c\u56e0\u6b64\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u4e3a\u4f18\u60e0\u5238\u9886\u53d6\u6570\u636e\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-10"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242954-7fe50475-454e-40a1-a871-d41039e98830.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-10"},"\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class DwdToolCouponGet {\npublic static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table `topic_db`(\\n" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`type` string,\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_tool_coupon_get"));\n\n        // TODO 4. \u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u8868\n        Table resultTable = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'],\\n" +\n                "data[\'coupon_id\'],\\n" +\n                "data[\'user_id\'],\\n" +\n                "date_format(data[\'get_time\'],\'yyyy-MM-dd\') date_id,\\n" +\n                "data[\'get_time\'],\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'coupon_use\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 5. \u5efa\u7acb Upsert-Kafka dwd_tool_coupon_get \u8868\n        tableEnv.executeSql("create table dwd_tool_coupon_get (\\n" +\n                "id string,\\n" +\n                "coupon_id string,\\n" +\n                "user_id string,\\n" +\n                "date_id string,\\n" +\n                "get_time string,\\n" +\n                "ts string,\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_tool_coupon_get"));\n\n        // TODO 6. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_tool_coupon_get select * from result_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\uff08\u4e0b\u5355\uff09\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-12"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u7b5b\u9009\u4f18\u60e0\u5238\u4e0b\u5355\u6570\u636e\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u4e0b\u5355\u4e3b\u9898\u3002\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-10"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"1\uff09\u77e5\u8bc6\u50a8\u5907\n\u7528\u6237\u4f7f\u7528\u4f18\u60e0\u5238\u4e0b\u5355\u65f6\uff0c\u4f18\u60e0\u5238\u9886\u7528\u8868\u7684 using_time \u5b57\u6bb5\u4f1a\u66f4\u65b0\u4e3a\u4e0b\u5355\u65f6\u95f4\uff0c\u56e0\u6b64\u4f18\u60e0\u5238\u4e0b\u5355\u6570\u636e\u5e94\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a"),(0,i.kt)("p",null,"\u2460 \u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b"),(0,i.kt)("p",null,"\u2461 \u4fee\u6539\u4e86 using_time \u5b57\u6bb5\u3002"),(0,i.kt)("p",null,"\u2460 \u6761\u4ef6\u4e00\u7684\u5224\u65ad\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u987b\u5728 SQL \u8bed\u53e5\u4e2d\u8865\u5145 where \u6761\u4ef6\uff1b"),(0,i.kt)("p",null,"\u2461 \u6761\u4ef6\u4e8c\u9700\u8981\u5224\u65ad Maxwell \u5c01\u88c5\u7684 JSON \u5b57\u7b26\u4e32\u4e2d ",(0,i.kt)("inlineCode",{parentName:"p"},"old")," \u5b57\u6bb5\u4e0b\u662f\u5426\u6709 using_time \u5b57\u6bb5\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"old")," \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u662f Map\uff0c\u5b83\u7684 key \u662f\u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\u79f0\uff0cvalue \u662f\u5b57\u6bb5\u65e7\u503c\u3002"),(0,i.kt)("p",null,"\u5728\u79bb\u7ebf\u6570\u4ed3\u4e2d\u6211\u4eec\u5c06 Maxwell \u5c01\u88c5\u7684 JSON \u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a HIVE \u8868\u4e2d\u7684\u7ed3\u6784\u4f53\u5b57\u6bb5\uff0c\u7528 map_keys() \u51fd\u6570\u83b7\u53d6\u4e86\u6240\u6709\u7684 key\uff0c\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e2a array\uff08\u6570\u7ec4\uff09\uff0c\u6570\u7ec4\u4e2d\u4fdd\u5b58\u4e86\u6240\u6709\u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u6700\u540e\u7528 array_contains() \u65b9\u6cd5\u5224\u65ad\u8be5\u6570\u7ec4\u4e2d\u662f\u5426\u5305\u542b order_status \u5b57\u6bb5\u5373\u53ef\u5b8c\u6210\u6761\u4ef6\u4e8c\u7684\u5224\u65ad\u3002"),(0,i.kt)("p",null,"\u800c Flink SQL \u5e76\u6ca1\u6709\u63d0\u4f9b\u7c7b\u4f3c\u7684 API\uff0c\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\u79f0\u3002"),(0,i.kt)("p",null,"\u6240\u4ee5\u9700\u8981\u6362\u4e00\u79cd\u601d\u8def\uff0c\u6b64\u5904\u5c06 Flink SQL \u52a8\u6001\u8868\u8f6c\u5316\u4e3a\u6d41\uff0c\u901a\u8fc7\u6d41\u5904\u7406\u7b5b\u9009\u6ee1\u8db3\u6761\u4ef6\u4e8c\u7684\u6570\u636e\uff0c\u518d\u5c06\u6d41\u8f6c\u6362\u4e3a\u52a8\u6001\u8868\u3002\u6b64\u5904\u6d89\u53ca\u6d41\u548c\u52a8\u6001\u8868\u7684\u8f6c\u5316\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5148\u4e86\u89e3\u76f8\u5173 API\u3002"),(0,i.kt)("p",null,"\uff081\uff09\u73af\u5883\u51c6\u5907"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u4e1a\u52a1\u573a\u666f\uff1aleft\u3001right \u4e24\u5f20\u8868\u505a left join\uff0c\u7136\u540e\u5c06\u83b7\u53d6\u7684 Table \u7c7b\u578b\u53d8\u91cf\uff08\u52a8\u6001\u8868\uff09\u8f6c\u6362\u4e3a\u6d41\uff0c\u518d\u5c06\u6d41\u8f6c\u6362\u4e3a Table \u53d8\u91cf\u3002\n\n\u2460 left\u3001right \u8868\u5982\u4e0b\n")),(0,i.kt)("p",null,"left\u8868"),(0,i.kt)("p",null,"id    tag\nA    left\nB    left\nC    left "),(0,i.kt)("p",null,"right \u8868"),(0,i.kt)("p",null,"id    tag\nA    right\nB    right\nC    right"),(0,i.kt)("p",null,"\u2461 SQL \u5982\u4e0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Table joinTable = tableEnv.sqlQuery(\n                "select \\n" +\n                        "l.id l_id,\\n" +\n                        "l.tag l_tag,\\n" +\n                        "r.tag r_tag\\n" +\n                        "from left l \\n" +\n                        "left join \\n" +\n                        "right r \\n" +\n                        "on l.id = r.id"\n        );\n')),(0,i.kt)("p",null,"\u2462 \u5b9e\u4f53\u7c7b JoinBean \u5982\u4e0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@Data\npublic class JoinBean {\n    String l_id;\n    String tag_left;\n    String tag_right;\n}\n")),(0,i.kt)("p",null,"\uff082\uff09Flink SQL \u7684 Table \u7c7b\u578b\u53d8\u91cf\u8f6c\u5316\u4e3a DataStream \u6709\u56db\u7c7b API"),(0,i.kt)("p",null,"\u2460 toAppendStream"),(0,i.kt)("p",null,"\u2461 toDataStream"),(0,i.kt)("p",null,"\u2462 toChangelogStream"),(0,i.kt)("p",null,"\u2463 toRetractStream"),(0,i.kt)("p",null,"\u5176\u4e2d\uff0cTable \u53d8\u91cf\u4e2d\u5305\u542b\u66f4\u65b0\u548c\u5220\u9664\u6570\u636e\u65f6\u8c03\u7528 \u2460 \u548c \u2461 \u8f6c\u5316\u4e3a\u6d41\u4f1a\u62a5\u9519\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b"),(0,i.kt)("p",null,"// toAppendStream \u62a5\u9519\u4fe1\u606f"),(0,i.kt)("p",null,"toAppendStream doesn't support consuming update and delete changes which is produced by node Join(joinType=","[LeftOuterJoin]",", where=","[(id = id0)]",", select=","[id, tag, id0, tag0]",", leftInputSpec=","[NoUniqueKey]",", rightInputSpec=","[NoUniqueKey]",")"),(0,i.kt)("p",null,"// toDataStream \u62a5\u9519\u4fe1\u606f"),(0,i.kt)("p",null,"Table sink 'default_catalog.default_database.Unregistered_DataStream_Sink_2' doesn't support consuming update and delete changes which is produced by node Join(joinType=","[LeftOuterJoin]",", where=","[(id = id0)]",", select=","[id, tag, id0, tag0]",", leftInputSpec=","[NoUniqueKey]",", rightInputSpec=","[NoUniqueKey]",")"),(0,i.kt)("p",null,"\u8c03\u7528 \u2462 \u548c \u2463 \u53ef\u4ee5\u5c06\u5305\u542b\u66f4\u65b0\u548c\u5220\u9664\u6570\u636e\u7684\u8868\u8f6c\u5316\u4e3a\u6d41\u3002\u9700\u8981\u6307\u5b9a\u8868\u7ed3\u6784\u65f6\u7528\u6cd5\u5982\u4e0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'DataStream<Row> changelogStream = tableEnv.toChangelogStream(joinTable, Schema.newBuilder()\n    .column("l_id", "STRING")\n    .column("tag_left", "STRING")\n    .column("tag_right", "STRING")\n.build());\n\nDataStream<Tuple2<Boolean, JoinBean>> retractS = tableEnv.toRetractStream(joinTable, JoinBean.class); \n\nchangelogStream.print("changelogStream>>>");\n\nretractS.print("retractS");\n')),(0,i.kt)("p",null,"\u6d41\u6253\u5370\u7ed3\u679c\u5982\u4e0b"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"changelogStream>>>> +I[A, left, null]\nchangelogStream>>>> -D[A, left, null]\nchangelogStream>>>> +I[A, left, right]\nchangelogStream>>>> +I[B, left, null]\nchangelogStream>>>> -D[B, left, null]\nchangelogStream>>>> +I[B, left, right]\nchangelogStream>>>> +I[C, left, null]\nchangelogStream>>>> -D[C, left, null]\nchangelogStream>>>> +I[C, left, right]\n\nretractS> (true,JoinBean(l_id=A, tag_left=left, tag_right=null))\nretractS> (false,JoinBean(l_id=A, tag_left=left, tag_right=null))\nretractS> (true,JoinBean(l_id=A, tag_left=left, tag_right=right))\nretractS> (true,JoinBean(l_id=B, tag_left=left, tag_right=null))\nretractS> (false,JoinBean(l_id=B, tag_left=left, tag_right=null))\nretractS> (true,JoinBean(l_id=B, tag_left=left, tag_right=right))\nretractS> (true,JoinBean(l_id=C, tag_left=left, tag_right=null))\nretractS> (false,JoinBean(l_id=C, tag_left=left, tag_right=null))\nretractS> (true,JoinBean(l_id=C, tag_left=left, tag_right=right))\n")),(0,i.kt)("p",null,"\uff083\uff09\u5c06\u6d41\u8f6c\u5316\u4e3a\u52a8\u6001\u8868"),(0,i.kt)("p",null,"\u2460 \u76ee\u524d\u7248\u672c Flink \u53ea\u63d0\u4f9b\u4e86\u4e24\u79cd API "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"fromChangelogStream"),(0,i.kt)("li",{parentName:"ul"},"fromDataStream")),(0,i.kt)("p",null,"\u2461 \u5e94\u7528\u573a\u666f"),(0,i.kt)("p",null,"a\uff09fromDataStream \u4e0d\u53ef\u7528\u4e8e\u5305\u542b\u5220\u9664\u548c\u66f4\u65b0\u6570\u636e\u7684\u6d41\u5411 Table \u7684\u8f6c\u5316\uff0c\u5426\u5219\u62a5\u9519\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b"),(0,i.kt)("p",null,"Error during input conversion. Conversion expects insert-only records but DataStream API record contains: DELETE"),(0,i.kt)("p",null,"b\uff09fromChangelogStream \u53ef\u7528\u4e8e\u5305\u542b\u5220\u9664\u548c\u66f4\u65b0\u6570\u636e\u6d41\u5411 Table \u7684\u8f6c\u5316"),(0,i.kt)("p",null,"\u2462 \u7528\u6cd5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'Table changelogTable = tableEnv.fromChangelogStream(\nchangelogStream,\nSchema.newBuilder()\n    .column("l_id", "STRING")\n    .column("tag_left", "STRING")\n    .column("tag_right", "STRING")\n    .build()\n);\n')),(0,i.kt)("p",null,"\uff084\uff09\u672c\u9879\u76ee DWD \u5c42\u6d89\u53ca\u5230\u7684\u6d41\u548c\u8868\u8f6c\u5316"),(0,i.kt)("p",null,"INSERT \u64cd\u4f5c\u7684\u6d41\u548c\u8868\u6ca1\u6709\u56de\u64a4\u6570\u636e\uff0c\u4e0d\u9700\u8981\u8003\u8651\u53bb\u91cd\u95ee\u9898\u3002"),(0,i.kt)("p",null,"\u2460 \u4ece Kafka \u8bfb\u53d6\u7684 ODS \u5c42\u6570\u636e\u64cd\u4f5c\u7c7b\u578b\u5747\u4e3a INSERT\uff1b"),(0,i.kt)("p",null,"\u2461 \u53ea\u542b INSERT \u64cd\u4f5c\u7684\u6570\u636e\u548c Lookup \u8868\u5173\u8054\u540e\u7684\u6570\u636e\u540c\u6837\u53ea\u6709 INSERT \u64cd\u4f5c"),(0,i.kt)("p",null,"\u6240\u4ee5\uff0c\u672c\u9879\u76ee\u4e2d\u6d41\u548c\u8868\u7684\u8f6c\u5316\u4e0d\u7528\u8003\u8651\u53bb\u91cd\uff0c\u65e0\u987b\u989d\u5916\u5904\u7406\u3002"),(0,i.kt)("p",null,"2\uff09\u6267\u884c\u6b65\u9aa4\n\uff081\uff09\u7b5b\u9009\u4f18\u60e0\u5238\u9886\u7528\u6570\u636e\u5c01\u88c5\u4e3a\u8868\u3002"),(0,i.kt)("p",null,"\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u7684\u6570\u636e\u3002"),(0,i.kt)("p",null,"\uff082\uff09\u5728\u6d41\u4e2d\u7b5b\u9009\u4f18\u60e0\u5238\u9886\u53d6\u6570\u636e\u3002"),(0,i.kt)("p",null,"\u5224\u65ad\u662f\u5426\u4fee\u6539\u4e86 using_time \u5b57\u6bb5\u3002"),(0,i.kt)("p",null,"\uff083\uff09\u5c01\u88c5\u4e3a\u8868\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u4f7f\u7528\uff08\u4e0b\u5355\uff09\u4e8b\u5b9e\u4e3b\u9898\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-11"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242981-19c9ef18-45a2-4d94-8d1f-ac529014bb35.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-11"},"\u4ee3\u7801"),(0,i.kt)("p",null,"1\uff09\u521b\u5efa\u5b9e\u4f53\u7c7b CouponUseOrderBean"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"package com.atguigu.gmall.realtime.bean;\n\nimport lombok.Data;\n\n@Data\npublic class CouponUseOrderBean {\n    // \u4f18\u60e0\u5238\u9886\u7528\u8bb0\u5f55 id\n    String id;\n\n    // \u4f18\u60e0\u5238 id\n    String coupon_id;\n\n    // \u7528\u6237 id\n    String user_id;\n\n    // \u8ba2\u5355 id\n    String order_id;\n\n    // \u4f18\u60e0\u5238\u4f7f\u7528\u65e5\u671f\uff08\u4e0b\u5355\uff09\n    String date_id;\n\n    // \u4f18\u60e0\u5238\u4f7f\u7528\u65f6\u95f4\uff08\u4e0b\u5355\uff09\n    String using_time;\n\n    // \u5386\u53f2\u6570\u636e\n    String old;\n\n    // \u65f6\u95f4\u6233\n    String ts;\n}\n")),(0,i.kt)("p",null,"2\uff09\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.alibaba.fastjson.JSON;\nimport com.atguigu.gmall.realtime.bean.CouponUseOrderBean;\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\n\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.util.Map;\nimport java.util.Set;\n\npublic class DwdToolCouponOrder {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table `topic_db` (\\n" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`type` string,\\n" +\n                "`old` string,\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_tool_coupon_order"));\n\n        // TODO 4. \u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u6d41\n        Table couponUseOrder = tableEnv.sqlQuery("""\n                select\n                data[\'id\'] id,\n                data[\'coupon_id\'] coupon_id,\n                data[\'user_id\'] user_id,\n                data[\'order_id\'] order_id,\n                date_format(data[\'using_time\'],\'yyyy-MM-dd\') date_id,\n                data[\'using_time\'] using_time,\n                `old`,\n                ts\n                from topic_db\n                where `table` = \'coupon_use\'\n                and `type` = \'update\'\n                """);\n        DataStream<CouponUseOrderBean> couponUseOrderDS = tableEnv.toAppendStream(couponUseOrder, CouponUseOrderBean.class);\n\n        // TODO 5. \u8fc7\u6ee4\u6ee1\u8db3\u6761\u4ef6\u7684\u4f18\u60e0\u5238\u4e0b\u5355\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u8868\n        SingleOutputStreamOperator<CouponUseOrderBean> filteredDS = couponUseOrderDS.filter(\n                couponUseOrderBean -> {\n                    String old = couponUseOrderBean.getOld();\n                    if (old != null) {\n                        Map oldMap = JSON.parseObject(old, Map.class);\n                        Set changeKeys = oldMap.keySet();\n                        return changeKeys.contains("using_time");\n                    }\n                    return true;\n                }\n        );\n        Table resultTable = tableEnv.fromDataStream(filteredDS);\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 6. \u5efa\u7acb Upsert-Kafka dwd_tool_coupon_order \u8868\n        tableEnv.executeSql("create table dwd_tool_coupon_order(\\n" +\n                "id string,\\n" +\n                "coupon_id string,\\n" +\n                "user_id string,\\n" +\n                "order_id string,\\n" +\n                "date_id string,\\n" +\n                "order_time string,\\n" +\n                "ts string,\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_tool_coupon_order"));\n\n        // TODO 7. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("""\n                insert into dwd_tool_coupon_order select id,\n                coupon_id,\n                user_id,\n                order_id,\n                date_id,\n                using_time order_time,\n                ts from result_table""");\n        env.execute();\n    }\n}\n')),(0,i.kt)("h2",{id:"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\u652f\u4ed8\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528(\u652f\u4ed8)\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-13"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u7b5b\u9009\u4f18\u60e0\u5238\u652f\u4ed8\u6570\u636e\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u652f\u4ed8\u4e3b\u9898\u3002\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-11"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7528\u6237\u4f7f\u7528\u4f18\u60e0\u5238\u652f\u4ed8\u65f6\uff0c\u4f18\u60e0\u5238\u9886\u7528\u8868\u7684 used_time \u5b57\u6bb5\u4f1a\u66f4\u65b0\u4e3a\u652f\u4ed8\u65f6\u95f4\uff0c\u56e0\u6b64\u4f18\u60e0\u5238\u652f\u4ed8\u6570\u636e\u5e94\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\n")),(0,i.kt)("p",null,"  \uff081\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b"),(0,i.kt)("p",null,"  \uff082\uff09\u4fee\u6539\u4e86 used_time \u5b57\u6bb5\u3002\u4f7f\u7528\u4f18\u60e0\u5238\u652f\u4ed8\u540e\uff0c\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\u5c31\u4e0d\u4f1a\u518d\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u5728\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u7684\u524d\u63d0\u4e0b\uff0c\u53ea\u8981 used_time \u4e0d\u4e3a null\uff0c\u5c31\u53ef\u4ee5\u65ad\u5b9a\u672c\u6b21\u64cd\u4f5c\u4fee\u6539\u7684\u662f used_time \u5b57\u6bb5\u3002"),(0,i.kt)("h3",{id:"\u56fe\u89e3-12"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167242998-8443ee23-a92f-4581-98a3-5d50a8b83edf.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-12"},"\u4ee3\u7801"),(0,i.kt)("p",null,"\u4e3b\u7a0b\u5e8f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class DwdToolCouponPay {\n    public static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table `topic_db` (\\n" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`type` string,\\n" +\n                "`old` string,\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_tool_coupon_pay"));\n\n        // TODO 4. \u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u7b5b\u9009\u4f18\u60e0\u5238\u4f7f\u7528\uff08\u652f\u4ed8\uff09\u6570\u636e\n        Table couponUsePay = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'coupon_id\'] coupon_id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'order_id\'] order_id,\\n" +\n                "date_format(data[\'used_time\'],\'yyyy-MM-dd\') date_id,\\n" +\n                "data[\'used_time\'] used_time,\\n" +\n                "`old`,\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'coupon_use\'\\n" +\n                "and `type` = \'update\'\\n" +\n                "and data[\'used_time\'] is not null");\n\n        tableEnv.createTemporaryView("coupon_use_pay", couponUsePay);\n\n        // TODO 5. \u5efa\u7acb Upsert-Kafka dwd_tool_coupon_order \u8868\n        tableEnv.executeSql("create table dwd_tool_coupon_pay(\\n" +\n                "id string,\\n" +\n                "coupon_id string,\\n" +\n                "user_id string,\\n" +\n                "order_id string,\\n" +\n                "date_id string,\\n" +\n                "payment_time string,\\n" +\n                "ts string,\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_tool_coupon_pay"));\n\n        // TODO 6. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_tool_coupon_pay select " +\n                "id,\\n" +\n                "coupon_id,\\n" +\n                "user_id,\\n" +\n                "order_id,\\n" +\n                "date_id,\\n" +\n                "used_time payment_time,\\n" +\n                "ts from coupon_use_pay");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4e92\u52a8\u57df\u6536\u85cf\u5546\u54c1\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4e92\u52a8\u57df\u6536\u85cf\u5546\u54c1\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-14"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8bfb\u53d6\u6536\u85cf\u6570\u636e\uff0c\u5199\u5165 Kafka \u6536\u85cf\u4e3b\u9898\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-12"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7528\u6237\u6536\u85cf\u5546\u54c1\u65f6\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u6536\u85cf\u8868\u4f1a\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u56e0\u6b64\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u7684\u6570\u636e\u5373\u53ef\u3002\n")),(0,i.kt)("h3",{id:"\u56fe\u89e3-13"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167243018-facb2ce6-7b89-47d1-841c-74283d7d1c99.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-13"},"\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class DwdInteractionFavorAdd {\npublic static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`type` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_interaction_favor_add"));\n\n        // TODO 4. \u8bfb\u53d6\u6536\u85cf\u8868\u6570\u636e\n        Table favorInfo = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'sku_id\'] sku_id,\\n" +\n                "date_format(data[\'create_time\'],\'yyyy-MM-dd\') date_id,\\n" +\n                "data[\'create_time\'] create_time,\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'favor_info\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("favor_info", favorInfo);\n\n        // TODO 5. \u521b\u5efa Upsert-Kafka dwd_interaction_favor_add \u8868\n        tableEnv.executeSql("create table dwd_interaction_favor_add (\\n" +\n                "id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "ts string,\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_interaction_favor_add"));\n\n        // TODO 6. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_interaction_favor_add select * from favor_info");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u4e92\u52a8\u57df\u8bc4\u4ef7\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u4e92\u52a8\u57df\u8bc4\u4ef7\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-15"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\uff0c\u8bfb\u53d6\u8bc4\u8bba\u8868\u6570\u636e\uff0c\u5173\u8054\u5b57\u5178\u8868\u4ee5\u83b7\u53d6\u8bc4\u4ef7\uff08\u597d\u8bc4\u3001\u4e2d\u8bc4\u3001\u5dee\u8bc4\u3001\u81ea\u52a8\uff09\uff0c\u5c06\u7ed3\u679c\u5199\u5165 Kafka \u8bc4\u4ef7\u4e3b\u9898\u3002\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-13"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7528\u6237\u63d0\u4ea4\u8bc4\u8bba\u65f6\u8bc4\u4ef7\u8868\u4f1a\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u53ef\u3002\n")),(0,i.kt)("h3",{id:"\u56fe\u89e3-14"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167243041-aff42c3e-c8b1-46db-ba56-ffb07c1e56da.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-14"},"\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class DwdInteractionComment {\npublic static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\n                3, Time.days(1), Time.minutes(1)\n        ));\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage(\n                "hdfs://hadoop102:8020/ck"\n        );\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`type` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`proc_time` as PROCTIME(),\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_interaction_comment"));\n\n        // TODO 4. \u8bfb\u53d6\u8bc4\u8bba\u8868\u6570\u636e\n        Table commentInfo = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] id,\\n" +\n                "data[\'user_id\'] user_id,\\n" +\n                "data[\'sku_id\'] sku_id,\\n" +\n                "data[\'order_id\'] order_id,\\n" +\n                "data[\'create_time\'] create_time,\\n" +\n                "data[\'appraise\'] appraise,\\n" +\n                "proc_time,\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'comment_info\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("comment_info", commentInfo);\n\n        // TODO 5. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\n\n        // TODO 6. \u5173\u8054\u4e24\u5f20\u8868\n        Table resultTable = tableEnv.sqlQuery("select\\n" +\n                "ci.id,\\n" +\n                "ci.user_id,\\n" +\n                "ci.sku_id,\\n" +\n                "ci.order_id,\\n" +\n                "date_format(ci.create_time,\'yyyy-MM-dd\') date_id,\\n" +\n                "ci.create_time,\\n" +\n                "ci.appraise,\\n" +\n                "dic.dic_name,\\n" +\n                "ts\\n" +\n                "from comment_info ci\\n" +\n                "left join\\n" +\n                "base_dic for system_time as of ci.proc_time as dic\\n" +\n                "on ci.appraise = dic.dic_code");\n        tableEnv.createTemporaryView("result_table", resultTable);\n\n        // TODO 7. \u5efa\u7acb Upsert-Kafka dwd_interaction_comment \u8868\n        tableEnv.executeSql("create table dwd_interaction_comment(\\n" +\n                "id string,\\n" +\n                "user_id string,\\n" +\n                "sku_id string,\\n" +\n                "order_id string,\\n" +\n                "date_id string,\\n" +\n                "create_time string,\\n" +\n                "appraise_code string,\\n" +\n                "appraise_name string,\\n" +\n                "ts string,\\n" +\n                "primary key(id) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_interaction_comment"));\n\n        // TODO 8. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("" +\n                "insert into dwd_interaction_comment select * from result_table");\n    }\n}\n')),(0,i.kt)("h2",{id:"\u7528\u6237\u57df\u7528\u6237\u6ce8\u518c\u4e8b\u52a1\u4e8b\u5b9e\u8868"},"\u7528\u6237\u57df\u7528\u6237\u6ce8\u518c\u4e8b\u52a1\u4e8b\u5b9e\u8868"),(0,i.kt)("h3",{id:"\u4e3b\u8981\u4efb\u52a1-16"},"\u4e3b\u8981\u4efb\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u8bfb\u53d6\u7528\u6237\u8868\u6570\u636e\uff0c\u83b7\u53d6\u6ce8\u518c\u65f6\u95f4\uff0c\u5c06\u7528\u6237\u6ce8\u518c\u4fe1\u606f\u5199\u5165 Kafka \u7528\u6237\u6ce8\u518c\u4e3b\u9898\u3002\n")),(0,i.kt)("h3",{id:"\u601d\u8def\u5206\u6790-14"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u7528\u6237\u6ce8\u518c\u65f6\u4f1a\u5728\u7528\u6237\u8868\u4e2d\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u53ef\u3002\n")),(0,i.kt)("h3",{id:"\u56fe\u89e3-15"},"\u56fe\u89e3"),(0,i.kt)("p",null,"   ",(0,i.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/34996528/167243060-268080b2-fc92-4bd5-aa94-c896fa5043bb.png",alt:"img"})),(0,i.kt)("h3",{id:"\u4ee3\u7801-15"},"\u4ee3\u7801"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'package com.atguigu.gmall.realtime.app.dwd.db;\n\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\nimport java.time.ZoneId;\n\npublic class DwdUserRegister {\npublic static void main(String[] args) throws Exception {\n\n        // TODO 1. \u73af\u5883\u51c6\u5907\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setParallelism(4);\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of("GMT+8"));\n\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\n        );\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\n        env.setRestartStrategy(\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\n        );\n        env.setStateBackend(new HashMapStateBackend());\n        env.getCheckpointConfig().setCheckpointStorage("hdfs://hadoop102:8020/ck");\n        System.setProperty("HADOOP_USER_NAME", "atguigu");\n\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\n        tableEnv.executeSql("create table topic_db(" +\n                "`database` string,\\n" +\n                "`table` string,\\n" +\n                "`type` string,\\n" +\n                "`data` map<string, string>,\\n" +\n                "`ts` string\\n" +\n                ")" + KafkaUtil.getKafkaDDL("topic_db", "dwd_trade_order_detail"));\n\n        // TODO 4. \u8bfb\u53d6\u7528\u6237\u8868\u6570\u636e\n        Table userInfo = tableEnv.sqlQuery("select\\n" +\n                "data[\'id\'] user_id,\\n" +\n                "data[\'create_time\'] create_time,\\n" +\n                "ts\\n" +\n                "from topic_db\\n" +\n                "where `table` = \'user_info\'\\n" +\n                "and `type` = \'insert\'\\n");\n        tableEnv.createTemporaryView("user_info", userInfo);\n\n        // TODO 5. \u521b\u5efa Upsert-Kafka dwd_user_register \u8868\n        tableEnv.executeSql("create table `dwd_user_register`(\\n" +\n                "`user_id` string,\\n" +\n                "`date_id` string,\\n" +\n                "`create_time` string,\\n" +\n                "`ts` string,\\n" +\n                "primary key(`user_id`) not enforced\\n" +\n                ")" + KafkaUtil.getUpsertKafkaDDL("dwd_user_register"));\n\n        // TODO 6. \u5c06\u8f93\u5165\u5199\u5165 Upsert-Kafka \u8868\n        tableEnv.executeSql("insert into dwd_user_register\\n" +\n                "select \\n" +\n                "user_id,\\n" +\n                "date_format(create_time, \'yyyy-MM-dd\') date_id,\\n" +\n                "create_time,\\n" +\n                "ts\\n" +\n                "from user_info");\n\n    }\n}\n')))}d.isMDXComponent=!0}}]);