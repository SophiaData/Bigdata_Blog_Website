"use strict";(self.webpackChunkbigdata_blog=self.webpackChunkbigdata_blog||[]).push([[4310],{1793:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"/A Scala-free Flink","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/A Scala-free Flink","source":"@site/i18n/en/docusaurus-plugin-content-blog/A Scala-free Flink.md","title":"A Scala-free Flink","description":"A detailed blog post","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"Flink","permalink":"/Bigdata_Blog_Website/en/blog/tags/flink"},{"label":"Calculation framework","permalink":"/Bigdata_Blog_Website/en/blog/tags/calculation-framework"}],"readingTime":6.14,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["Flink","Calculation framework"]},"nextItem":{"title":"Doris Integrate other systems","permalink":"/Bigdata_Blog_Website/en/blog/Doris \u96c6\u6210\u5176\u4ed6\u7cfb\u7edf"}},"content":"A detailed [blog post](https://flink.apache.org/2022/02/22/scala-free.html)\\n\\nalready explains the ins and outs of why Scala users can now use the Flink Java API with any Scala version (including Scala 3).\\n\\nIn the end, removing Scala is just part of a larger effort of cleaning up and updating various technologies from the Flink ecosystem.\\n\x3c!--truncate--\x3e\\n## \u535a\u6587\u7ffb\u8bd1\\n\\n### \u7c7b\u8def\u5f84\u548c Scala\\n\\n\u5982\u679c\u60a8\u4f7f\u7528\u8fc7\u57fa\u4e8e JVM \u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u672f\u8bed\u7c7b\u8def\u5f84\u3002\\n\\n\u7c7b\u8def\u5f84\u5b9a\u4e49\u4e86\u5f53\u9700\u8981\u52a0\u8f7d\u7ed9\u5b9a\u7c7b\u6587\u4ef6\u65f6 JVM \u5c06\u5728\u54ea\u91cc\u641c\u7d22\u5b83\u3002\\n\\n\u6bcf\u4e2a\u7c7b\u8def\u5f84\u4e0a\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u7c7b\u6587\u4ef6\u7684\u5b9e\u4f8b\uff0c\u8fd9\u8feb\u4f7f Flink \u5c06\u4efb\u4f55\u4f9d\u8d56\u9879\u66b4\u9732\u7ed9\u7528\u6237\u3002\\n\\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Flink \u793e\u533a\u52aa\u529b\u4fdd\u6301\u6211\u4eec\u7684\u7c7b\u8def\u5f84\u201c\u5e72\u51c0\u201d\u2014\u2014\u6216\u8005\u6ca1\u6709\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\u3002\\n\\n\u6211\u4eec\u901a\u8fc7\u7ec4\u5408\u9634\u5f71\u4f9d\u8d56\u3001\u5b50\u7c7b\u52a0\u8f7d\u548c\u53ef\u9009\u7ec4\u4ef6\u7684\u63d2\u4ef6\u62bd\u8c61\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\\n\\nApache Flink \u8fd0\u884c\u65f6\u4e3b\u8981\u662f\u7528 Java \u7f16\u5199\u7684\uff0c\u4f46\u5305\u542b\u5f3a\u5236 Scala \u4f7f\u7528\u9ed8\u8ba4\u7c7b\u8def\u5f84\u7684\u5173\u952e\u7ec4\u4ef6\u3002\\n\\n\u800c\u4e14\u7531\u4e8e Scala \u4e0d\u4fdd\u6301\u8de8\u6b21\u8981\u7248\u672c\u7684\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027\uff0c\u8fd9\u5728\u5386\u53f2\u4e0a\u9700\u8981\u4e3a\u6240\u6709\u7248\u672c\u7684 Scala \u4ea4\u53c9\u6784\u5efa\u7ec4\u4ef6\u3002\\n\\n\u4f46\u662f\u7531\u4e8e\u8bb8\u591a\u539f\u56e0\u2014\u2014\u7f16\u8bd1\u5668\u7684\u91cd\u5927\u53d8\u5316\u3001\u65b0\u7684\u6807\u51c6\u5e93\u548c\u91cd\u65b0\u8bbe\u8ba1\u7684\u5b8f\u7cfb\u7edf\u2014\u2014\u8bf4\u8d77\u6765\u5bb9\u6613\u505a\u8d77\u6765\u96be\u3002\\n\\n### \u9690\u85cf Scala\\n\\n\u5982\u4e0a\u6240\u8ff0\uff0cFlink \u5728\u51e0\u4e2a\u5173\u952e\u7ec4\u4ef6\u4e2d\u4f7f\u7528\u4e86 Scala\uff1bMesos \u96c6\u6210\u3001\u5e8f\u5217\u5316\u5806\u6808\u3001RPC \u548c\u8868\u89c4\u5212\u5668\u3002\u793e\u533a\u6ca1\u6709\u5220\u9664\u8fd9\u4e9b\u4f9d\u8d56\u9879\u6216\u5bfb\u627e\u4ea4\u53c9\u6784\u5efa\u5b83\u4eec\u7684\u65b9\u6cd5\uff0c\u800c\u662f\u9690\u85cf\u4e86 Scala\u3002\\n\\n\u5b83\u4ecd\u7136\u5b58\u5728\u4e8e\u4ee3\u7801\u5e93\u4e2d\uff0c\u4f46\u4e0d\u518d\u6cc4\u6f0f\u5230\u7528\u6237\u4ee3\u7801\u7c7b\u52a0\u8f7d\u5668\u4e2d\u3002\\n\\n\u5728 1.14 \u4e2d\uff0c\u6211\u4eec\u8fc8\u51fa\u4e86\u5411\u7528\u6237\u9690\u85cf Scala \u7684\u7b2c\u4e00\u6b65\u3002\u6211\u4eec\u653e\u5f03\u4e86\u5bf9\u90e8\u5206\u5728 Scala \u4e2d\u5b9e\u73b0\u7684 Apache Mesos \u7684\u652f\u6301\uff0cKubernetes \u5728\u91c7\u7528\u65b9\u9762\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5b83\u3002\\n\\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06 RPC \u7cfb\u7edf\u9694\u79bb\u5230\u4e00\u4e2a\u4e13\u7528\u7684\u7c7b\u52a0\u8f7d\u5668\u4e2d\uff0c\u5305\u62ec Akka\u3002\u901a\u8fc7\u8fd9\u4e9b\u66f4\u6539\uff0c\u8fd0\u884c\u65f6\u672c\u8eab\u4e0d\u518d\u4f9d\u8d56\u4e8e Scala\uff08\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 flink-runtime \u5931\u53bb\u4e86\u5b83\u7684 Scala \u540e\u7f00\uff09\uff0c\u4f46 Scala \u4ecd\u7136\u5b58\u5728\u4e8e API \u5c42\u4e2d\u3002\\n\\n\u8fd9\u4e9b\u53d8\u5316\uff0c\u4ee5\u53ca\u6211\u4eec\u5b9e\u65bd\u5b83\u4eec\u7684\u5bb9\u6613\u7a0b\u5ea6\uff0c\u5f00\u59cb\u8ba9\u4eba\u4eec\u60f3\u77e5\u9053\u8fd8\u6709\u4ec0\u4e48\u53ef\u80fd\u3002\\n\\n\u6bd5\u7adf\uff0c\u6211\u4eec\u5728\u4e0d\u5230\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u5185\u5c31\u9694\u79bb\u4e86 Akka\uff0c\u8fd9\u4e2a\u4efb\u52a1\u79ef\u538b\u4e86\u591a\u5e74\uff0c\u88ab\u8ba4\u4e3a\u592a\u8017\u65f6\u4e86\u3002\\n\\n\u4e0b\u4e00\u4e2a\u5408\u4e4e\u903b\u8f91\u7684\u6b65\u9aa4\u662f\u5c06 DataStream / DataSet Java API \u4e0e Scala \u5206\u79bb\u3002\\n\\n\u8fd9\u4e3b\u8981\u9700\u8981\u5bf9\u4e00\u4e9b\u6d4b\u8bd5 \u7c7b\u8fdb\u884c\u5c11\u91cf\u6e05\u7406\uff0c\u8fd8\u9700\u8981\u8bc6\u522b\u4ec5\u4e0e Scala API \u76f8\u5173\u7684\u4ee3\u7801\u8def\u5f84\u3002\u7136\u540e\u5c06\u8fd9\u4e9b\u8def\u5f84\u8fc1\u79fb\u5230 Scala API \u6a21\u5757\u4e2d\uff0c\u5e76\u4e14\u4ec5\u5728\u9700\u8981\u65f6\u4f7f\u7528\u3002\\n\\n\u4f8b\u5982\uff0c\u6211\u4eec\u4e00\u76f4\u6269\u5c55\u4ee5\u652f\u6301\u67d0\u4e9b Scala \u7c7b\u578b\u7684Kryo \u5e8f\u5217\u5316\u7a0b\u5e8f\u73b0\u5728\u4ec5\u5728\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 Scala API \u65f6\u624d\u5305\u542b\u5b83\u4eec\u3002\\n\\n\u6700\u540e\uff0c\u662f\u65f6\u5019\u5904\u7406 Table API\uff0c\u7279\u522b\u662f table planner\uff0c\u5728\u64b0\u5199\u672c\u6587\u65f6\u5b83\u5305\u542b 378,655 \u884c Scala \u4ee3\u7801\u3002\\n\\n\u8868\u89c4\u5212\u5668\u5c06 SQL \u548c\u8868 API \u67e5\u8be2\u89e3\u6790\u3001\u89c4\u5212\u548c\u4f18\u5316\u4e3a\u9ad8\u5ea6\u4f18\u5316\u7684 Java \u4ee3\u7801\u3002\u5b83\u662f Flink \u4e2d\u6700\u5e7f\u6cdb\u7684 Scala \u4ee3\u7801\u5e93\uff0c\u4e0d\u80fd\u8f7b\u6613\u79fb\u690d\u5230 Java\u3002\\n\\n\u4f7f\u7528\u6211\u4eec\u4ece\u4e3a RPC \u5806\u6808\u6784\u5efa\u4e13\u7528\u7c7b\u52a0\u8f7d\u5668\u548c\u4e3a\u5e8f\u5217\u5316\u5668\u7684\u6761\u4ef6\u7c7b\u52a0\u8f7d\u4e2d\u5b66\u5230\u7684\u77e5\u8bc6\uff0c\u6211\u4eec\u5c06\u89c4\u5212\u5668\u9690\u85cf\u5728\u4e00\u4e2a\u4e0d\u66b4\u9732\u5176\u4efb\u4f55\u5185\u90e8\u7ed3\u6784\u7684\u62bd\u8c61\u80cc\u540e\uff0c\u5305\u62ec Scala\u3002\\n\\n### Apache Flink \u4e2d Scala \u7684\u672a\u6765\\n\\n\u867d\u7136\u8fd9\u4e9b\u66f4\u6539\u5927\u90e8\u5206\u53d1\u751f\u5728\u5e55\u540e\uff0c\u4f46\u5b83\u4eec\u5bfc\u81f4\u4e86\u4e00\u4e2a\u975e\u5e38\u9762\u5411\u7528\u6237\u7684\u66f4\u6539\uff1a\u5220\u9664\u4e86\u8bb8\u591a scala \u540e\u7f00\u3002\u60a8\u53ef\u4ee5\u5728\u672c\u6587\u7ed3\u5c3e\u5904\u627e\u5230\u4e22\u5931 Scala \u540e\u7f00\u7684\u6240\u6709\u4f9d\u8d56\u9879\u7684\u5217\u8868\u3002\\n\\n\u6b64\u5916\uff0c\u5bf9 Table API \u7684\u66f4\u6539\u9700\u8981\u5bf9\u6253\u5305\u548c\u5206\u53d1\u8fdb\u884c\u4e00\u4e9b\u66f4\u6539\uff0c\u4e00\u4e9b\u4f9d\u8d56\u89c4\u5212\u5668\u5185\u90e8\u7684\u9ad8\u7ea7\u7528\u6237\u53ef\u80fd\u9700\u8981\u9002\u5e94\u3002\\n\\n\u5c55\u671b\u672a\u6765\uff0cFlink \u5c06\u7ee7\u7eed\u652f\u6301\u9488\u5bf9 Scala 2.12 \u7f16\u8bd1\u7684 DataStream \u548c Table API \u7684 Scala \u5305\uff0c\u800c Java API \u73b0\u5728\u5df2\u89e3\u9501\uff0c\u7528\u6237\u53ef\u4ee5\u5229\u7528\u4efb\u4f55 Scala \u7248\u672c\u7684\u7ec4\u4ef6\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u793e\u533a\u4e2d\u51fa\u73b0\u4e86\u65b0\u7684 Scala 3 \u5305\u88c5\u5668\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u770b\u5230\u7528\u6237\u5982\u4f55\u5728\u4ed6\u4eec\u7684\u6d41\u5a92\u4f53\u7ba1\u9053\u4e2d\u5229\u7528\u8fd9\u4e9b\u5de5\u5177\uff01\\n\\nflink-cep, flink-clients, flink-connector-elasticsearch-base, flink-connector-elasticsearch6, flink-connector-elasticsearch7, flink-connector-gcp-pubsub, flink-connector-hbase-1.4, flink-connector-hbase-2.2, flink-connector-hbase-base, flink-connector-jdbc, flink-connector-kafka, flink-connector-kinesis, flink-connector-nifi, flink-connector-pulsar, flink-connector-rabbitmq, flink-connector-testing, flink-connector-twitter, flink-connector-wikiedits, flink-container, flink-dstl-dfs, flink-gelly, flink-hadoop-bulk, flink-kubernetes, flink-runtime-web, flink-sql-connector-elasticsearch6, flink-sql-connector-elasticsearch7, flink-sql-connector-hbase-1.4, flink-sql-connector-hbase-2.2, flink-sql-connector-kafka, flink-sql-connector-kinesis, flink-sql-connector-rabbitmq, flink-state-processor-api, flink-statebackend-rocksdb, flink-streaming-java, flink-table-api-java-bridge, flink-test-utils, flink-yarn, flink-table-runtime, flink-table-api-java-bridge \\n\\nhttps://nightlies.apache.org/flink/flink-docs-master/docs/dev/configuration/overview/#which-dependencies-do-you-need \\n\\nhttps://nightlies.apache.org/flink/flink-docs-master/docs/dev/configuration/advanced/#anatomy-of-table-dependencies \\n\\nhttps://github.com/ariskk/flink4s \\n\\nhttps://github.com/findify/flink-adt \\n\\nhttps://github.com/sjwiesman/flink-scala-3 \\n\\n> \u6839\u636e\u535a\u6587\u548c flink 1.15 \u53d1\u5e03\u516c\u544a\uff0c\u76ee\u524d flink table planner \u5bf9 Scala \u7684\u9690\u85cf\u5df2\u7ecf\u5b8c\u6210\uff0c\u4e3a\u4e86\u5411\u540e\u517c\u5bb9\uff0c1.15 \u4ecd\u7136\u63d0\u4f9b\u4e86\u5e26\u6709 Scala \u540e\u7f00\u7684 Flink Table Planner\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86\u91cd\u65b0\u6784\u5efa\u7684\\n> Flink Table Planner Loader\\n\\n\\n![img](https://user-images.githubusercontent.com/34996528/167306854-01764dde-4cce-4b24-ab91-b9097c4c774b.png)\\n\\n[\u91cd\u7ec4table\u6a21\u5757\uff0c\u5f15\u5165flink-table-planner-loader](https://issues.apache.org/jira/browse/FLINK-25128)\\n\\n[[FLINK-24427] Hiding scala in flink-table-planner.google doc](https://docs.google.com/document/d/12yDUCnvcwU2mODBKTHQ1xhfOq1ujYUrXltiN_rbhT34/edit#)\\n\\n- note \u4f7f\u7528 flink sql-client \u65f6\uff0c\u5982\u679c\u4f7f\u7528 flink-table-planner_2.12 \u5e26\u6709 Scala \u540e\u7f00\u7684 jar \u5305\u6765\u4f7f\u7528 flink Scala app \u65f6\uff0c\u9700\u5c06\u5176\u653e\u5165 opt \u76ee\u5f55\u4e0b\uff0c\u5982\u679c\u653e\u7f6e\u5728 lib \u76ee\u5f55\u4e0b\u4f1a\u76ee\u524d\u4f1a\u5bfc\u81f4\u5f02\u5e38\\n\\n![img](https://user-images.githubusercontent.com/34996528/167307335-6161a7a8-9754-4c39-88e5-d1c85eb8c1dc.png)"},{"id":"/Doris \u96c6\u6210\u5176\u4ed6\u7cfb\u7edf","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/Doris \u96c6\u6210\u5176\u4ed6\u7cfb\u7edf","source":"@site/i18n/en/docusaurus-plugin-content-blog/Doris \u96c6\u6210\u5176\u4ed6\u7cfb\u7edf.md","title":"Doris Integrate other systems","description":"\u51c6\u5907\u8868\u548c\u6570\u636e","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"database","permalink":"/Bigdata_Blog_Website/en/blog/tags/database"},{"label":"Doris","permalink":"/Bigdata_Blog_Website/en/blog/tags/doris"}],"readingTime":4.035,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["database","Doris"]},"prevItem":{"title":"A Scala-free Flink","permalink":"/Bigdata_Blog_Website/en/blog/A Scala-free Flink"},"nextItem":{"title":"Comparison between Flink OLAP and Trino TPC-DS","permalink":"/Bigdata_Blog_Website/en/blog/Flink OLAP \u4e0e Trino TPC-DS \u5bf9\u6bd4"}},"content":"\u51c6\u5907\u8868\u548c\u6570\u636e\\n\\n```\\nshow full builtin  functions in test_db like \'year\';\\n```\\n```\\nCREATE TABLE table1 \\n(\\nsiteid INT DEFAULT \'10\', \\ncitycode SMALLINT,\\nusername VARCHAR(32) DEFAULT \'\', \\npv BIGINT SUM DEFAULT \'0\'\\n)\\nAGGREGATE KEY(siteid, citycode, username) \\nDISTRIBUTED BY HASH(siteid) BUCKETS 10 \\nPROPERTIES(\\"replication_num\\" = \\"1\\");\\n```\\n```\\ninsert into table1 values \\n(1,1,\'jim\',2),\\n(2,1,\'grace\',2), \\n(3,2,\'tom\',2),\\n(4,3,\'bush\',3), \\n(5,3,\'helen\',3);\\n```\\n\x3c!--truncate--\x3e\\n## Spark \u8bfb\u5199 Doris\\n\\n###  \u51c6\u5907  Spark \u73af\u5883\\n\\n\u521b\u5efa maven \u5de5\u7a0b\uff0c\u7f16\u5199 pom.xml \u6587\u4ef6\\n```\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<project xmlns=\\"http://maven.apache.org/POM/4.0.0\\"\\n         xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\"\\n         xsi:schemaLocation=\\"http://maven.apache.org/POM/4.0.0\\nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\\">\\n    <modelVersion>4.0.0</modelVersion>\\n    <groupId>com.atguigu.doris</groupId>\\n    <artifactId>spark-demo</artifactId>\\n    <version>1.0-SNAPSHOT</version>\\n    <properties>\\n        <scala.binary.version>2.12</scala.binary.version>\\n        <spark.version>3.0.0</spark.version>\\n        <maven.compiler.source>8</maven.compiler.source>\\n        <maven.compiler.target>8</maven.compiler.target>\\n    </properties>\\n    <dependencies>\\n        \x3c!-- Spark\u7684\u4f9d\u8d56\u5f15\u5165   --\x3e\\n        <dependency>\\n            <groupId>org.apache.spark</groupId>\\n            <artifactId>spark-core_${scala.binary.version}</artifactId>\\n            <scope>provided</scope>\\n            <version>${spark.version}</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.apache.spark</groupId>\\n            <artifactId>spark-sql_${scala.binary.version}</artifactId>\\n            <scope>provided</scope>\\n            <version>${spark.version}</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>org.apache.spark</groupId>\\n            <artifactId>spark-hive_${scala.binary.version}</artifactId>\\n            <scope>provided</scope>\\n            <version>${spark.version}</version>\\n        </dependency>\\n        \x3c!-- \u5f15\u5165 Scala --\x3e\\n        <dependency>\\n            <groupId>org.scala-lang</groupId>\\n            <artifactId>scala-library</artifactId>\\n            <version>2.12.10</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>com.alibaba</groupId>\\n            <artifactId>fastjson</artifactId>\\n            <version>1.2.47</version>\\n        </dependency>\\n        <dependency>\\n            <groupId>mysql</groupId>\\n            <artifactId>mysql-connector-java</artifactId>\\n            <version>5.1.49</version>\\n        </dependency>\\n        \x3c!--spark-doris-connector--\x3e\\n        <dependency>\\n            <groupId>org.apache.doris</groupId>\\n            <artifactId>spark-doris-connector-3.1_2.12</artifactId>\\n            \x3c!--<artifactId>spark-doris-connector-2.3_2.11</artifactId>--\x3e\\n            <version>1.0.1</version>\\n        </dependency>\\n    </dependencies>\\n    <build>\\n        <plugins>\\n            \x3c!--\u7f16\u8bd1  scala\u6240\u9700\u63d2\u4ef6--\x3e\\n            <plugin>\\n                <groupId>org.scala-tools</groupId>\\n                <artifactId>maven-scala-plugin</artifactId>\\n                <version>2.15.1</version>\\n                <executions>\\n                    <execution>\\n                        <id>compile-scala</id>\\n                        <goals>\\n                            <goal>add-source</goal>\\n                            <goal>compile</goal>\\n                        </goals>\\n                    </execution>\\n                    <execution>\\n                        <id>test-compile-scala</id>\\n                        <goals>\\n                            <goal>add-source</goal>\\n                            <goal>testCompile</goal>\\n                        </goals>\\n                    </execution>\\n                </executions>\\n            </plugin>\\n            <plugin>\\n                <groupId>net.alchim31.maven</groupId>\\n                <artifactId>scala-maven-plugin</artifactId>\\n                <version>3.2.2</version>\\n                <executions>\\n                    <execution>\\n                        \x3c!-- \u58f0\u660e\u7ed1\u5b9a\u5230 maven\u7684 compile\u9636\u6bb5    --\x3e\\n                        <goals>\\n                            <goal>compile</goal>\\n                            <goal>testCompile</goal>\\n                        </goals>\\n                    </execution>\\n                </executions>\\n            </plugin>\\n            \x3c!-- assembly\u6253\u5305\u63d2\u4ef6   --\x3e\\n            <plugin>\\n                <groupId>org.apache.maven.plugins</groupId>\\n                <artifactId>maven-assembly-plugin</artifactId>\\n                <version>3.0.0</version>\\n                <executions>\\n                    <execution>\\n                        <id>make-assembly</id>\\n                        <phase>package</phase>\\n                        <goals>\\n                            <goal>single</goal>\\n                        </goals>\\n                    </execution>\\n                </executions>\\n                <configuration>\\n                    <archive>\\n                        <manifest>\\n                        </manifest>\\n                    </archive>\\n                    <descriptorRefs>\\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\\n                    </descriptorRefs>\\n                </configuration>\\n            </plugin>\\n\\n            \x3c!--<plugin>\\n            <groupId>org.apache.maven.plugins</groupId>\\n            <artifactId>maven-compiler-plugin</artifactId>\\n            <version>3.6.1</version>\\n            &lt;!&ndash; \u6240\u6709\u7684\u7f16\u8bd1\u90fd\u4f9d\u7167  JDK1.8 &ndash;&gt;\\n            <configuration>\\n            <source>1.8</source>\\n            <target>1.8</target>\\n            </configuration>\\n            </plugin>--\x3e\\n        </plugins>\\n    </build>\\n</project>\\n```\\n\\n### \u4f7f\u7528  Spark Doris Connector\\n\\nSpark Doris Connector \u53ef\u4ee5\u652f\u6301\u901a\u8fc7 Spark \u8bfb\u53d6 Doris \u4e2d\u5b58\u50a8\u7684\u6570\u636e\uff0c\u4e5f\u652f\u6301\u901a\u8fc7 Spark \u5199\u5165\u6570\u636e\u5230 Doris\u3002\\n\\n#### SQL \u65b9\u5f0f\u8bfb\u5199\u6570\u636e\\n\\n```scala\\nimport org.apache.spark.SparkConf\\nimport org.apache.spark.sql.SparkSession\\n/**\\n * TODO\\n *\\n * @version 1.0\\n * @author cjp\\n */\\nobject SQLDemo {\\n  def main( args: Array[String] ): Unit = {\\n    =\\n    val sparkConf = new SparkConf().setAppName(\\"SQLDemo\\")\\n      .setMaster(\\"local[*]\\") //TODO \u8981\u6253\u5305\u63d0\u4ea4\u96c6\u7fa4\u6267\u884c\uff0c\u6ce8\u91ca\u6389\\n    sparkSession\\n    val\\n    SparkSession.builder().config(sparkConf).getOrCreate()\\n    sparkSession.sql(\\n      \\"\\"\\"\\n        |CREATE TEMPORARY VIEW spark_doris\\n        |USING doris\\n        |OPTIONS(\\n        |  \\"table.identifier\\"=\\"test_db.table1\\",\\n        |  \\"fenodes\\"=\\"hadoop1:8030\\",\\n        |  \\"user\\"=\\"test\\",\\n        |  \\"password\\"=\\"test\\"\\n        |);\\n\\"\\"\\".stripMargin)\\n//\u8bfb\u53d6\u6570\u636e\\n//    sparkSession.sql(\\"select * from spark_doris\\").show()\\n    //\u5199\u5165\u6570\u636e\\n    sparkSession.sql(\\"insert \\n      values(99,99,\'haha\',5)\\")\\n  }\\n}\\n```\\n\\n#### DataFrame \u65b9\u5f0f\u8bfb\u5199\u6570\u636e\uff08batch\uff09\\n\\n```scala\\n\\n\\nimport org.apache.spark.SparkConf\\nimport org.apache.spark.sql.SparkSession\\n/**\\n * TODO\\n *\\n * @version 1.0\\n * @author cjp\\n */\\nobject DataFrameDemo {\\n  def main(args: Array[String]): Unit = {\\n    val sparkConf = new SparkConf().setAppName(\\"DataFrameDemo\\")\\n      .setMaster(\\"local[*]\\") //TODO \u8981\u6253\u5305\u63d0\u4ea4\u96c6\u7fa4\u6267\u884c\uff0c\u6ce8\u91ca\u6389\\n\\n    val sparkSession = SparkSession.builder().config(sparkConf).getOrCreate()\\n\\n    // \u8bfb\u53d6\u6570\u636e\\n    //    val dorisSparkDF = sparkSession.read.format(\\"doris\\")\\n    //      .option(\\"doris.table.identifier\\", \\"test_db.table1\\")\\n    //      .option(\\"doris.fenodes\\", \\"hadoop1:8030\\")\\n    //    .option(\\"user\\", \\"test\\")\\n    //      .option(\\"password\\", \\"test\\")\\n    //      .load()\\n    //    dorisSparkDF.show()\\n    // \u5199\u5165\u6570\u636e\\n    import sparkSession.implicits._\\n    val mockDataDF = List(\\n      (11, 23, \\"haha\\", 8),\\n      (11, 3, \\"hehe\\", 9),\\n      (11, 3, \\"heihei\\", 10)\\n    ).toDF(\\"siteid\\", \\"citycode\\", \\"username\\", \\"pv\\")\\n    mockDataDF.show(5)\\n    mockDataDF.write.format(\\"doris\\")\\n      .option(\\"doris.table.identifier\\", \\"test_db.table1\\")\\n      .option(\\"doris.fenodes\\", \\"hadoop1:8030\\")\\n      .option(\\"user\\", \\"test\\")\\n      .option(\\"password\\", \\"test\\")\\n      //\u6307\u5b9a\u4f60\u8981\u5199\u5165\u7684\u5b57\u6bb5\\n      //      .option(\\"doris.write.fields\\", \\"user\\")\\n      .save()\\n  }\\n\\n}\\n```\\n\\n#### RDD \u65b9\u5f0f\u8bfb\u53d6\u6570\u636e\\n\\n```scala\\n\\nimport org.apache.spark.{SparkConf, SparkContext}\\nimport org.apache.spark.sql.SparkSession\\n/**\\n * TODO\\n *\\n * @version 1.0\\n * @author cjp\\n */\\nobject RDDDemo {\\n  def main(args: Array[String]): Unit = {\\n    val sparkConf = new SparkConf().setAppName(\\"RDDDemo\\")\\n      .setMaster(\\"local[*]\\") //TODO \u8981\u6253\u5305\u63d0\u4ea4\u96c6\u7fa4\u6267\u884c\uff0c\u6ce8\u91ca\u6389\\n    val sc = new SparkContext(sparkConf)\\n    import org.apache.doris.spark._\\n    val dorisSparkRDD = sc.dorisRDD(\\n      tableIdentifier = Some(\\"test_db.table1\\"),\\n      cfg = Some(Map(\\n        \\"doris.fenodes\\" -> \\"hadoop1:8030\\",\\n        \\"doris.request.auth.user\\" -> \\"test\\",\\n        \\"doris.request.auth.password\\" -> \\"test\\"\\n      ))\\n    )\\n    dorisSparkRDD.collect().foreach(println)\\n  }\\n}\\n```\\n\\n#### \u914d\u7f6e\u548c\u5b57\u6bb5\u7c7b\u578b\u6620\u5c04\\n\\n- 1 \u901a\u7528\u914d\u7f6e\u9879\\n\\n![[img](https://user-images.githubusercontent.com/34996528/167132236-a3a95203-7845-4ee0-901d-1675367e7cf2.png)\\n\\n![[img](https://user-images.githubusercontent.com/34996528/167132163-23461f7a-1fca-462f-a612-91e1993d7aab.png)\\n\\n![[img](https://user-images.githubusercontent.com/34996528/167132357-47304220-e8f8-4d21-8aab-c00cd4107baf.png)\\n\\n![[img](https://user-images.githubusercontent.com/34996528/167132534-ed6190d0-cb0f-4f69-b992-e55edfecf099.png)\\n\\n- 2 SQL \u548c Dataframe \u4e13\u6709\u914d\u7f6e\\n\\n![[img](https://user-images.githubusercontent.com/34996528/167132622-aea37038-c877-4fa4-81c4-bae5658d8b60.png)\\n\\n- 3 RDD \u4e13\u6709\u914d\u7f6e\\n\\n![img](https://user-images.githubusercontent.com/34996528/167132684-3a3dcbb1-b1c5-4c0d-a5c9-7ce65f63a08b.png)\\n\\n- 4 Doris \u548c Spark \u5217\u7c7b\u578b\u6620\u5c04\u5173\u7cfb:\\n\\n![img](https://user-images.githubusercontent.com/34996528/167132772-19c41625-5c50-47cd-97eb-f97df6983431.png)\\n\\n![img](https://user-images.githubusercontent.com/34996528/167133133-0f219de7-2410-4e48-b576-892f7a6e5064.png)\\n\\n![img](https://user-images.githubusercontent.com/34996528/167132972-38a871bf-2057-4cfa-baf1-37ff494ab00e.png)\\n\\n### \u4f7f\u7528 JDBC \u7684\u65b9\u5f0f\uff08\u4e0d\u63a8\u8350\uff09\\n\\n\u8fd9\u79cd\u65b9\u5f0f\u662f\u65e9\u671f\u5199\u6cd5\uff0cSpark \u65e0\u6cd5\u611f\u77e5 Doris \u7684\u6570\u636e\u5206\u5e03\uff0c\u4f1a\u5bfc\u81f4\u6253\u5230 Doris \u7684\u67e5\u8be2\u538b\u529b\u975e\u5e38\u5927\u3002\\n\\n```scala\\n\\nimport java.util.Properties\\nimport org.apache.spark.SparkConf\\nimport org.apache.spark.sql.{SaveMode, SparkSession}\\n\\nobject JDBCDemo {\\n  def main(args: Array[String]): Unit = {\\n  val sparkConf =  SparkConf().setAppName(\\"JDBCDemo\\").setMaster(\\"local[*]\\")\\n\\nval  sparkSession =  SparkSession.builder().config(sparkConf).getOrCreate()\\n// \u8bfb\u53d6\u6570\u636e\\n//    val df=sparkSession.read.format(\\"jdbc\\")\\n//      .option(\\"url\\",\\"jdbc:mysql://hadoop1:9030/test_db\\")\\n//      .option(\\"user\\",\\"test\\")\\n//      .option(\\"password\\",\\"test\\")\\n//      .option(\\"dbtable\\",\\"table1\\")\\n//      .load()\\n//\\n//    df.show()\\n// \u5199\u5165\u6570\u636e\\n\\nimport sparkSession.implicits._\\n\\n   val mockDataDF = List (\\n      (11, 23, \\"haha\\", 8),\\n      (11, 3, \\"hehe\\", 9),\\n      (11, 3, \\"heihei\\", 10)\\n        ).toDF (\\"siteid\\", \\"citycode\\", \\"username\\", \\"pv\\")\\n     val prop = new Properties ()\\n     prop.setProperty (\\"user\\", \\"root\\")\\n     prop.setProperty (\\"password\\", \\"123456\\")\\n     df.write.mode (SaveMode.Append)\\n       .jdbc (\\"jdbc:mysql://hadoop1:9030/test_db\\", \\"table1\\", prop)\\n  }\\n}\\n```"},{"id":"/Flink OLAP \u4e0e Trino TPC-DS \u5bf9\u6bd4","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/Flink OLAP \u4e0e Trino TPC-DS \u5bf9\u6bd4","source":"@site/i18n/en/docusaurus-plugin-content-blog/Flink OLAP \u4e0e Trino TPC-DS \u5bf9\u6bd4.md","title":"Comparison between Flink OLAP and Trino TPC-DS","description":"\u672c\u6587\u4e3a\u793e\u533a\u90ae\u4ef6\u5185\u5bb9\u63d0\u53d6","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"Flink","permalink":"/Bigdata_Blog_Website/en/blog/tags/flink"},{"label":"Calculation framework","permalink":"/Bigdata_Blog_Website/en/blog/tags/calculation-framework"}],"readingTime":0.26,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["Flink","Calculation framework"],"title":"Comparison between Flink OLAP and Trino TPC-DS"},"prevItem":{"title":"Doris Integrate other systems","permalink":"/Bigdata_Blog_Website/en/blog/Doris \u96c6\u6210\u5176\u4ed6\u7cfb\u7edf"},"nextItem":{"title":"Hbase and ClickHouse application scenarios","permalink":"/Bigdata_Blog_Website/en/blog/Hbase \u4e0e ClickHouse \u5e94\u7528\u573a\u666f"}},"content":"> \u672c\u6587\u4e3a\u793e\u533a\u90ae\u4ef6\u5185\u5bb9\u63d0\u53d6\\n\\n![img](https://user-images.githubusercontent.com/34996528/167282457-7ed1794c-99bf-4f57-8b73-6be3e93d4e82.png)\\n\\n\\n![img](https://user-images.githubusercontent.com/34996528/167282486-0ad6f589-2049-4968-a9a5-40d7d3ec2f73.png)\\n\\n\\n\\n![img](https://user-images.githubusercontent.com/34996528/167282548-0d1c4754-e895-454e-9ad1-0d1ad00df6a8.png)\\n\\n\x3c!--truncate--\x3e\\n> \u56fe\u793a\u94fe\u63a5\\n\\n[1] https://github.com/ververica/flink-sql-gateway\\n\\n[2]\\nhttps://cwiki.apache.org/confluence/display/FLINK/FLIP-91%3A+Support+SQL+Gateway\\n\\n[3]\\nhttps://nightlies.apache.org/flink/flink-docs-master/docs/connectors/table/hive/hive_read_write/#source-parallelism-inference\\n\\n[4] https://issues.apache.org/jira/browse/FLINK-27338\\n\\n[5]\\nhttps://www.yuque.com/docs/share/b89479ab-9c24-45c8-9390-77299ae0c4cd?#AkK9\\n\\n[6] https://issues.apache.org/jira/browse/FLINK-25318\\n\\n\\n\\n![img](https://user-images.githubusercontent.com/34996528/167282523-9e64992b-cdc8-4324-9d75-7aec2a4a0116.png)\\n\\n\\n> \u56fe\u793a\u94fe\u63a5\\n\\n\u300aTPC-DS\u5404\u5f15\u64ce\u8017\u65f6\u300b\\nhttps://www.yuque.com/deadwind/notes/tpcds-benchmark-table\\n\\n\u300aTPC-DS\u8d44\u6e90\u914d\u7f6e\u300b\\nhttps://www.yuque.com/deadwind/notes/tpcds-resource"},{"id":"/Hbase \u4e0e ClickHouse \u5e94\u7528\u573a\u666f","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/Hbase \u4e0e ClickHouse \u5e94\u7528\u573a\u666f","source":"@site/i18n/en/docusaurus-plugin-content-blog/Hbase \u4e0e ClickHouse \u5e94\u7528\u573a\u666f.md","title":"Hbase and ClickHouse application scenarios","description":"Hbase \u5b58\u50a8\u548c\u67e5\u8be2\u7ef4\u5ea6\u6570\u636e","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"data warehouse","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-warehouse"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["data warehouse"]},"prevItem":{"title":"Comparison between Flink OLAP and Trino TPC-DS","permalink":"/Bigdata_Blog_Website/en/blog/Flink OLAP \u4e0e Trino TPC-DS \u5bf9\u6bd4"},"nextItem":{"title":"IDEA CheckStyle to configure","permalink":"/Bigdata_Blog_Website/en/blog/IDEA CheckStyle \u914d\u7f6e"}},"content":"Hbase \u5b58\u50a8\u548c\u67e5\u8be2\u7ef4\u5ea6\u6570\u636e\\n\\n   - Hbase \u6570\u636e\u5206\u6790\u6548\u7387\u4f4e \u5206\u6790\u51fd\u6570\u5c11\uff0cHbase\u6570\u636e\u5206\u6790\u6d89\u53ca\u78c1\u76d8\u8bfb\u53d6\u6570\u636e\uff0c\u6bd4\u8f83\u7248\u672c\uff0c\u805a\u5408\u5bfc\u81f4\u6548\u7387\u4f4e\u4e0b\\n\\nClickHouse \u5b58\u50a8\u548c\u67e5\u8be2\u5bbd\u8868\u6570\u636e\\n\\n   - \u66f4\u64c5\u957f\u6570\u636e\u5206\u6790\u800c\u4e0d\u662f\u67e5\u8be2\u660e\u7ec6\uff0c\u7ef4\u5ea6\u6570\u636e\u4e0d\u5b9c\u5b58\u653e ClickHouse"},{"id":"/IDEA CheckStyle \u914d\u7f6e","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/IDEA CheckStyle \u914d\u7f6e","source":"@site/i18n/en/docusaurus-plugin-content-blog/IDEA CheckStyle \u914d\u7f6e.md","title":"IDEA CheckStyle to configure","description":"\u65e5\u5e38\u5f00\u53d1\u901a\u5e38\u9700\u8981\u914d\u7f6e code style \uff0c\u800c idea \u65e0\u7591\u662f\u6700\u53d7\u6b22\u8fce\u7684\u5f00\u53d1\u5de5\u5177\u4e4b\u4e00\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u5e94\u7528 checkstyle \u63d2\u4ef6","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"Tool configuration","permalink":"/Bigdata_Blog_Website/en/blog/tags/tool-configuration"}],"readingTime":0.58,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["Tool configuration"]},"prevItem":{"title":"Hbase and ClickHouse application scenarios","permalink":"/Bigdata_Blog_Website/en/blog/Hbase \u4e0e ClickHouse \u5e94\u7528\u573a\u666f"},"nextItem":{"title":"\u6280\u672f\u601d\u60f3","permalink":"/Bigdata_Blog_Website/en/blog/mysql cdc \u6574\u5e93\u540c\u6b65"}},"content":"\u65e5\u5e38\u5f00\u53d1\u901a\u5e38\u9700\u8981\u914d\u7f6e code style \uff0c\u800c idea \u65e0\u7591\u662f\u6700\u53d7\u6b22\u8fce\u7684\u5f00\u53d1\u5de5\u5177\u4e4b\u4e00\uff0c\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u5e94\u7528 checkstyle \u63d2\u4ef6\\n\\n## 1 \u4e0b\u8f7d\u63d2\u4ef6\\n\x3c!--truncate--\x3e\\n![img](https://user-images.githubusercontent.com/34996528/166152027-93d88971-8308-4867-97ed-97da085577b5.png)\\n\\n## 2 \u9009\u62e9 checkstyle \u7248\u672c\\n\\n![img](https://user-images.githubusercontent.com/34996528/166152107-cf0db426-8942-49bd-9c42-4eb966852254.png)\\n\\n\\n## 3 \u6dfb\u52a0 checkstyle \u6587\u4ef6\\n![img](https://user-images.githubusercontent.com/34996528/166152064-a764fbfc-dbff-49fd-a619-96189d96ca2a.png)\\n\\n## 4 \u6dfb\u52a0\u5c5e\u6027\u503c\\n\\n![img](https://user-images.githubusercontent.com/34996528/166152134-43bbd5e2-c085-43e4-86d1-ad96570d6644.png)\\n\\n\u5e94\u7528\u540e\u5373\u53ef\u5b8c\u6210 checkstyle \u914d\u7f6e\\n\\n- \u8be5\u63d2\u4ef6\u53ef\u4ee5\u5b9e\u65f6\u626b\u63cf\u4ee3\u7801\u89c4\u7ea6\\n\\n\u4e5f\u53ef\u901a\u8fc7\u5728 pom \u914d\u7f6e maven \u63d2\u4ef6\u7684\u5f62\u5f0f\u6765\u68c0\u67e5 code style\\n\\n\u793a\u4f8b\uff1ahttps://github.com/SophiaData/Bigdata_Code_Tutorial/blob/master/Code_Tutorial/pom.xml"},{"id":"/mysql cdc \u6574\u5e93\u540c\u6b65","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/mysql cdc \u6574\u5e93\u540c\u6b65","source":"@site/blog/mysql cdc \u6574\u5e93\u540c\u6b65.md","title":"\u6280\u672f\u601d\u60f3","description":"\u5229\u7528 mysql catalog\uff0cmysql cdc\uff0cflink jdbc \u7b49\u6280\u672f\u5b9e\u73b0 mysql \u6574\u5e93\u8fc1\u79fb\u81f3\u4e0b\u6e38\u6570\u636e\u5e93\uff0c\u8fd9\u91cc\u662f\u793a\u8303 mysql to mysql \uff0c\u5176\u4ed6 sink \u7ec4\u4ef6\u53ef\u81ea\u884c\u6269\u5c55\u5b9e\u73b0\u3002","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[],"readingTime":11.585,"hasTruncateMarker":false,"authors":[{"name":"skylines","url":"https://github.com/rookiegao","tags":["\u6570\u636e\u96c6\u6210"]}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao","tags":["\u6570\u636e\u96c6\u6210"]}]},"prevItem":{"title":"IDEA CheckStyle to configure","permalink":"/Bigdata_Blog_Website/en/blog/IDEA CheckStyle \u914d\u7f6e"},"nextItem":{"title":"Realtime DataWarehouse Development","permalink":"/Bigdata_Blog_Website/en/blog/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1"}},"content":"> \u5229\u7528 mysql catalog\uff0cmysql cdc\uff0cflink jdbc \u7b49\u6280\u672f\u5b9e\u73b0 mysql \u6574\u5e93\u8fc1\u79fb\u81f3\u4e0b\u6e38\u6570\u636e\u5e93\uff0c\u8fd9\u91cc\u662f\u793a\u8303 mysql to mysql \uff0c\u5176\u4ed6 sink \u7ec4\u4ef6\u53ef\u81ea\u884c\u6269\u5c55\u5b9e\u73b0\u3002\\n\\n\u901a\u8fc7 flink ParameterTool\uff0c\u53ef\u4ee5\u9009\u62e9\u662f\u6574\u5e93\u540c\u6b65\u8fd8\u662f\u591a\u8868\u4ea6\u6216\u5355\u8868\u540c\u6b65\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u5168\u5c40\u5e76\u53d1\uff0c\u6e90\u8868 mysql \u53c2\u6570\uff0c\u76ee\u6807\u8868 mysql \u53c2\u6570\\n\\n> \u901a\u8fc7 sql Connection \u5b9e\u73b0\u81ea\u52a8\u5efa\u8868\u903b\u8f91 (mysql \u6570\u636e\u7c7b\u578b\u4f17\u591a\uff0c\u8fd9\u91cc\u5e76\u6ca1\u6709\u6d4b\u8bd5\u6240\u6709\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u5982\u62c5\u5fc3\u5efa\u8868\u4e0d\u6210\u529f\uff0c\u53ef\u624b\u52a8\u5efa\u8868\uff0c\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u8fd0\u884c)\\n\\n\u4e0b\u6e38\u4f7f\u7528 flink jdbc \u6765\u5b9e\u73b0\uff0c\u8bed\u6cd5\u4e3a upsert \u5373\u5e42\u7b49\u5199\u5165(\u91cd\u590d\u6570\u636e\u53ea\u4f1a\u5199\u5165\u4e00\u6b21)\\n\\n> \u4f7f\u7528 mysql catalog \u6765\u5b9e\u73b0\u6e90\u8868\u5143\u6570\u636e\u7684\u83b7\u53d6\\n\\n\u81ea\u5b9a\u4e49 CustomDebeziumDeserializer \u5b9e\u73b0 DebeziumDeserializationSchema \u63a5\u53e3\u5bf9\u6570\u636e\u8fdb\u884c\u8f6c\u6362\\n\\n> \u8be5\u4efb\u52a1\u672c\u8d28\u4e0a\u662f \u5355 source \u591a sink \u4efb\u52a1\uff0c\u4e0d\u540c\u7684\u8868\u6570\u636e\u4e0d\u4e00\u6837\u53ef\u80fd\u4f1a\u6709\u4e00\u5b9a\u7684\u53cd\u538b\\n\\n\u7a0b\u5e8f\u6d4b\u8bd5 \u751f\u6210\u4e94\u767e\u4e07\u6761\u6570\u636e \u4e94\u5f20\u8868 \u4e00\u5206\u949f\u5de6\u53f3\u5b8c\u6210\uff0c\u589e\u91cf\u6570\u636e\u4e00\u4e07\u6761\uff0c\u53ef\u4ee5\u540c\u6b65\u5b8c\u6210\\n\\n\u73af\u5883 flink 1.16  cdc 2.3.0\\n\\nrefer:\\n\\n- https://nightlies.apache.org/flink/flink-docs-release-1.16/\\n- https://blog.csdn.net/qq_36062467/article/details/128117647\\n- https://ververica.github.io/flink-cdc-connectors/master/content/connectors/mysql-cdc%28ZH%29.html\\n\\n# \u4ee3\u7801\\ngithub \u5730\u5740 https://github.com/SophiaData/Bigdata_Code_Tutorial/\\n```\\n/** (@SophiaData) (@date 2022/12/1 16:02). */\\npublic class CustomDebeziumDeserializer\\n        implements DebeziumDeserializationSchema<Tuple2<String, Row>> {\\n    private static final Logger LOG = LoggerFactory.getLogger(CustomDebeziumDeserializer.class);\\n\\n    private final Map<String, DeserializationRuntimeConverter> physicalConverterMap =\\n            Maps.newConcurrentMap();\\n\\n    CustomDebeziumDeserializer(Map<String, RowType> tableRowTypeMap) {\\n        for (String tableName : tableRowTypeMap.keySet()) {\\n            RowType rowType = tableRowTypeMap.get(tableName);\\n            DeserializationRuntimeConverter physicalConverter = createNotNullConverter(rowType);\\n            this.physicalConverterMap.put(tableName, physicalConverter);\\n        }\\n    }\\n\\n    @Override\\n    public void deserialize(SourceRecord record, Collector<Tuple2<String, Row>> out)\\n            throws Exception {\\n        Envelope.Operation op = Envelope.operationFor(record);\\n        Struct value = (Struct) record.value();\\n        Schema valueSchema = record.valueSchema();\\n        Struct source = value.getStruct(\\"source\\");\\n        String tableName = source.get(\\"table\\").toString();\\n        DeserializationRuntimeConverter physicalConverter = physicalConverterMap.get(tableName);\\n        if (op == Envelope.Operation.CREATE || op == Envelope.Operation.READ) {\\n            Row insert = extractAfterRow(value, valueSchema, physicalConverter);\\n            insert.setKind(RowKind.INSERT);\\n            out.collect(Tuple2.of(tableName, insert));\\n        } else if (op == Envelope.Operation.DELETE) {\\n            Row delete = extractBeforeRow(value, valueSchema, physicalConverter);\\n            delete.setKind(RowKind.DELETE);\\n            out.collect(Tuple2.of(tableName, delete));\\n        } else if (op == Envelope.Operation.UPDATE) {\\n            Row before = extractBeforeRow(value, valueSchema, physicalConverter);\\n            before.setKind(RowKind.UPDATE_BEFORE);\\n            out.collect(Tuple2.of(tableName, before));\\n            Row after = extractAfterRow(value, valueSchema, physicalConverter);\\n            after.setKind(RowKind.UPDATE_AFTER);\\n            out.collect(Tuple2.of(tableName, after));\\n        } else {\\n            LOG.warn(\\" Unexpected statement: {}\\", value);\\n        }\\n    }\\n\\n    private Row extractAfterRow(\\n            Struct value, Schema valueSchema, DeserializationRuntimeConverter physicalConverter)\\n            throws Exception {\\n        Schema afterSchema = valueSchema.field(Envelope.FieldName.AFTER).schema();\\n        Struct after = value.getStruct(Envelope.FieldName.AFTER);\\n        return (Row) physicalConverter.convert(after, afterSchema);\\n    }\\n\\n    private Row extractBeforeRow(\\n            Struct value, Schema valueSchema, DeserializationRuntimeConverter physicalConverter)\\n            throws Exception {\\n        Schema beforeSchema = valueSchema.field(Envelope.FieldName.BEFORE).schema();\\n        Struct before = value.getStruct(Envelope.FieldName.BEFORE);\\n        return (Row) physicalConverter.convert(before, beforeSchema);\\n    }\\n\\n    @Override\\n    public TypeInformation<Tuple2<String, Row>> getProducedType() {\\n        return TypeInformation.of(new TypeHint<Tuple2<String, Row>>() {});\\n    }\\n\\n    public static DeserializationRuntimeConverter createNotNullConverter(LogicalType type) {\\n\\n        switch (type.getTypeRoot()) {\\n            case NULL:\\n                return new DeserializationRuntimeConverter() {\\n\\n                    private static final long serialVersionUID = 1L;\\n\\n                    @Override\\n                    public Object convert(Object dbzObj, Schema schema) {\\n                        return null;\\n                    }\\n                };\\n            case BOOLEAN:\\n                return convertToBoolean();\\n            case TINYINT:\\n                return new DeserializationRuntimeConverter() {\\n\\n                    private static final long serialVersionUID = 1L;\\n\\n                    @Override\\n                    public Object convert(Object dbzObj, Schema schema) {\\n                        return Byte.parseByte(dbzObj.toString());\\n                    }\\n                };\\n            case SMALLINT:\\n                return new DeserializationRuntimeConverter() {\\n\\n                    private static final long serialVersionUID = 1L;\\n\\n                    @Override\\n                    public Object convert(Object dbzObj, Schema schema) {\\n                        return Short.parseShort(dbzObj.toString());\\n                    }\\n                };\\n            case INTEGER:\\n            case INTERVAL_YEAR_MONTH:\\n                return convertToInt();\\n            case BIGINT:\\n            case INTERVAL_DAY_TIME:\\n                return convertToLong();\\n            case DATE:\\n                return convertToDate();\\n            case TIME_WITHOUT_TIME_ZONE:\\n                return convertToTime();\\n            case TIMESTAMP_WITHOUT_TIME_ZONE:\\n                return convertToTimestamp(ZoneId.of(\\"UTC\\"));\\n            case TIMESTAMP_WITH_LOCAL_TIME_ZONE:\\n                return convertToLocalTimeZoneTimestamp(ZoneId.of(\\"UTC\\"));\\n            case FLOAT:\\n                return convertToFloat();\\n            case DOUBLE:\\n                return convertToDouble();\\n            case CHAR:\\n            case VARCHAR:\\n                return convertToString();\\n            case BINARY:\\n            case VARBINARY:\\n                return convertToBinary();\\n            case DECIMAL:\\n                return createDecimalConverter((DecimalType) type);\\n            case ROW:\\n                return createRowConverter((RowType) type);\\n            case ARRAY:\\n            case MAP:\\n            case MULTISET:\\n            case RAW:\\n            default:\\n                throw new UnsupportedOperationException(\\"Unsupported type: \\" + type);\\n        }\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToBoolean() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Boolean) {\\n                    return dbzObj;\\n                } else if (dbzObj instanceof Byte) {\\n                    return (byte) dbzObj == 1;\\n                } else if (dbzObj instanceof Short) {\\n                    return (short) dbzObj == 1;\\n                } else {\\n                    return Boolean.parseBoolean(dbzObj.toString());\\n                }\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToInt() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Integer) {\\n                    return dbzObj;\\n                } else if (dbzObj instanceof Long) {\\n                    return ((Long) dbzObj).intValue();\\n                } else {\\n                    return Integer.parseInt(dbzObj.toString());\\n                }\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToLong() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Integer) {\\n                    return ((Integer) dbzObj).longValue();\\n                } else if (dbzObj instanceof Long) {\\n                    return dbzObj;\\n                } else {\\n                    return Long.parseLong(dbzObj.toString());\\n                }\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter createDecimalConverter(DecimalType decimalType) {\\n        final int precision = decimalType.getPrecision();\\n        final int scale = decimalType.getScale();\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                BigDecimal bigDecimal;\\n                if (dbzObj instanceof byte[]) {\\n                    // decimal.handling.mode=precise\\n                    bigDecimal = Decimal.toLogical(schema, (byte[]) dbzObj);\\n                } else if (dbzObj instanceof String) {\\n                    // decimal.handling.mode=string\\n                    bigDecimal = new BigDecimal((String) dbzObj);\\n                } else if (dbzObj instanceof Double) {\\n                    // decimal.handling.mode=double\\n                    bigDecimal = BigDecimal.valueOf((Double) dbzObj);\\n                } else {\\n                    if (VariableScaleDecimal.LOGICAL_NAME.equals(schema.name())) {\\n                        SpecialValueDecimal decimal =\\n                                VariableScaleDecimal.toLogical((Struct) dbzObj);\\n                        bigDecimal = decimal.getDecimalValue().orElse(BigDecimal.ZERO);\\n                    } else {\\n                        // fallback to string\\n                        bigDecimal = new BigDecimal(dbzObj.toString());\\n                    }\\n                }\\n                return DecimalData.fromBigDecimal(bigDecimal, precision, scale);\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToDouble() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Float) {\\n                    return ((Float) dbzObj).doubleValue();\\n                } else if (dbzObj instanceof Double) {\\n                    return dbzObj;\\n                } else {\\n                    return Double.parseDouble(dbzObj.toString());\\n                }\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToFloat() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Float) {\\n                    return dbzObj;\\n                } else if (dbzObj instanceof Double) {\\n                    return ((Double) dbzObj).floatValue();\\n                } else {\\n                    return Float.parseFloat(dbzObj.toString());\\n                }\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToDate() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                return (int) TemporalConversions.toLocalDate(dbzObj).toEpochDay();\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToTime() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Long) {\\n                    switch (schema.name()) {\\n                        case MicroTime.SCHEMA_NAME:\\n                            return (int) ((long) dbzObj / 1000);\\n                        case NanoTime.SCHEMA_NAME:\\n                            return (int) ((long) dbzObj / 1000_000);\\n                    }\\n                } else if (dbzObj instanceof Integer) {\\n                    return dbzObj;\\n                }\\n                // get number of milliseconds of the day\\n                return TemporalConversions.toLocalTime(dbzObj).toSecondOfDay() * 1000;\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToTimestamp(ZoneId serverTimeZone) {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof Long) {\\n                    switch (schema.name()) {\\n                        case Timestamp.SCHEMA_NAME:\\n                            return TimestampData.fromEpochMillis((Long) dbzObj);\\n                        case MicroTimestamp.SCHEMA_NAME:\\n                            long micro = (long) dbzObj;\\n                            return TimestampData.fromEpochMillis(\\n                                    micro / 1000, (int) (micro % 1000 * 1000));\\n                        case NanoTimestamp.SCHEMA_NAME:\\n                            long nano = (long) dbzObj;\\n                            return TimestampData.fromEpochMillis(\\n                                    nano / 1000_000, (int) (nano % 1000_000));\\n                    }\\n                }\\n                LocalDateTime localDateTime =\\n                        TemporalConversions.toLocalDateTime(dbzObj, serverTimeZone);\\n                return TimestampData.fromLocalDateTime(localDateTime);\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToLocalTimeZoneTimestamp(\\n            ZoneId serverTimeZone) {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof String) {\\n                    String str = (String) dbzObj;\\n                    // TIMESTAMP_LTZ type is encoded in string type\\n                    Instant instant = Instant.parse(str);\\n                    return TimestampData.fromLocalDateTime(\\n                            LocalDateTime.ofInstant(instant, serverTimeZone));\\n                }\\n                throw new IllegalArgumentException(\\n                        \\"Unable to convert to TimestampData from unexpected value \'\\"\\n                                + dbzObj\\n                                + \\"\' of type \\"\\n                                + dbzObj.getClass().getName());\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToString() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                return StringData.fromString(dbzObj.toString());\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter convertToBinary() {\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) {\\n                if (dbzObj instanceof byte[]) {\\n                    return dbzObj;\\n                } else if (dbzObj instanceof ByteBuffer) {\\n                    ByteBuffer byteBuffer = (ByteBuffer) dbzObj;\\n                    byte[] bytes = new byte[byteBuffer.remaining()];\\n                    byteBuffer.get(bytes);\\n                    return bytes;\\n                } else {\\n                    throw new UnsupportedOperationException(\\n                            \\"Unsupported BYTES value type: \\" + dbzObj.getClass().getSimpleName());\\n                }\\n            }\\n        };\\n    }\\n\\n    private static DeserializationRuntimeConverter createRowConverter(RowType rowType) {\\n        final DeserializationRuntimeConverter[] fieldConverters =\\n                rowType.getFields().stream()\\n                        .map(RowType.RowField::getType)\\n                        .map(CustomDebeziumDeserializer::createNotNullConverter)\\n                        .toArray(DeserializationRuntimeConverter[]::new);\\n        final String[] fieldNames = rowType.getFieldNames().toArray(new String[0]);\\n\\n        return new DeserializationRuntimeConverter() {\\n\\n            private static final long serialVersionUID = 1L;\\n\\n            @Override\\n            public Object convert(Object dbzObj, Schema schema) throws Exception {\\n                Struct struct = (Struct) dbzObj;\\n                int arity = fieldNames.length;\\n                Row row = new Row(arity);\\n                for (int i = 0; i < arity; i++) {\\n                    String fieldName = fieldNames[i];\\n                    Field field = schema.field(fieldName);\\n                    if (field == null) {\\n                        row.setField(i, null);\\n                    } else {\\n                        Object fieldValue = struct.getWithoutDefault(fieldName);\\n                        Schema fieldSchema = schema.field(fieldName).schema();\\n                        Object convertedField =\\n                                convertField(fieldConverters[i], fieldValue, fieldSchema);\\n                        row.setField(i, convertedField);\\n                    }\\n                }\\n                return row;\\n            }\\n        };\\n    }\\n\\n    private static Object convertField(\\n            DeserializationRuntimeConverter fieldConverter, Object fieldValue, Schema fieldSchema)\\n            throws Exception {\\n        if (fieldValue == null) {\\n            return null;\\n        } else {\\n            return fieldConverter.convert(fieldValue, fieldSchema);\\n        }\\n    }\\n}\\n```\\n\\n\u4e3b\u7a0b\u5e8f\\n```\\n/** (@SophiaData) (@date 2022/10/25 10:56). */\\npublic class FlinkSqlWDS extends BaseSql {\\n    private static final Logger LOG = LoggerFactory.getLogger(FlinkSqlWDS.class);\\n\\n    public static void main(String[] args) throws Exception {\\n        new FlinkSqlWDS().init(args, \\"flink_sql_job_FlinkSqlWDS\\", true, true);\\n        LOG.info(\\" init \u65b9\u6cd5\u6b63\u5e38 \\");\\n    }\\n\\n    // \u672c\u7a0b\u5e8f\u6d4b\u8bd5 Whole database synchronization \u4e4b MySQL to MySQL \u6355\u6349\u8868\u9700\u5305\u542b\u4e3b\u952e\u5e76\u5b9e\u73b0\u81ea\u52a8\u5efa\u8868\uff0cDDL \u540c\u6b65\u6682\u4e0d\u652f\u6301 \uff01\uff01\uff01\\n    // \u53ef\u6839\u636e\u6b64\u6848\u4f8b\u62d3\u5c55\u5176\u4ed6 sink \u7ec4\u4ef6\\n    // \u9700\u8981\u6ce8\u610f\u7684\u70b9\uff1a\u4e0d\u540c\u8868\u6570\u636e\u91cf\u4e0d\u4e00\u6837\uff0c\u540c\u6b65\u65f6\u53ef\u4ee5\u9002\u5f53\u653e\u5927\u540c\u6b65\u8d44\u6e90\uff0c\u4f46\u4f1a\u9020\u6210\u8d44\u6e90\u6d6a\u8d39\uff0c\u4e0d\u52a0\u5927\u53ef\u80fd\u53cd\u538b\\n    // \u6d4b\u8bd5\u540c\u6b65\u4e94\u5f20\u8868\u767e\u4e07\u6570\u636e\uff0c\u4e00\u5206\u949f\u5de6\u53f3\\n    // refer: https://blog.csdn.net/qq_36062467/article/details/128117647\\n    // refer \u73af\u5883: Flink 1.15 Flink CDC 2.3.0\\n    // \u672c\u7a0b\u5e8f\u73af\u5883\uff1aFlink 1.16 Flink CDC 2.3.0  MySQL 8.0\\n    // \u6280\u672f\u70b9\uff1aFlink MySQL CDC Connector\uff0cMySQL Catalog\uff0cFlink Operator\uff0cFlink JDBC\\n\\n    @Override\\n    public void handle(\\n            StreamExecutionEnvironment env, StreamTableEnvironment tEnv, ParameterTool params)\\n            throws Exception {\\n        String databaseName = ParameterUtil.databaseName(params);\\n        String tableList = ParameterUtil.tableList(params);\\n\\n        String connectorWithBody = CreateMySQLSinkTable.connectorWithBody(params);\\n\\n        // \u6ce8\u518c\u540c\u6b65\u7684\u5e93\u5bf9\u5e94\u7684 Catalog \u8fd9\u91cc\u662f mysql catalog\\n\\n        MySqlCatalog mySqlCatalog = MySQLUtil.useMysqlCatalog(params);\\n\\n        List<String> tables;\\n\\n        // \u5982\u679c\u6574\u5e93\u540c\u6b65\uff0c\u5219\u4ece Catalog \u91cc\u53d6\u6240\u6709\u8868\uff0c\u5426\u5219\u4ece\u6307\u5b9a\u8868\u4e2d\u53d6\u8868\u540d\\n        try {\\n            if (\\".*\\".equals(tableList)) {\\n                tables = mySqlCatalog.listTables(databaseName);\\n            } else {\\n                String[] tableArray = tableList.split(\\",\\");\\n                tables =\\n                        Arrays.stream(tableArray)\\n                                .map(table -> table.split(\\"\\\\\\\\.\\")[1])\\n                                .collect(Collectors.toList());\\n            }\\n        } catch (DatabaseNotExistException e) {\\n            LOG.error(\\"{} \u5e93\u4e0d\u5b58\u5728\\", databaseName, e);\\n            throw e;\\n        }\\n        // \u521b\u5efa\u8868\u540d\u548c\u5bf9\u5e94 RowTypeInfo \u6620\u5c04\u7684 Map\\n        Map<String, RowTypeInfo> tableTypeInformationMap = Maps.newConcurrentMap();\\n        Map<String, DataType[]> tableDataTypesMap = Maps.newConcurrentMap();\\n        Map<String, RowType> tableRowTypeMap = Maps.newConcurrentMap();\\n        for (String table : tables) {\\n            // \u83b7\u53d6  Catalog \u4e2d\u6ce8\u518c\u7684\u8868\\n            ObjectPath objectPath = new ObjectPath(databaseName, table);\\n            DefaultCatalogTable catalogBaseTable;\\n            try {\\n                catalogBaseTable = (DefaultCatalogTable) mySqlCatalog.getTable(objectPath);\\n            } catch (TableNotExistException e) {\\n                LOG.error(\\"{} \u8868\u4e0d\u5b58\u5728\\", table, e);\\n                throw e;\\n            }\\n            // \u83b7\u53d6\u8868\u7684 Schema\\n            assert catalogBaseTable != null;\\n            Schema schema = catalogBaseTable.getUnresolvedSchema();\\n            // \u83b7\u53d6\u8868\u4e2d\u5b57\u6bb5\u540d\u5217\u8868\\n            String[] fieldNames = new String[schema.getColumns().size()];\\n            // \u83b7\u53d6DataType\\n            DataType[] fieldDataTypes = new DataType[schema.getColumns().size()];\\n            LogicalType[] logicalTypes = new LogicalType[schema.getColumns().size()];\\n\\n            // \u83b7\u53d6\u8868\u5b57\u6bb5\u7c7b\u578b\\n            TypeInformation<?>[] fieldTypes = new TypeInformation[schema.getColumns().size()];\\n            // \u83b7\u53d6\u8868\u7684\u4e3b\u952e\\n            List<String> primaryKeys;\\n            try {\\n                primaryKeys = schema.getPrimaryKey().get().getColumnNames(); // \u6b64\u5904\u4e0d\u7528 orElse\\n            } catch (NullPointerException e) {\\n                LOG.error(\\"\u6355\u6349\u8868\u5f02\u5e38: {} \u8868\u6ca1\u6709\u4e3b\u952e\uff01\uff01\uff01 \u5f53\u524d mysql cdc \u5c1a\u4e0d\u652f\u6301\u6355\u6349\u6ca1\u6709\u4e3b\u952e\u7684\u8868\uff01\uff01\uff01\\", table, e);\\n                throw e;\\n            }\\n\\n            for (int i = 0; i < schema.getColumns().size(); i++) {\\n                Schema.UnresolvedPhysicalColumn column =\\n                        (Schema.UnresolvedPhysicalColumn) schema.getColumns().get(i);\\n                fieldNames[i] = column.getName();\\n                fieldDataTypes[i] = (DataType) column.getDataType();\\n                fieldTypes[i] =\\n                        InternalTypeInfo.of(((DataType) column.getDataType()).getLogicalType());\\n                logicalTypes[i] = ((DataType) column.getDataType()).getLogicalType();\\n            }\\n            RowType rowType = RowType.of(logicalTypes, fieldNames);\\n            tableRowTypeMap.put(table, rowType);\\n\\n            // \u7ec4\u88c5 Flink Sink \u8868 DDL sql\\n            StringBuilder stmt = new StringBuilder();\\n            String sinkTableName =\\n                    String.format(params.get(\\"sinkPrefix\\", \\"sink_%s\\"), table); // Sink \u8868\u524d\u7f00\\n            stmt.append(\\"create table if not exists \\").append(sinkTableName).append(\\"(\\\\n\\");\\n\\n            for (int i = 0; i < fieldNames.length; i++) {\\n                String column = fieldNames[i];\\n                String fieldDataType = fieldDataTypes[i].toString();\\n                stmt.append(\\"\\\\t`\\").append(column).append(\\"` \\").append(fieldDataType).append(\\",\\\\n\\");\\n            }\\n\\n            stmt.append(\\n                    String.format(\\n                            \\"PRIMARY KEY (%s) NOT ENFORCED\\\\n)\\",\\n                            StringUtils.join(primaryKeys, \\",\\")));\\n            String formatJdbcSinkWithBody =\\n                    connectorWithBody.replace(\\"${sinkTableName}\\", sinkTableName);\\n            String createSinkTableDdl = stmt + formatJdbcSinkWithBody;\\n            // \u521b\u5efa Flink Sink \u8868\\n            LOG.info(\\"createSinkTableDdl: \\\\r {}\\", createSinkTableDdl);\\n            tEnv.executeSql(createSinkTableDdl);\\n            tableDataTypesMap.put(table, fieldDataTypes);\\n            tableTypeInformationMap.put(table, new RowTypeInfo(fieldTypes, fieldNames));\\n\\n            // \u4e0b\u6e38 MySQL \u5efa\u8868\u903b\u8f91\\n            new CreateMySQLSinkTable()\\n                    .createMySQLSinkTable(\\n                            params, sinkTableName, fieldNames, fieldDataTypes, primaryKeys);\\n        }\\n\\n        //  MySQL CDC\\n        SingleOutputStreamOperator<Tuple2<String, Row>> dataStreamSource =\\n                new MySQLCDCSource()\\n                        .singleOutputStreamOperator(params, env, tableRowTypeMap); // \u5207\u65ad\u4efb\u52a1\u94fe\\n        StatementSet statementSet = tEnv.createStatementSet();\\n        // DataStream \u8f6c Table\uff0c\u521b\u5efa\u4e34\u65f6\u89c6\u56fe\uff0c\u63d2\u5165 sink \u8868\\n        for (Map.Entry<String, RowTypeInfo> entry : tableTypeInformationMap.entrySet()) {\\n            String tableName = entry.getKey();\\n            RowTypeInfo rowTypeInfo = entry.getValue();\\n            SingleOutputStreamOperator<Row> mapStream =\\n                    dataStreamSource\\n                            .filter(data -> data.f0.equals(tableName))\\n                            .setParallelism(ParameterUtil.setParallelism(params))\\n                            .map(data -> data.f1, rowTypeInfo)\\n                            .setParallelism(ParameterUtil.setParallelism(params));\\n            Table table = tEnv.fromChangelogStream(mapStream);\\n            String temporaryViewName = String.format(\\"t_%s\\", tableName);\\n            tEnv.createTemporaryView(temporaryViewName, table);\\n            String sinkTableName = String.format(\\"sink_%s\\", tableName);\\n            String insertSql =\\n                    String.format(\\n                            \\"insert into %s select * from %s\\", sinkTableName, temporaryViewName);\\n            LOG.info(\\"add insertSql for {}, sql: {}\\", tableName, insertSql);\\n            statementSet.addInsertSql(insertSql);\\n        }\\n        statementSet.execute();\\n    }\\n}\\n```\\n# \u6548\u679c\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/92a0a25d2ef94e4a96c791866f723c5c.png)\\n\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/c9a35c9cd950480bbf05e39461660e1b.png)\\n\\n# \u6700\u540e\\n\u4ee3\u7801\u548c\u6d4b\u8bd5\u53ef\u80fd\u4e0d\u5145\u5206\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c\u6b22\u8fce\u63d0\u51fa\u610f\u89c1\u3002\\n\\n\u6b22\u8fce\u8bbf\u95ee\u535a\u5ba2 https://sophiadata.github.io/Bigdata_Blog_Website/learning/overview"},{"id":"/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1","source":"@site/i18n/en/docusaurus-plugin-content-blog/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1.md","title":"Realtime DataWarehouse Development","description":"\u91c7\u96c6\u5230 Kafka \u7684 topiclog \u548c topicdb \u4e3b\u9898\u7684\u6570\u636e\u5373\u4e3a\u5b9e\u65f6\u6570\u4ed3\u7684 ODS \u5c42\uff0c\u8fd9\u4e00\u5c42\u7684\u4f5c\u7528\u662f\u5bf9\u6570\u636e\u505a\u539f\u6837\u5c55\u793a\u548c\u5907\u4efd\u3002","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"data warehouse","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-warehouse"}],"readingTime":102.205,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["data warehouse"]},"prevItem":{"title":"\u6280\u672f\u601d\u60f3","permalink":"/Bigdata_Blog_Website/en/blog/mysql cdc \u6574\u5e93\u540c\u6b65"},"nextItem":{"title":"Fundamentals of Realtime Digital Warehouse Theory","permalink":"/Bigdata_Blog_Website/en/blog/\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840"}},"content":"# \u6570\u4ed3\u5f00\u53d1\u4e4bODS\u5c42\\n\\n\u91c7\u96c6\u5230 Kafka \u7684 topic_log \u548c topic_db \u4e3b\u9898\u7684\u6570\u636e\u5373\u4e3a\u5b9e\u65f6\u6570\u4ed3\u7684 ODS \u5c42\uff0c\u8fd9\u4e00\u5c42\u7684\u4f5c\u7528\u662f\u5bf9\u6570\u636e\u505a\u539f\u6837\u5c55\u793a\u548c\u5907\u4efd\u3002\\n\\n\u6570\u4ed3\u5f00\u53d1\u4e4bDIM\u5c42\\n\\nDIM\u5c42\u8bbe\u8ba1\u8981\u70b9\uff1a\\n\\n\uff081\uff09DIM\u5c42\u7684\u8bbe\u8ba1\u4f9d\u636e\u662f\u7ef4\u5ea6\u5efa\u6a21\u7406\u8bba\uff0c\u8be5\u5c42\u5b58\u50a8\u7ef4\u5ea6\u6a21\u578b\u7684\u7ef4\u5ea6\u8868\u3002\\n\\n\uff082\uff09DIM\u5c42\u7684\u6570\u636e\u5b58\u50a8\u5728 HBase \u8868\u4e2d\\n\\nDIM \u5c42\u8868\u662f\u7528\u4e8e\u7ef4\u5ea6\u5173\u8054\u7684\uff0c\u8981\u901a\u8fc7\u4e3b\u952e\u53bb\u83b7\u53d6\u76f8\u5173\u7ef4\u5ea6\u4fe1\u606f\uff0c\u8fd9\u79cd\u573a\u666f\u4e0b K-V \u7c7b\u578b\u6570\u636e\u5e93\u7684\u6548\u7387\u8f83\u9ad8\u3002\\n\\n\u5e38\u89c1\u7684 K-V \u7c7b\u578b\u6570\u636e\u5e93\u6709 Redis\u3001HBase\uff0c\u800c Redis \u7684\u6570\u636e\u5e38\u9a7b\u5185\u5b58\uff0c\u4f1a\u7ed9\u5185\u5b58\u9020\u6210\u8f83\u5927\u538b\u529b\uff0c\u56e0\u800c\u9009\u7528 HBase \u5b58\u50a8\u7ef4\u5ea6\u6570\u636e\u3002\\n\\n\uff083\uff09DIM\u5c42\u8868\u540d\u7684\u547d\u540d\u89c4\u8303\u4e3adim_\u8868\u540d\\n\\n\x3c!--truncate--\x3e\\n## \u914d\u7f6e\u8868\\n\\n\u672c\u5c42\u7684\u4efb\u52a1\u662f\u5c06\u4e1a\u52a1\u6570\u636e\u76f4\u63a5\u5199\u5165\u5230\u4e0d\u540c\u7684 HBase \u8868\u4e2d\u3002\u90a3\u4e48\u5982\u4f55\u8ba9\u7a0b\u5e8f\u77e5\u9053\u6d41\u4e2d\u7684\u54ea\u4e9b\u6570\u636e\u662f\u7ef4\u5ea6\u6570\u636e\uff1f\\n\\n\u7ef4\u5ea6\u6570\u636e\u53c8\u5e94\u8be5\u5199\u5230 HBase \u7684\u54ea\u4e9b\u8868\u4e2d\uff1f\\n\\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9009\u62e9\u5728 MySQL \u4e2d\u6784\u5efa\u4e00\u5f20\u914d\u7f6e\u8868\uff0c\u901a\u8fc7 Flink CDC \u5c06\u914d\u7f6e\u8868\u4fe1\u606f\u8bfb\u53d6\u5230\u7a0b\u5e8f\u4e2d\u3002\\n\\n### Flink CDC\\n\\n### \u914d\u7f6e\u8868\u8bbe\u8ba1\\n\\n1\uff09\u5b57\u6bb5\u89e3\u6790\\n\\n\u6211\u4eec\u5c06\u4e3a\u914d\u7f6e\u8868\u8bbe\u8ba1\u4e94\u4e2a\u5b57\u6bb5\\n\\n>\\tsource_table\uff1a\u4f5c\u4e3a\u6570\u636e\u6e90\u7684\u4e1a\u52a1\u6570\u636e\u8868\u540d \\n>\\t\\n>\\tsink_table\uff1a\u4f5c\u4e3a\u6570\u636e\u76ee\u7684\u5730\u7684 Phoenix \u8868\u540d\\n>\\t\\n>\\tsink_columns\uff1aPhoenix \u8868\u5b57\u6bb5\\n>\\t\\n>\\tsink_pk\uff1aPhoenix \u8868\u4e3b\u952e\\n>\\t\\n>\\tsink_extend\uff1aPhoenix \u5efa\u8868\u6269\u5c55\uff0c\u5373\u5efa\u8868\u65f6\u4e00\u4e9b\u989d\u5916\u7684\u914d\u7f6e\u8bed\u53e5\\n\\n\u5c06 source_table \u4f5c\u4e3a\u914d\u7f6e\u8868\u7684\u4e3b\u952e\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b83\u83b7\u53d6\u552f\u4e00\u7684\u76ee\u6807\u8868\u540d\u3001\u5b57\u6bb5\u3001\u4e3b\u952e\u548c\u5efa\u8868\u6269\u5c55\uff0c\u4ece\u800c\u5f97\u5230\u5b8c\u6574\u7684 Phoenix \u5efa\u8868\u8bed\u53e5\u3002\\n\\n2\uff09\u5728Mysql\u4e2d\u521b\u5efa\u6570\u636e\u5e93\u5efa\u8868\u5e76\u5f00\u542fBinlog\\n\\n\uff081\uff09\u521b\u5efa\u6570\u636e\u5e93 gmall_config \uff0c\u6ce8\u610f:\u548c gmall \u4e1a\u52a1\u5e93\u533a\u5206\u5f00\\n\\n```\\n[atguigu@hadoop102 db_log]$ mysql -uroot -p000000 -e\\"create database gmall_config charset utf8 default collate utf8_general_ci\\"\\n\\n```\\n\\n\uff082\uff09\u5728 gmall_config \u5e93\u4e2d\u521b\u5efa\u914d\u7f6e\u8868 table_process\\n\\n```\\nCREATE TABLE `table_process` (\\n  `source_table` varchar(200) NOT NULL COMMENT \'\u6765\u6e90\u8868\',\\n  `sink_table` varchar(200) DEFAULT NULL COMMENT \'\u8f93\u51fa\u8868\',\\n  `sink_columns` varchar(2000) DEFAULT NULL COMMENT \'\u8f93\u51fa\u5b57\u6bb5\',\\n  `sink_pk` varchar(200) DEFAULT NULL COMMENT \'\u4e3b\u952e\u5b57\u6bb5\',\\n  `sink_extend` varchar(200) DEFAULT NULL COMMENT \'\u5efa\u8868\u6269\u5c55\',\\n  PRIMARY KEY (`source_table`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\\n```\\n\\n\uff083\uff09\u5728MySQL\u914d\u7f6e\u6587\u4ef6\u4e2d\u589e\u52a0 gmall_config \u5f00\u542fBinlog\\n\\n\u53c2\u8003 Flink cdc \u6587\u6863\u3002\\n\\n\u914d\u7f6e\u8868\u5efa\u8868\u53ca\u6570\u636e\u5bfc\u5165 SQL \u6587\u4ef6\u5982\u4e0b\u3002\\n\\n\u7565\u3002\\n\\n## \u4e3b\u8981\u4efb\u52a1\\n\\n### \u63a5\u6536Kafka\u6570\u636e\uff0c\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e\\n\\n\u5bf9Maxwell\u6293\u53d6\u7684\u6570\u636e\u8fdb\u884cETL\uff0c\u6709\u7528\u7684\u90e8\u5206\u4fdd\u7559\uff0c\u6ca1\u7528\u7684\u8fc7\u6ee4\u6389\u3002\\n\\n### \u52a8\u6001\u62c6\u5206\u7ef4\u5ea6\u8868\u529f\u80fd\\n\\n\u7531\u4e8eMaxwell\u662f\u628a\u5168\u90e8\u6570\u636e\u7edf\u4e00\u5199\u5165\u4e00\u4e2aTopic\u4e2d, \u8fd9\u6837\u663e\u7136\u4e0d\u5229\u4e8e\u65e5\u540e\u7684\u6570\u636e\u5904\u7406\u3002\u6240\u4ee5\u9700\u8981\u628a\u5404\u4e2a\u7ef4\u5ea6\u8868\u62c6\u5f00\u5904\u7406\u3002\\n\\n\u5728\u5b9e\u65f6\u8ba1\u7b97\u4e2d\u4e00\u822c\u628a\u7ef4\u5ea6\u6570\u636e\u5199\u5165\u5b58\u50a8\u5bb9\u5668\uff0c\u4e00\u822c\u662f\u65b9\u4fbf\u901a\u8fc7\u4e3b\u952e\u67e5\u8be2\u7684\u6570\u636e\u5e93\u6bd4\u5982HBase,Redis,MySQL\u7b49\u3002\\n\\n\u8fd9\u6837\u7684\u914d\u7f6e\u4e0d\u9002\u5408\u5199\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u8bdd\uff0c\u4e1a\u52a1\u7aef\u968f\u7740\u9700\u6c42\u53d8\u5316\u6bcf\u589e\u52a0\u4e00\u5f20\u7ef4\u5ea6\u8868\u8868\uff0c\u5c31\u8981\u4fee\u6539\u914d\u7f6e\u91cd\u542f\u8ba1\u7b97\u7a0b\u5e8f\u3002\\n\\n\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4e00\u79cd\u52a8\u6001\u914d\u7f6e\u65b9\u6848\uff0c\u628a\u8fd9\u79cd\u914d\u7f6e\u957f\u671f\u4fdd\u5b58\u8d77\u6765\uff0c\u4e00\u65e6\u914d\u7f6e\u6709\u53d8\u5316\uff0c\u5b9e\u65f6\u8ba1\u7b97\u53ef\u4ee5\u81ea\u52a8\u611f\u77e5\u3002\u8fd9\u79cd\u53ef\u4ee5\u6709\u4e09\u4e2a\u65b9\u6848\u5b9e\u73b0\uff1a\\n\\n- \u4e00\u79cd\u662f\u7528Zookeeper\u5b58\u50a8\uff0c\u901a\u8fc7Watch\u611f\u77e5\u6570\u636e\u53d8\u5316\uff1b\\n\\n- \u53e6\u4e00\u79cd\u662f\u7528mysql\u6570\u636e\u5e93\u5b58\u50a8\uff0c\u5468\u671f\u6027\u7684\u540c\u6b65\uff1b\\n\\n- \u518d\u4e00\u79cd\u662f\u7528mysql\u6570\u636e\u5e93\u5b58\u50a8\uff0c\u4f7f\u7528\u5e7f\u64ad\u6d41\u3002\\n\\n\u8fd9\u91cc\u9009\u62e9\u7b2c\u4e09\u79cd\u65b9\u6848\uff0c\u4e3b\u8981\u662fMySQL\u5bf9\u4e8e\u914d\u7f6e\u6570\u636e\u521d\u59cb\u5316\u548c\u7ef4\u62a4\u7ba1\u7406\uff0c\u4f7f\u7528FlinkCDC\u8bfb\u53d6\u914d\u7f6e\u4fe1\u606f\u8868\uff0c\u5c06\u914d\u7f6e\u6d41\u4f5c\u4e3a\u5e7f\u64ad\u6d41\u4e0e\u4e3b\u6d41\u8fdb\u884c\u8fde\u63a5\u3002\\n\\n\u6240\u4ee5\u5c31\u6709\u4e86\u5982\u4e0b\u56fe\uff1a\\n\\n ![img](https://user-images.githubusercontent.com/34996528/167242138-a6ab05fb-7e84-43af-a703-7c3af95b4f14.png)\\n\\n### \u628a\u6d41\u4e2d\u7684\u6570\u636e\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684\u7ef4\u5ea6\u8868\\n\\n\u7ef4\u5ea6\u6570\u636e\u4fdd\u5b58\u5230HBase\u7684\u8868\u4e2d\u3002\\n\\n## \u4ee3\u7801\u5b9e\u73b0\\n\\n### \u63a5\u6536Kafka\u6570\u636e\uff0c\u8fc7\u6ee4\u7a7a\u503c\u6570\u636e\\n1\uff09\u521b\u5efa KafkaUtil \u5de5\u5177\u7c7b\\n\\n\u548c Kafka \u4ea4\u4e92\u8981\u7528\u5230 Flink \u63d0\u4f9b\u7684 FlinkKafkaConsumer\u3001FlinkKafkaProducer \u7c7b\uff0c\u4e3a\u4e86\u63d0\u9ad8\u6a21\u677f\u4ee3\u7801\u7684\u590d\u7528\u6027\uff0c\u5c06\u5176\u5c01\u88c5\u5230 KafkaUtil \u5de5\u5177\u7c7b\u4e2d\u3002\\n\\n\u6b64\u5904\u4ece Kafka \u8bfb\u53d6\u6570\u636e\uff0c\u521b\u5efa getKafkaConsumer(String topic, String groupId) \u65b9\u6cd5\\n```\\npublic class KafkaUtil {\\n    static String BOOTSTRAP_SERVERS = \\"hadoop102:9092, hadoop103:9092, hadoop104:9092\\";\\n    static String DEFAULT_TOPIC = \\"default_topic\\";\\n\\n    public static FlinkKafkaConsumer<String>  getKafkaConsumer(String topic, String groupId) {\\n        Properties prop = new Properties();\\n        prop.setProperty(\\"bootstrap.servers\\", BOOTSTRAP_SERVERS);\\n        prop.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId);\\n\\n        FlinkKafkaConsumer<String> consumer = new FlinkKafkaConsumer<>(topic,\\n                new KafkaDeserializationSchema<String>() {\\n                    @Override\\n                    public boolean isEndOfStream(String nextElement) {\\n                        return false;\\n                    }\\n\\n                    @Override\\n                    public String deserialize(ConsumerRecord<byte[], byte[]> record) throws Exception {\\n                        if(record != null && record.value() != null) {\\n                            return new String(record.value());\\n                        }\\n                        return null;\\n                    }\\n\\n                    @Override\\n                    public TypeInformation<String> getProducedType() {\\n                        return TypeInformation.of(String.class);\\n                    }\\n                }, prop);\\n        return consumer;\\n}\\n}\\n```\\n2\uff09\u4e3b\u7a0b\u5e8f\\n```\\npublic class DimSinkApp {\\n    public static void main(String[] args) throws Exception {\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                10, Time.of(1L, TimeUnit.DAYS), Time.of(3L, TimeUnit.MINUTES)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/gmall/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u8bfb\u53d6\u4e1a\u52a1\u4e3b\u6d41\\n        String topic = \\"topic_db\\";\\n        String groupId = \\"dim_sink_app\\";\\n        DataStreamSource<String> gmallDS = env.addSource(KafkaUtil.getKafkaConsumer(topic, groupId));\\n\\n        // TODO 4. \u4e3b\u6d41\u6570\u636e\u7ed3\u6784\u8f6c\u6362\\n        SingleOutputStreamOperator<JSONObject> jsonDS = gmallDS.map(JSON::parseObject);\\n\\n        // TODO 5. \u4e3b\u6d41 ETL\\n        SingleOutputStreamOperator<JSONObject> filterDS = jsonDS.filter(\\n                jsonObj ->\\n                {\\n                    try {\\n                        jsonObj.getJSONObject(\\"data\\");\\n                        if(jsonObj.getString(\\"type\\").equals(\\"bootstrap-start\\")\\n                        || jsonObj.getString(\\"type\\").equals(\\"bootstrap-complete\\")) {\\n                            return false;\\n                        }\\n                        return true;\\n                    } catch (JSONException jsonException) {\\n                        return false;\\n                    }\\n                });\\n\\t\\t\\n\\t\\t// \u6253\u5370\u6d4b\u8bd5\\n        filterDS.print(\\"filterDS >>> \\");\\n\\n        env.execute();\\n}\\n}\\n```\\n### \u6839\u636eMySQL\u7684\u914d\u7f6e\u8868\uff0c\u52a8\u6001\u8fdb\u884c\u5206\u6d41\\n\\n1\uff09\u5bfc\u5165\u4f9d\u8d56\\n```\\n        <dependency>\\n            <groupId>org.apache.flink</groupId>\\n            <artifactId>flink-connector-jdbc_${scala.version}</artifactId>\\n            <version>${flink.version}</version>\\n        </dependency>\\n\\n        <dependency>\\n            <groupId>com.ververica</groupId>\\n            <artifactId>flink-connector-mysql-cdc</artifactId>\\n            <version>2.1.0</version>\\n        </dependency>\\n\\n        <dependency>\\n            <groupId>org.apache.phoenix</groupId>\\n            <artifactId>phoenix-spark</artifactId>\\n            <version>5.0.0-HBase-2.0</version>\\n            <exclusions>\\n                <exclusion>\\n                    <groupId>org.glassfish</groupId>\\n                    <artifactId>javax.el</artifactId>\\n                </exclusion>\\n            </exclusions>\\n        </dependency>\\n\\n\\t\x3c!-- \u5982\u679c\u4e0d\u5f15\u5165 flink-table \u76f8\u5173\u4f9d\u8d56\uff0c\u5219\u4f1a\u62a5\u9519\uff1a\\nCaused by: java.lang.ClassNotFoundException: \\norg.apache.flink.connector.base.source.reader.RecordEmitter\\n\u5f15\u5165\u4ee5\u4e0b\u4f9d\u8d56\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u5f15\u5165\u67d0\u4e9b\u5176\u5b83\u7684 flink-table\u76f8\u5173\u4f9d\u8d56\u4e5f\u53ef\uff09\\n--\x3e\\n\\t\\t<dependency>\\n            <groupId>org.apache.flink</groupId>\\n            <artifactId>flink-table-api-java-bridge_2.12</artifactId>\\n            <version>1.13.0</version>\\n        </dependency>\\n```\\n2\uff09\u521b\u5efa\u914d\u7f6e\u8868\u5b9e\u4f53\u7c7b\\n```\\npackage com.atguigu.gmall.realtime.bean;\\nimport lombok.Data;\\n\\n@Data\\npublic class TableProcess {\\n    //\u6765\u6e90\u8868\\n    String sourceTable;\\n    //\u8f93\u51fa\u8868\\n    String sinkTable;\\n    //\u8f93\u51fa\u5b57\u6bb5\\n    String sinkColumns;\\n    //\u4e3b\u952e\u5b57\u6bb5\\n    String sinkPk;\\n    //\u5efa\u8868\u6269\u5c55\\n    String sinkExtend;\\n}\\n```\\n4\uff09\u7f16\u5199\u64cd\u4f5c\u8bfb\u53d6\u914d\u7f6e\u8868\u5f62\u6210\u5e7f\u64ad\u6d41\\n```\\n// TODO 6. FlinkCDC \u8bfb\u53d6\u914d\u7f6e\u6d41\u5e76\u5e7f\u64ad\u6d41\\n        // 6.1 FlinkCDC \u8bfb\u53d6\u914d\u7f6e\u8868\u4fe1\u606f\\n        MySqlSource<String> mySqlSource = MySqlSource.<String>builder()\\n                .hostname(\\"hadoop102\\")\\n                .port(3306)\\n                .databaseList(\\"gmall_config\\") // set captured database\\n                .tableList(\\"gmall_config.table_process\\") // set captured table\\n                .username(\\"root\\")\\n                .password(\\"000000\\")\\n                .deserializer(new JsonDebeziumDeserializationSchema()) // converts SourceRecord to JSON String\\n                .startupOptions(StartupOptions.initial())\\n                .build();\\n\\n        // 6.2 \u5c01\u88c5\u4e3a\u6d41\\n        DataStreamSource<String> mysqlDSSource = env.fromSource(mySqlSource, WatermarkStrategy.noWatermarks(), \\"MysqlSource\\");\\n\\n        // 6.3 \u5e7f\u64ad\u914d\u7f6e\u6d41\\n        MapStateDescriptor<String, TableProcess> tableConfigDescriptor = new MapStateDescriptor<String, TableProcess>(\\"table-process-state\\", String.class, TableProcess.class);\\n        BroadcastStream<String> broadcastDS = mysqlDSSource.broadcast(tableConfigDescriptor);\\n\\n        // TODO 7. \u8fde\u63a5\u6d41\\n        BroadcastConnectedStream<JSONObject, String> connectedStream = filterDS.connect(broadcastDS);\\n ```       \\n5\uff09\u5b9a\u4e49\u4e00\u4e2a\u9879\u76ee\u4e2d\u5e38\u7528\u7684\u914d\u7f6e\u5e38\u91cf\u7c7bGmallConfig\\n```\\npackage com.atguigu.gmall.realtime.common;\\n\\npublic class GmallConfig {\\n\\n    // Phoenix\u5e93\u540d\\n    public static final String HBASE_SCHEMA = \\"GMALL2022_REALTIME\\";\\n\\n    // Phoenix\u9a71\u52a8\\n    public static final String PHOENIX_DRIVER = \\"org.apache.phoenix.jdbc.PhoenixDriver\\";\\n\\n    // Phoenix\u8fde\u63a5\u53c2\u6570\\n    public static final String PHOENIX_SERVER = \\"jdbc:phoenix:hadoop102,hadoop103,hadoop104:2181\\";\\n}\\n```\\n6\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction\\n\\n ![img](https://user-images.githubusercontent.com/34996528/167242215-ed2186bf-6999-4501-bf09-e7c855071ae1.png)\\n\\n\uff081\uff09\u5b9a\u4e49\u7c7bMyBroadcastFunction\\n```\\npackage com.atguigu.gmall.realtime.app.func;\\n\\nimport com.alibaba.fastjson.JSONObject;\\nimport org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction;\\nimport org.apache.flink.util.Collector;\\nimport org.apache.flink.util.OutputTag;\\n\\npublic class MyBroadcastFunction extends BroadcastProcessFunction<JSONObject, String, JSONObject> {\\n\\n\\tprivate MapStateDescriptor<String, TableProcess> tableConfigDescriptor;\\n\\npublic MyBroadcastFunction(MapStateDescriptor<String, TableProcess> tableConfigDescriptor) {\\n        this.tableConfigDescriptor = tableConfigDescriptor;\\n}\\n\\n    @Override\\n    public void processElement(JSONObject jsonObj, ReadOnlyContext readOnlyContext, Collector<JSONObject> out) throws Exception {\\n\\n    }\\n\\n    @Override\\n    public void processBroadcastElement(String jsonStr, Context context, Collector<JSONObject> out) throws Exception {\\n\\n    }\\n}\\n```\\n\uff082\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-open\\n```\\n// \u5b9a\u4e49Phoenix\u7684\u8fde\u63a5\\nprivate Connection conn;\\n\\n@Override\\n    public void open(Configuration parameter) throws Exception {\\n        super.open(parameter);\\n        Class.forName(GmallConfig.PHOENIX_DRIVER);\\n        conn = DriverManager.getConnection(GmallConfig.PHOENIX_SERVER);\\n    }\\n```\\n\uff083\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-processBroadcastElement\\n\\n```\\n@Override\\n    public void processBroadcastElement(String jsonStr, Context context, Collector<JSONObject> out) throws Exception {\\n        JSONObject jsonObj = JSON.parseObject(jsonStr);\\n        TableProcess config = jsonObj.getObject(\\"after\\", TableProcess.class);\\n\\n        String sourceTable = config.getSourceTable();\\n        String sinkTable = config.getSinkTable();\\n        String sinkColumns = config.getSinkColumns();\\n        String sinkPk = config.getSinkPk();\\n        String sinkExtend = config.getSinkExtend();\\n\\n        BroadcastState<String, TableProcess> tableConfigState = context.getBroadcastState(tableConfigDescriptor);\\n        tableConfigState.put(sourceTable, config);\\n\\n        checkTable(sinkTable, sinkColumns, sinkPk, sinkExtend);\\n    }\\n  ```\\n\uff084\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-checkTable\\n  \\n\u5728 Phoenix \u5efa\u8868\u4e4b\u524d\u8981\u5148\u521b\u5efa\u547d\u540d\u7a7a\u95f4 GMALL2022_REALTIM\u3002\\n```\\n0: jdbc:phoenix:> create schema GMALL2022_REALTIME;\\n```\\n\\tcheckTable() \u65b9\u6cd5\u5982\u4e0b\\n```\\n/**\\n     * Phoenix \u5efa\u8868\u51fd\u6570\\n     *\\n     * @param sinkTable \u76ee\u6807\u8868\u540d  eg. test\\n     * @param sinkColumns \u76ee\u6807\u8868\u5b57\u6bb5  eg. id,name,sex\\n     * @param sinkPk \u76ee\u6807\u8868\u4e3b\u952e  eg. id\\n     * @param sinkExtend \u76ee\u6807\u8868\u5efa\u8868\u6269\u5c55\u5b57\u6bb5  eg. \\"\\"\\n     *                   eg. create table if not exists mydb.test(id varchar primary key, name varchar, sex varchar)...\\n     */\\n    private void checkTable(String sinkTable, String sinkColumns, String sinkPk, String sinkExtend) {\\n        // \u5c01\u88c5\u5efa\u8868 SQL \\n        StringBuilder sql = new StringBuilder();\\n        sql.append(\\"create table if not exists \\" + GmallConfig.HBASE_SCHEMA\\n                + \\".\\" + sinkTable + \\"(\\\\n\\");\\n        String[] columnArr = sinkColumns.split(\\",\\");\\n        // \u4e3a\u4e3b\u952e\u53ca\u6269\u5c55\u5b57\u6bb5\u8d4b\u9ed8\u8ba4\u503c\\n        if (sinkPk == null) {\\n            sinkPk = \\"id\\";\\n        }\\n        if (sinkExtend == null) {\\n            sinkExtend = \\"\\";\\n        }\\n        // \u904d\u5386\u6dfb\u52a0\u5b57\u6bb5\u4fe1\u606f\\n        for (int i = 0; i < columnArr.length; i++) {\\n            sql.append(columnArr[i] + \\" varchar\\");\\n            // \u5224\u65ad\u5f53\u524d\u5b57\u6bb5\u662f\u5426\u4e3a\u4e3b\u952e\\n            if (sinkPk.equals(columnArr[i])) {\\n                sql.append(\\" primary key\\");\\n            }\\n            // \u5982\u679c\u5f53\u524d\u5b57\u6bb5\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\uff0c\u5219\u8ffd\u52a0\\",\\"\\n            if (i < columnArr.length - 1) {\\n                sql.append(\\",\\\\n\\");\\n            }\\n        }\\n        sql.append(\\")\\");\\n        sql.append(sinkExtend);\\n        String createStatement = sql.toString();\\n        // \u4e3a\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u8d4b\u9ed8\u8ba4\u503c\uff0c\u6267\u884c\u5efa\u8868 SQL \\n        PreparedStatement preparedSt = null;\\n        try {\\n            preparedSt = conn.prepareStatement(createStatement);\\n            preparedSt.execute();\\n        } catch (SQLException sqlException) {\\n            sqlException.printStackTrace();\\n            System.out.println(\\"\u5efa\u8868\u8bed\u53e5\\\\n\\" + createStatement + \\"\\\\n\u6267\u884c\u5f02\u5e38\\");\\n        } finally {\\n            if (preparedSt != null) {\\n                try {\\n                    preparedSt.close();\\n                } catch (SQLException sqlException) {\\n                    sqlException.printStackTrace();\\n                    throw new RuntimeException(\\"\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u91ca\u653e\u5f02\u5e38\\");\\n                }\\n            }\\n        }\\n    }\\n```\\n\uff085\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-processElement()\\n\\n ```\\n@Override\\n    public void processElement(JSONObject jsonObj, ReadOnlyContext readOnlyContext, Collector<JSONObject> out) throws Exception {\\n        ReadOnlyBroadcastState<String, TableProcess> tableConfigState = readOnlyContext.getBroadcastState(tableConfigDescriptor);\\n        // \u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\\n        String sourceTable = jsonObj.getString(\\"table\\");\\n        TableProcess tableConfig = tableConfigState.get(sourceTable);\\n        if (tableConfig != null) {\\n            JSONObject data = jsonObj.getJSONObject(\\"data\\");\\n            String sinkTable = tableConfig.getSinkTable();\\n\\n            // \u6839\u636e sinkColumns \u8fc7\u6ee4\u6570\u636e\\n            String sinkColumns = tableConfig.getSinkColumns();\\n            filterColumns(data, sinkColumns);\\n\\n            // \u5c06\u76ee\u6807\u8868\u540d\u52a0\u5165\u5230\u4e3b\u6d41\u6570\u636e\u4e2d\\n            data.put(\\"sinkTable\\", sinkTable);\\n\\t\\t\\t\\n            out.collect(data);\\n        }\\n    }\\n ```\\n\uff086\uff09\u81ea\u5b9a\u4e49\u51fd\u6570MyBroadcastFunction-filterColumns()\uff0c\u6821\u9a8c\u5b57\u6bb5\uff0c\u8fc7\u6ee4\u6389\u591a\u4f59\u7684\u5b57\u6bb5\\n```\\nprivate void filterColumns(JSONObject data, String sinkColumns) {\\n        Set<Map.Entry<String, Object>> dataEntries = data.entrySet();\\n        dataEntries.removeIf(r -> !sinkColumns.contains(r.getKey()));\\n    }\\n```\\n\\n\uff087\uff09\u4e3b\u7a0b\u5e8fDimSinkApp\u4e2d\u8c03\u7528MyBroadcastFunction\u63d0\u53d6\u7ef4\u5ea6\u6570\u636e\\n\\n```\\n// TODO 8. \u5904\u7406\u7ef4\u5ea6\u8868\u6570\u636e\\n        SingleOutputStreamOperator<JSONObject> dimDS = connectedStream.process(\\n                new MyBroadcastFunction(tableConfigDescriptor)\\n        );\\n```  \\n### \u4fdd\u5b58\u7ef4\u5ea6\u5230HBase(Phoenix)\\n\\n1\uff09\u7a0b\u5e8f\u6d41\u7a0b\u5206\u6790\\n\\n ![img](https://user-images.githubusercontent.com/34996528/167242508-adc1dcaa-f20d-4c50-8d52-02eb20e6a79f.png)\\n\\nDimSink \u7ee7\u627f\u4e86RickSinkFunction\uff0c\u8fd9\u4e2afunction\u5f97\u5206\u4e24\u6761\u65f6\u95f4\u7ebf\uff1a\\n\\n\u4e00\u6761\u662f\u4efb\u52a1\u542f\u52a8\u65f6\u6267\u884copen\u64cd\u4f5c\uff08\u56fe\u4e2d\u7d2b\u7ebf\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fde\u63a5\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u653e\u5728\u6b64\u5904\u4e00\u6b21\u6027\u6267\u884c\uff1b\\n\\n\u53e6\u4e00\u6761\u662f\u968f\u7740\u6bcf\u6761\u6570\u636e\u7684\u5230\u8fbe\u53cd\u590d\u6267\u884cinvoke()\uff08\u56fe\u4e2d\u9ed1\u7ebf\uff09,\u5728\u8fd9\u91cc\u9762\u6211\u4eec\u8981\u5b9e\u73b0\u6570\u636e\u7684\u4fdd\u5b58\uff0c\u4e3b\u8981\u7b56\u7565\u5c31\u662f\u6839\u636e\u6570\u636e\u7ec4\u5408\u6210sql\u63d0\u4ea4\u7ed9hbase\u3002\\n\\n3\uff09\u521b\u5efa PhoenixUtil \u5de5\u5177\u7c7b\uff0c\u5728\u5176\u4e2d\u521b\u5efainitializeConnection()\u65b9\u6cd5\u548cinsertValues()\u65b9\u6cd5\\n```\\npackage com.atguigu.gmall.realtime.util;\\n\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.atguigu.gmall.realtime.common.GmallConfig;\\nimport org.apache.commons.beanutils.BeanUtils;\\nimport org.apache.commons.lang3.StringUtils;\\n\\nimport java.sql.*;\\nimport java.util.ArrayList;\\nimport java.util.Collection;\\nimport java.util.List;\\nimport java.util.Set;\\n\\npublic class PhoenixUtil {\\n    // \u5b9a\u4e49\u6570\u636e\u5e93\u8fde\u63a5\u5bf9\u8c61\\n    private static Connection conn;\\n\\n    /**\\n     * \u521d\u59cb\u5316 SQL \u6267\u884c\u73af\u5883\\n     */\\n    public static void initializeConnection() {\\n        try {\\n            // 1. \u6ce8\u518c\u9a71\u52a8\\n            Class.forName(\\"org.apache.phoenix.jdbc.PhoenixDriver\\");\\n            // 2. \u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61\\n            conn = DriverManager.getConnection(\\"jdbc:phoenix:hadoop102,hadoop103,hadoop104:2181\\");\\n            // 3. \u8bbe\u7f6e Phoenix SQL \u6267\u884c\u4f7f\u7528\u7684 schema\uff08\u5bf9\u5e94 mysql \u7684 database\uff09\\n            conn.setSchema(GmallConfig.HBASE_SCHEMA);\\n        } catch (ClassNotFoundException classNotFoundException) {\\n            System.out.println(\\"\u6ce8\u518c\u9a71\u52a8\u5f02\u5e38\\");\\n            classNotFoundException.printStackTrace();\\n        } catch (SQLException sqlException) {\\n            System.out.println(\\"\u83b7\u53d6\u8fde\u63a5\u5bf9\u8c61\u5f02\u5e38\\");\\n            ;\\n            sqlException.printStackTrace();\\n        }\\n    }\\n\\n    /**\\n     * Phoenix \u8868\u6570\u636e\u5bfc\u5165\u65b9\u6cd5\\n     * @param sinkTable \u5199\u5165\u6570\u636e\u7684 Phoenix \u76ee\u6807\u8868\u540d\\n     * @param data \u5f85\u5199\u5165\u7684\u6570\u636e\\n     */\\n    public static void insertValues(String sinkTable, JSONObject data) {\\n        // \u53cc\u91cd\u6821\u9a8c\u9501\u521d\u59cb\u5316\u8fde\u63a5\u5bf9\u8c61\\n        if(conn == null) {\\n            synchronized (PhoenixUtil.class) {\\n                if(conn == null) {\\n                    initializeConnection();\\n                }\\n            }\\n        }\\n        // \u83b7\u53d6\u5b57\u6bb5\u540d\\n        Set<String> columns = data.keySet();\\n        // \u83b7\u53d6\u5b57\u6bb5\u5bf9\u5e94\u7684\u503c\\n        Collection<Object> values = data.values();\\n        // \u62fc\u63a5\u5b57\u6bb5\u540d\\n        String columnStr = StringUtils.join(columns, \\",\\");\\n        // \u62fc\u63a5\u5b57\u6bb5\u503c\\n        String valueStr = StringUtils.join(values, \\"\',\'\\");\\n        // \u62fc\u63a5\u63d2\u5165\u8bed\u53e5\\n        String sql = \\"upsert into \\" + GmallConfig.HBASE_SCHEMA\\n                + \\".\\" + sinkTable + \\"(\\" +\\n                columnStr + \\") values (\'\\" + valueStr + \\"\')\\";\\n\\n        // \u4e3a\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u8d4b\u9ed8\u8ba4\u503c\\n        PreparedStatement preparedSt = null;\\n\\n        // \u6267\u884c SQL\\n        try {\\n            System.out.println(\\"\u63d2\u5165\u8bed\u53e5\u4e3a:\\" + sql);\\n            preparedSt = conn.prepareStatement(sql);\\n            preparedSt.execute();\\n            conn.commit();\\n        } catch (SQLException sqlException) {\\n            sqlException.printStackTrace();\\n            throw new RuntimeException(\\"\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u83b7\u53d6\u6216\u6267\u884c\u5f02\u5e38\\");\\n        } finally {\\n            if(preparedSt != null) {\\n                try {\\n                    preparedSt.close();\\n                } catch (SQLException sqlException) {\\n                    sqlException.printStackTrace();\\n                    throw new RuntimeException(\\"\u6570\u636e\u5e93\u64cd\u4f5c\u5bf9\u8c61\u91ca\u653e\u5f02\u5e38\\");\\n                }\\n            }\\n        }\\n}\\n}\\n```\\n4\uff09MyPhoenixSink\\n\\n\\t\u81ea\u5b9a\u4e49 SinkFunction \u5b50\u7c7b MyPhoenixSink\uff0c\u5728\u5176\u4e2d\u8c03\u7528 Phoenix \u5de5\u5177\u7c7b\u7684 insertValues(String sinkTable, JSONObject data) \u65b9\u6cd5\uff0c\u5c06\u7ef4\u5ea6\u6570\u636e\u5199\u51fa\u5230 Phoenix \u7684\u7ef4\u5ea6\u8868\u4e2d\u3002\\n```\\npackage com.atguigu.gmall.realtime.app.func;\\n\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.atguigu.gmall.realtime.util.PhoenixUtil;\\nimport org.apache.flink.streaming.api.functions.sink.SinkFunction;\\n\\npublic class MyPhoenixSink implements SinkFunction<JSONObject> {\\n\\n    @Override\\n    public void invoke(JSONObject jsonObj, Context context) throws Exception {\\n        // \u83b7\u53d6\u76ee\u6807\u8868\u8868\u540d\\n        String sinkTable = jsonObj.getString(\\"sinkTable\\");\\n        // \u6e05\u9664 JSON \u5bf9\u8c61\u4e2d\u7684 sinkTable \u5b57\u6bb5\uff0c\u4ee5\u4fbf\u53ef\u5c06\u8be5\u5bf9\u8c61\u76f4\u63a5\u7528\u4e8e HBase \u8868\u7684\u6570\u636e\u5199\u5165\\n        jsonObj.remove(\\"sinkTable\\");\\n        PhoenixUtil.insertValues(sinkTable, jsonObj);\\n    }\\n}\\n```\\n5\uff09\u4e3b\u7a0b\u5e8f DimSinkApp \u4e2d\u8c03\u7528 MyPhoenixSink\\n```\\n// TODO 9. \u5c06\u6570\u636e\u5199\u5165 Phoenix \u8868\\n        dimDS.addSink(new MyPhoenixSink());\\n```\\n6\uff09\u6d4b\u8bd5\\n\\n\uff081\uff09\u542f\u52a8HDFS\u3001ZK\u3001Kafka\u3001Maxwell\u3001HBase\\n\\n\uff082\uff09\u8fd0\u884c IDEA \u4e2d\u7684 DimSinkApp\\n\\n\uff083\uff09\u6267\u884c mysql_to_kafka_init.sh \u811a\u672c\\n\\nmysql_to_kafka_init.sh all\\n\\n\uff086\uff09\u901a\u8fc7phoenix\u67e5\u770bhbase\u7684schema\u4ee5\u53ca\u8868\u60c5\u51b5\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242537-b7d64239-fd24-4615-af0f-37dc0d4b4245.png)\\n\\n  \\n# \u6570\u4ed3\u5f00\u53d1\u4e4bDWD\u5c42\\n\\nDWD\u5c42\u8bbe\u8ba1\u8981\u70b9\uff1a\\n\\n\uff081\uff09DWD\u5c42\u7684\u8bbe\u8ba1\u4f9d\u636e\u662f\u7ef4\u5ea6\u5efa\u6a21\u7406\u8bba\uff0c\u8be5\u5c42\u5b58\u50a8\u7ef4\u5ea6\u6a21\u578b\u7684\u4e8b\u5b9e\u8868\u3002\\n\\n\uff082\uff09DWD\u5c42\u8868\u540d\u7684\u547d\u540d\u89c4\u8303\u4e3adwd_\u6570\u636e\u57df_\u8868\u540d\\n\\n## \u6d41\u91cf\u57df\u672a\u7ecf\u52a0\u5de5\u7684\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n1\uff09\u6570\u636e\u6e05\u6d17\uff08ETL\uff09\\n\\n\\t\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u90e8\u5206\u6570\u636e\u4e22\u5931\u7684\u60c5\u51b5\uff0c\u5bfc\u81f4 JSON \u6570\u636e\u7ed3\u6784\u4e0d\u518d\u5b8c\u6574\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u810f\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u3002\\n  \\n2\uff09\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\\n\\n\\t\u65e5\u5fd7\u6570\u636e common \u5b57\u6bb5\u4e0b\u7684 is_new \u5b57\u6bb5\u662f\u7528\u6765\u6807\u8bb0\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u7684\uff0c1 \u8868\u793a\u65b0\u8bbf\u5ba2\uff0c2 \u8868\u793a\u8001\u8bbf\u5ba2\u3002\u524d\u7aef\u57cb\u70b9\u91c7\u96c6\u5230\u7684\u6570\u636e\u53ef\u9760\u6027\u65e0\u6cd5\u4fdd\u8bc1\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8001\u8bbf\u5ba2\u88ab\u6807\u8bb0\u4e3a\u65b0\u8bbf\u5ba2\u7684\u95ee\u9898\uff0c\u56e0\u6b64\u9700\u8981\u5bf9\u8be5\u6807\u8bb0\u8fdb\u884c\u4fee\u590d\u3002\\n  \\n3\uff09\u5206\u6d41\\n\\n\\t\u672c\u8282\u5c06\u901a\u8fc7\u5206\u6d41\u5bf9\u65e5\u5fd7\u6570\u636e\u8fdb\u884c\u62c6\u5206\uff0c\u751f\u6210\u4e94\u5f20\u4e8b\u52a1\u4e8b\u5b9e\u8868\u5199\u5165 Kafka\\n  \\n>\\t\u6d41\u91cf\u57df\u9875\u9762\u6d4f\u89c8\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n>\\t\\n>\\t\u6d41\u91cf\u57df\u542f\u52a8\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n>\\t\\n>\\t\u6d41\u91cf\u57df\u52a8\u4f5c\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n>\\t\\n>\\t\u6d41\u91cf\u57df\u66dd\u5149\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n>\\t\\n>\\t\u6d41\u91cf\u57df\u9519\u8bef\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n>\\t\\n### \u601d\u8def\\n\\n1\uff09\u6570\u636e\u6e05\u6d17\uff08ETL\uff09\\n\\n\u5bf9\u6d41\u4e2d\u6570\u636e\u8fdb\u884c\u89e3\u6790\uff0c\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a JSONObject\uff0c\u5982\u679c\u89e3\u6790\u62a5\u9519\u5219\u5fc5\u7136\u4e3a\u810f\u6570\u636e\u3002\u5b9a\u4e49\u4fa7\u8f93\u51fa\u6d41\uff0c\u5c06\u810f\u6570\u636e\u53d1\u9001\u5230\u4fa7\u8f93\u51fa\u6d41\uff0c\u5199\u5165 Kafka \u810f\u6570\u636e\u4e3b\u9898\\n\\n2\uff09\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\\n\\n\uff081\uff09\u524d\u7aef\u57cb\u70b9\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u8bbe\u7f6e\u89c4\u5219\\n\\n\u4ee5\u795e\u7b56\u63d0\u4f9b\u7684\u7b2c\u4e09\u65b9\u57cb\u70b9\u670d\u52a1\u4e2d\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u8bbe\u7f6e\u89c4\u5219\u4e3a\u4f8b\\n\\n>\\t- Web \u7aef\uff1a\u7528\u6237\u7b2c\u4e00\u6b21\u8bbf\u95ee\u57cb\u5165\u795e\u7b56 SDK \u9875\u9762\u7684\u5f53\u5929\uff08\u5373\u7b2c\u4e00\u5929\uff09\uff0cJS SDK \u4f1a\u5728\u7f51\u9875\u7684 cookie \u4e2d\u8bbe\u7f6e\u4e00\u4e2a\u9996\u65e5\u8bbf\u95ee\u7684\u6807\u8bb0\uff0c\u5e76\u8bbe\u7f6e\u7b2c\u4e00\u5929 24 \u70b9\u4e4b\u524d\uff0c\u8be5\u6807\u8bb0\u4e3a true\uff0c\u5373\u7b2c\u4e00\u5929\u89e6\u53d1\u7684\u7f51\u9875\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 1\u3002\\n>\\t\u7b2c\u4e00\u5929\u4e4b\u540e\uff0c\u8be5\u6807\u8bb0\u5219\u4e3a false\uff0c\u5373\u7b2c\u4e00\u5929\u4e4b\u540e\u89e6\u53d1\u7684\u7f51\u9875\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 0\uff1b\\n>\\t\\n>\\t- \u5c0f\u7a0b\u5e8f\u7aef\uff1a\u7528\u6237\u7b2c\u4e00\u5929\u8bbf\u95ee\u57cb\u5165\u795e\u7b56 SDK \u7684\u9875\u9762\u65f6\uff0c\u5c0f\u7a0b\u5e8f SDK \u4f1a\u5728 storage \u7f13\u5b58\u4e2d\u521b\u5efa\u4e00\u4e2a\u9996\u65e5\u4e3a true \u7684\u6807\u8bb0\uff0c\u5e76\u4e14\u8bbe\u7f6e\u7b2c\u4e00\u5929 24 \u70b9\u4e4b\u524d\uff0c\u8be5\u6807\u8bb0\u5747\u4e3a true\u3002\\n>\\t\u5373\u7b2c\u4e00\u5929\u89e6\u53d1\u7684\u5c0f\u7a0b\u5e8f\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 1\u3002\u7b2c\u4e00\u5929\u4e4b\u540e\uff0c\u8be5\u6807\u8bb0\u5219\u4e3a false\uff0c\u5373\u7b2c\u4e00\u5929\u4e4b\u540e\u89e6\u53d1\u7684\u5c0f\u7a0b\u5e8f\u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 0\uff1b\\n>\\t\\n>\\t- APP \u7aef\uff1a\u7528\u6237\u5b89\u88c5 App \u540e\uff0c\u7b2c\u4e00\u6b21\u6253\u5f00\u57cb\u5165\u795e\u7b56 SDK \u7684 App \u7684\u5f53\u5929\uff0cAndroid/iOS SDK \u4f1a\u5728\u624b\u673a\u672c\u5730\u7f13\u5b58\u5185\uff0c\u521b\u5efa\u4e00\u4e2a\u9996\u65e5\u4e3a true \u7684\u6807\u8bb0\uff0c\u5e76\u4e14\u8bbe\u7f6e\u7b2c\u4e00\u5929 24 \u70b9\u4e4b\u524d\uff0c\u8be5\u6807\u8bb0\u5747\u4e3a true\u3002\\n>\\t\u5373\u7b2c\u4e00\u5929\u89e6\u53d1\u7684 APP \u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 1\u3002\u7b2c\u4e00\u5929\u4e4b\u540e\uff0c\u8be5\u6807\u8bb0\u5219\u4e3a false\uff0c\u5373\u7b2c\u4e00\u5929\u4e4b\u540e\u89e6\u53d1\u7684 APP \u7aef\u6240\u6709\u4e8b\u4ef6\u4e2d\uff0cis_new = 0\u3002\\n>\\t\\n\u672c\u9879\u76ee\u6a21\u62df\u751f\u6210\u7684\u662f APP \u7aef\u65e5\u5fd7\u6570\u636e\u3002\u5bf9\u4e8e\u6b64\u7c7b\u65e5\u5fd7\uff0c\u5982\u679c\u9996\u65e5\u4e4b\u540e\u7528\u6237\u6e05\u9664\u4e86\u624b\u673a\u672c\u5730\u7f13\u5b58\u4e2d\u7684\u6807\u8bb0\uff0c\u518d\u6b21\u542f\u52a8 APP \u4f1a\u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e2a\u9996\u65e5\u4e3a true \u7684\u6807\u8bb0\uff0c\u5bfc\u81f4\u672c\u5e94\u4e3a 0 \u7684 is_new \u5b57\u6bb5\u88ab\u7f6e\u4e3a 1\uff0c\u53ef\u80fd\u4f1a\u7ed9\u76f8\u5173\u6307\u6807\u5e26\u6765\u8bef\u5dee\u3002\\n\\n\u56e0\u6b64\uff0c\u6709\u5fc5\u8981\u5bf9\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u8fdb\u884c\u4fee\u590d\u3002\\n\\n\uff082\uff09\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\u601d\u8def\\n\\n\u8fd0\u7528 Flink \u72b6\u6001\u7f16\u7a0b\uff0c\u4e3a\u6bcf\u4e2a mid \u7ef4\u62a4\u4e00\u4e2a\u952e\u63a7\u72b6\u6001\uff0c\u8bb0\u5f55\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u3002\\n\\n\u2460\u5982\u679c is_new \u7684\u503c\u4e3a 1\\n\\na\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e3a null\uff0c\u8ba4\u4e3a\u672c\u6b21\u662f\u8be5\u8bbf\u5ba2\u9996\u6b21\u8bbf\u95ee APP\uff0c\u5c06\u65e5\u5fd7\u4e2d ts \u5bf9\u5e94\u7684\u65e5\u671f\u66f4\u65b0\u5230\u72b6\u6001\u4e2d\uff0c\u4e0d\u5bf9 is_new \u5b57\u6bb5\u505a\u4fee\u6539\uff1b\\n\\nb\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e0d\u4e3a null\uff0c\u4e14\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u4e0d\u662f\u5f53\u65e5\uff0c\u8bf4\u660e\u8bbf\u95ee\u7684\u662f\u8001\u8bbf\u5ba2\uff0c\u5c06 is_new \u5b57\u6bb5\u7f6e\u4e3a 0\uff1b\\n\\nc\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e0d\u4e3a null\uff0c\u4e14\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u662f\u5f53\u65e5\uff0c\u8bf4\u660e\u8bbf\u95ee\u7684\u662f\u65b0\u8bbf\u5ba2\uff0c\u4e0d\u505a\u64cd\u4f5c\uff1b\\n\\n\u2461\u5982\u679c is_new \u7684\u503c\u4e3a 0\\n\\na\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e3a null\uff0c\u8bf4\u660e\u8bbf\u95ee APP \u7684\u662f\u8001\u8bbf\u5ba2\u4f46\u672c\u6b21\u662f\u8be5\u8bbf\u5ba2\u7684\u9875\u9762\u65e5\u5fd7\u9996\u6b21\u8fdb\u5165\u7a0b\u5e8f\u3002\u5f53\u524d\u7aef\u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4e22\u5931\u65f6\uff0c\u65e5\u5fd7\u8fdb\u5165\u7a0b\u5e8f\u88ab\u5224\u5b9a\u4e3a\u8001\u8bbf\u5ba2\uff0cFlink \u7a0b\u5e8f\u5c31\u53ef\u4ee5\u7ea0\u6b63\u88ab\u8bef\u5224\u7684\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\uff0c\u53ea\u8981\u5c06\u72b6\u6001\u4e2d\u7684\u65e5\u671f\u8bbe\u7f6e\u4e3a\u4eca\u5929\u4e4b\u524d\u5373\u53ef\u3002\u672c\u7a0b\u5e8f\u9009\u62e9\u5c06\u72b6\u6001\u66f4\u65b0\u4e3a\u6628\u65e5\uff1b\\n\\nb\uff09\u5982\u679c\u952e\u63a7\u72b6\u6001\u4e0d\u4e3a null\uff0c\u8bf4\u660e\u7a0b\u5e8f\u5df2\u7ecf\u7ef4\u62a4\u4e86\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\uff0c\u4e0d\u505a\u64cd\u4f5c\u3002\\n\\n3\uff09\u5229\u7528\u4fa7\u8f93\u51fa\u6d41\u5b9e\u73b0\u6570\u636e\u62c6\u5206\\n\\n\uff081\uff09\u57cb\u70b9\u65e5\u5fd7\u7ed3\u6784\u5206\u6790\\n\\n\u524d\u7aef\u57cb\u70b9\u83b7\u53d6\u7684 JSON \u5b57\u7b26\u4e32\uff08\u65e5\u5fd7\uff09\u53ef\u80fd\u5b58\u5728 common\u3001start\u3001page\u3001displays\u3001actions\u3001err \u516d\u79cd\u5b57\u6bb5\u3002\u5176\u4e2d\\n\\n-\\tcommon \u5bf9\u5e94\u7684\u662f\u516c\u5171\u4fe1\u606f\uff0c\u662f\u6240\u6709\u65e5\u5fd7\u90fd\u6709\u7684\u5b57\u6bb5\\n-\\terr \u5bf9\u5e94\u7684\u662f\u9519\u8bef\u4fe1\u606f\uff0c\u6240\u6709\u65e5\u5fd7\u90fd\u53ef\u80fd\u6709\u7684\u5b57\u6bb5\\n-\\tstart \u5bf9\u5e94\u7684\u662f\u542f\u52a8\u4fe1\u606f\uff0c\u542f\u52a8\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5\\n-\\tpage \u5bf9\u5e94\u7684\u662f\u9875\u9762\u4fe1\u606f\uff0c\u9875\u9762\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5\\n-\\tdisplays \u5bf9\u5e94\u7684\u662f\u66dd\u5149\u4fe1\u606f\uff0c\u66dd\u5149\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5\uff0c\u66dd\u5149\u65e5\u5fd7\u53ef\u4ee5\u5f52\u4e3a\u9875\u9762\u65e5\u5fd7\uff0c\u56e0\u6b64\u5fc5\u7136\u6709 page \u5b57\u6bb5\\n-\\tactions \u5bf9\u5e94\u7684\u662f\u52a8\u4f5c\u4fe1\u606f\uff0c\u52a8\u4f5c\u65e5\u5fd7\u624d\u6709\u7684\u5b57\u6bb5\uff0c\u540c\u6837\u5c5e\u4e8e\u9875\u9762\u65e5\u5fd7\uff0c\u5fc5\u7136\u6709 page \u5b57\u6bb5\u3002\u52a8\u4f5c\u4fe1\u606f\u548c\u66dd\u5149\u4fe1\u606f\u53ef\u4ee5\u540c\u65f6\u5b58\u5728\u3002\\n-\\tts \u5bf9\u5e94\u7684\u662f\u65f6\u95f4\u6233\uff0c\u5355\u4f4d\uff1a\u6beb\u79d2\uff0c\u6240\u6709\u65e5\u5fd7\u90fd\u6709\u7684\u5b57\u6bb5\\n\\n\u7efc\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u524d\u7aef\u57cb\u70b9\u83b7\u53d6\u7684\u65e5\u5fd7\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a\u542f\u52a8\u65e5\u5fd7\u548c\u9875\u9762\u65e5\u5fd7\u3002\\n\\n\u4e8c\u8005\u90fd\u6709 common \u5b57\u6bb5\u548c ts \u5b57\u6bb5\uff0c\u90fd\u53ef\u80fd\u6709 err \u5b57\u6bb5\u3002\u9875\u9762\u65e5\u5fd7\u4e00\u5b9a\u6709 page \u5b57\u6bb5\uff0c\u4e00\u5b9a\u6ca1\u6709 start \u5b57\u6bb5\uff0c\u53ef\u80fd\u6709 displays \u548c actions \u5b57\u6bb5\uff1b\\n\\n\u542f\u52a8\u65e5\u5fd7\u4e00\u5b9a\u6709 start \u5b57\u6bb5\uff0c\u4e00\u5b9a\u6ca1\u6709 page\u3001displays \u548c actions \u5b57\u6bb5\u3002\\n\\n\uff082\uff09\u5206\u6d41\u65e5\u5fd7\u5206\u7c7b\\n\\n\u672c\u8282\u5c06\u6309\u7167\u5185\u5bb9\uff0c\u5c06\u65e5\u5fd7\u5206\u4e3a\u4ee5\u4e0b\u4e94\u7c7b\\n-\\t\u542f\u52a8\u65e5\u5fd7\\n-\\t\u9875\u9762\u65e5\u5fd7\\n-\\t\u66dd\u5149\u65e5\u5fd7\\n-\\t\u52a8\u4f5c\u65e5\u5fd7\\n-\\t\u9519\u8bef\u65e5\u5fd7\\n\uff083\uff09\u5206\u6d41\u601d\u8def\\n\\n\u2460\u6240\u6709\u65e5\u5fd7\u6570\u636e\u90fd\u53ef\u80fd\u62e5\u6709 err \u5b57\u6bb5\uff0c\u6240\u6709\u9996\u5148\u83b7\u53d6 err \u5b57\u6bb5\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e0d\u4e3a null \u5219\u5c06\u6574\u6761\u65e5\u5fd7\u6570\u636e\u53d1\u9001\u5230\u9519\u8bef\u4fa7\u8f93\u51fa\u6d41\u3002\u7136\u540e\u5220\u6389 JSONObject \u4e2d\u7684 err \u5b57\u6bb5\u53ca\u5bf9\u5e94\u503c\uff1b\\n\\n\u2461\u5224\u65ad\u662f\u5426\u6709 start \u5b57\u6bb5\uff0c\u5982\u679c\u6709\u5219\u8bf4\u660e\u6570\u636e\u4e3a\u542f\u52a8\u65e5\u5fd7\uff0c\u5c06\u5176\u53d1\u9001\u5230\u542f\u52a8\u4fa7\u8f93\u51fa\u6d41\uff1b\u5982\u679c\u6ca1\u6709\u5219\u8bf4\u660e\u4e3a\u9875\u9762\u65e5\u5fd7\uff0c\u8fdb\u884c\u4e0b\u4e00\u6b65\uff1b\\n\\n\u2462\u9875\u9762\u65e5\u5fd7\u5fc5\u7136\u6709 page \u5b57\u6bb5\u3001 common \u5b57\u6bb5\u548c ts \u5b57\u6bb5\uff0c\u83b7\u53d6\u5b83\u4eec\u7684\u503c\uff0cts \u5c01\u88c5\u4e3a\u5305\u88c5\u7c7b Long\uff0c\u5176\u4f59\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u5c01\u88c5\u4e3a JSONObject\uff1b\\n\\n\u2463\u5224\u65ad\u662f\u5426\u6709 displays \u5b57\u6bb5\uff0c\u5982\u679c\u6709\uff0c\u5c06\u5176\u503c\u5c01\u88c5\u4e3a JSONArray\uff0c\u904d\u5386\u8be5\u6570\u7ec4\uff0c\u4f9d\u6b21\u83b7\u53d6\u6bcf\u4e2a\u5143\u7d20\uff08\u8bb0\u4e3a display\uff09\uff0c\u5c01\u88c5\u4e3aJSONObject\u3002\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 JSONObject\uff0c\u5c06 display\u3001common\u3001page\u548c ts \u6dfb\u52a0\u5230\u8be5\u5bf9\u8c61\u4e2d\uff0c\u83b7\u5f97\u5904\u7406\u597d\u7684\u66dd\u5149\u6570\u636e\uff0c\u53d1\u9001\u5230\u66dd\u5149\u4fa7\u8f93\u51fa\u6d41\u3002\u52a8\u4f5c\u65e5\u5fd7\u7684\u5904\u7406\u4e0e\u66dd\u5149\u65e5\u5fd7\u76f8\u540c\uff08\u6ce8\u610f\uff1a\u4e00\u6761\u9875\u9762\u65e5\u5fd7\u53ef\u80fd\u65e2\u6709\u66dd\u5149\u6570\u636e\u53c8\u6709\u52a8\u4f5c\u6570\u636e\uff0c\u4e8c\u8005\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u56e0\u6b64\u66dd\u5149\u6570\u636e\u4e0d\u4e3a null \u65f6\u4ecd\u8981\u5bf9\u52a8\u4f5c\u6570\u636e\u8fdb\u884c\u5904\u7406\uff09\uff1b\\n\\n\u2464\u52a8\u4f5c\u65e5\u5fd7\u548c\u66dd\u5149\u65e5\u5fd7\u5904\u7406\u7ed3\u675f\u540e\u5220\u9664 displays \u548c actions \u5b57\u6bb5\uff0c\u6b64\u65f6\u4e3b\u6d41\u7684 JSONObject \u4e2d\u53ea\u6709 common \u5b57\u6bb5\u3001 page \u5b57\u6bb5\u548c ts \u5b57\u6bb5\uff0c\u5373\u4e3a\u6700\u7ec8\u7684\u9875\u9762\u65e5\u5fd7\u3002\\n\\n\\t\u5904\u7406\u7ed3\u675f\u540e\uff0c\u9875\u9762\u65e5\u5fd7\u6570\u636e\u4f4d\u4e8e\u4e3b\u6d41\uff0c\u5176\u4f59\u56db\u79cd\u65e5\u5fd7\u5206\u522b\u4f4d\u4e8e\u5bf9\u5e94\u7684\u4fa7\u8f93\u51fa\u6d41\uff0c\u5c06\u4e94\u6761\u6d41\u7684\u6570\u636e\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u5373\u53ef\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242565-609d3749-447a-454f-880a-aad215e3763f.png)\\n\\n### \u4ee3\u7801\\n1\uff09\u5728 KafkaUtil \u5de5\u5177\u7c7b\u4e2d\u8865\u5145 getKafkaProducer() \u65b9\u6cd5\\n```\\npublic static FlinkKafkaProducer<String> getKafkaProducer(String topic) {\\n\\n        Properties prop = new Properties();\\n        prop.setProperty(\\"bootstrap.servers\\", BOOTSTRAP_SERVERS);\\n        prop.setProperty(ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, 60 * 15 * 1000 + \\"\\");\\n        FlinkKafkaProducer<String> producer = new FlinkKafkaProducer<String>(DEFAULT_TOPIC, new KafkaSerializationSchema<String>() {\\n\\n            @Override\\n            public ProducerRecord<byte[], byte[]> serialize(String jsonStr, @Nullable Long timestamp) {\\n                return new ProducerRecord<byte[], byte[]>(topic, jsonStr.getBytes());\\n            }\\n        }, prop,\\n                FlinkKafkaProducer.Semantic.EXACTLY_ONCE);\\n        return producer;\\n    }\\n ```\\n2\uff09\u521b\u5efa DateFormatUtil \u5de5\u5177\u7c7b\u7528\u4e8e\u65e5\u671f\u683c\u5f0f\u5316\\n```\\npackage com.atguigu.gmall.realtime.util;\\n\\nimport java.time.LocalDateTime;\\nimport java.time.LocalTime;\\nimport java.time.ZoneId;\\nimport java.time.ZoneOffset;\\nimport java.time.format.DateTimeFormatter;\\nimport java.util.Date;\\n\\npublic class DateFormatUtil {\\n\\n    private static final DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\\"yyyy-MM-dd\\");\\n    private static final DateTimeFormatter dtfFull = DateTimeFormatter.ofPattern(\\"yyyy-MM-dd HH:mm:ss\\");\\n\\n    public static Long toTs(String dtStr, boolean isFull) {\\n        \\n        LocalDateTime localDateTime = null;\\n        if (!isFull) {\\n            dtStr = dtStr + \\" 00:00:00\\";\\n        }\\n        localDateTime = LocalDateTime.parse(dtStr, dtfFull);\\n\\n        return localDateTime.toInstant(ZoneOffset.of(\\"+8\\")).toEpochMilli();\\n    }\\n\\n    public static Long toTs(String dtStr) {\\n        return toTs(dtStr, false);\\n    }\\n\\n    public static String toDate(Long ts) {\\n        Date dt = new Date(ts);\\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());\\n        return dtf.format(localDateTime);\\n    }\\n\\n    public static String toYmdHms(Long ts) {\\n        Date dt = new Date(ts);\\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(dt.toInstant(), ZoneId.systemDefault());\\n        return dtfFull.format(localDateTime);\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(toYmdHms(System.currentTimeMillis()));\\n    }\\n}\\n```\\n3\uff09\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.log;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONArray;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.atguigu.gmall.realtime.util.DateFormatUtil;\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.state.ValueState;\\nimport org.apache.flink.api.common.state.ValueStateDescriptor;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.configuration.Configuration;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\\nimport org.apache.flink.streaming.api.datastream.KeyedStream;\\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.streaming.api.functions.KeyedProcessFunction;\\nimport org.apache.flink.streaming.api.functions.ProcessFunction;\\nimport org.apache.flink.util.Collector;\\nimport org.apache.flink.util.OutputTag;\\n\\nimport java.util.concurrent.TimeUnit;\\n\\npublic class BaseLogApp {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u521d\u59cb\u5316\u73af\u5883\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n\\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies\\n                .failureRateRestart(10,\\n                        Time.of(3L, TimeUnit.DAYS),\\n                        Time.of(1L, TimeUnit.MINUTES)));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/gmall/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e3b\u6d41\u6570\u636e\\n        String topic = \\"topic_log\\";\\n        String groupId = \\"base_log_consumer\\";\\n        DataStreamSource<String> source = env.addSource(KafkaUtil.getKafkaConsumer(topic, groupId));\\n\\n        // TODO 4. \u6570\u636e\u6e05\u6d17\uff0c\u8f6c\u6362\u7ed3\u6784\\n        // 4.1 \u5b9a\u4e49\u9519\u8bef\u4fa7\u8f93\u51fa\u6d41\\n        OutputTag<String> dirtyStreamTag = new OutputTag<String>(\\"dirtyStream\\") {\\n        };\\n        SingleOutputStreamOperator<String> cleanedStream = source.process(\\n                new ProcessFunction<String, String>() {\\n                    @Override\\n                    public void processElement(String jsonStr, Context ctx, Collector<String> out) throws Exception {\\n                        try {\\n                            JSONObject jsonObj = JSON.parseObject(jsonStr);\\n                            out.collect(jsonStr);\\n                        } catch (Exception e) {\\n                            ctx.output(dirtyStreamTag, jsonStr);\\n                        }\\n                    }\\n                }\\n        );\\n\\n        // 4.2 \u5c06\u810f\u6570\u636e\u5199\u51fa\u5230 Kafka \u6307\u5b9a\u4e3b\u9898\\n        DataStream<String> dirtyStream = cleanedStream.getSideOutput(dirtyStreamTag);\\n        String dirtyTopic = \\"dirty_data\\";\\n        dirtyStream.addSink(KafkaUtil.getKafkaProducer(dirtyTopic));\\n\\n        // 4.3 \u8f6c\u6362\u4e3b\u6d41\u6570\u636e\u7ed3\u6784 jsonStr -> jsonObj\\n        SingleOutputStreamOperator<JSONObject> mappedStream = cleanedStream.map(JSON::parseObject);\\n\\n        // TODO 5. \u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\\n        // 5.1 \u6309\u7167 mid \u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7ec4\\n        KeyedStream<JSONObject, String> keyedStream = mappedStream.keyBy(r -> r.getJSONObject(\\"common\\").getString(\\"mid\\"));\\n\\n        // 5.2 \u65b0\u8001\u8bbf\u5ba2\u72b6\u6001\u6807\u8bb0\u4fee\u590d\\n        SingleOutputStreamOperator<JSONObject> fixedStream = keyedStream.process(\\n                new KeyedProcessFunction<String, JSONObject, JSONObject>() {\\n\\n                    ValueState<String> firstViewDtState;\\n\\n                    @Override\\n                    public void open(Configuration param) throws Exception {\\n                        super.open(param);\\n                        firstViewDtState = getRuntimeContext().getState(new ValueStateDescriptor<String>(\\n                                \\"lastLoginDt\\", String.class\\n                        ));\\n                    }\\n\\n                    @Override\\n                    public void processElement(JSONObject jsonObj, Context ctx, Collector<JSONObject> out) throws Exception {\\n                        String isNew = jsonObj.getJSONObject(\\"common\\").getString(\\"is_new\\");\\n                        String firstViewDt = firstViewDtState.value();\\n                        Long ts = jsonObj.getLong(\\"ts\\");\\n                        String dt = DateFormatUtil.toDate(ts);\\n\\n                        if (\\"1\\".equals(isNew)) {\\n                            if (firstViewDt == null) {\\n                                firstViewDtState.update(dt);\\n                            } else {\\n                                if (!firstViewDt.equals(dt)) {\\n                                    isNew = \\"0\\";\\n                                    jsonObj.getJSONObject(\\"common\\").put(\\"is_new\\", isNew);\\n                                }\\n                            }\\n                        } else {\\n                            if (firstViewDt == null) {\\n                                // \u5c06\u9996\u6b21\u8bbf\u95ee\u65e5\u671f\u7f6e\u4e3a\u6628\u65e5\\n                                String yesterday = DateFormatUtil.toDate(ts - 1000 * 60 * 60 * 24);\\n                                firstViewDtState.update(yesterday);\\n                            }\\n                        }\\n\\n                        out.collect(jsonObj);\\n                    }\\n                }\\n        );\\n\\n        // TODO 6. \u5206\u6d41\\n        // 6.1 \u5b9a\u4e49\u542f\u52a8\u3001\u66dd\u5149\u3001\u52a8\u4f5c\u3001\u9519\u8bef\u4fa7\u8f93\u51fa\u6d41\\n        OutputTag<String> startTag = new OutputTag<String>(\\"startTag\\") {\\n        };\\n        OutputTag<String> displayTag = new OutputTag<String>(\\"displayTag\\") {\\n        };\\n        OutputTag<String> actionTag = new OutputTag<String>(\\"actionTag\\") {\\n        };\\n        OutputTag<String> errorTag = new OutputTag<String>(\\"errorTag\\") {\\n        };\\n\\n        // 6.2 \u5206\u6d41\\n        SingleOutputStreamOperator<String> separatedStream = fixedStream.process(\\n                new ProcessFunction<JSONObject, String>() {\\n                    @Override\\n                    public void processElement(JSONObject jsonObj, Context context, Collector<String> out) throws Exception {\\n\\n                        // 6.2.1 \u6536\u96c6\u9519\u8bef\u6570\u636e\\n                        JSONObject error = jsonObj.getJSONObject(\\"err\\");\\n                        if (error != null) {\\n                            context.output(errorTag, jsonObj.toJSONString());\\n                        }\\n\\n                        // \u5254\u9664 \\"err\\" \u5b57\u6bb5\\n                        jsonObj.remove(\\"err\\");\\n\\n                        // 6.2.2 \u6536\u96c6\u542f\u52a8\u6570\u636e\\n                        JSONObject start = jsonObj.getJSONObject(\\"start\\");\\n                        if (start != null) {\\n                            context.output(startTag, jsonObj.toJSONString());\\n                        } else {\\n                            // \u83b7\u53d6 \\"page\\" \u5b57\u6bb5\\n                            JSONObject page = jsonObj.getJSONObject(\\"page\\");\\n                            // \u83b7\u53d6 \\"common\\" \u5b57\u6bb5\\n                            JSONObject common = jsonObj.getJSONObject(\\"common\\");\\n                            // \u83b7\u53d6 \\"ts\\"\\n                            Long ts = jsonObj.getLong(\\"ts\\");\\n\\n                            // 6.2.3 \u6536\u96c6\u66dd\u5149\u6570\u636e\\n                            JSONArray displays = jsonObj.getJSONArray(\\"displays\\");\\n                            if (displays != null) {\\n                                for (int i = 0; i < displays.size(); i++) {\\n                                    JSONObject display = displays.getJSONObject(i);\\n                                    JSONObject displayObj = new JSONObject();\\n                                    displayObj.put(\\"display\\", display);\\n                                    displayObj.put(\\"common\\", common);\\n                                    displayObj.put(\\"page\\", page);\\n                                    displayObj.put(\\"ts\\", ts);\\n                                    context.output(displayTag, displayObj.toJSONString());\\n                                }\\n                            }\\n\\n                            // 6.2.4 \u6536\u96c6\u52a8\u4f5c\u6570\u636e\\n                            JSONArray actions = jsonObj.getJSONArray(\\"actions\\");\\n                            if (actions != null) {\\n                                for (int i = 0; i < actions.size(); i++) {\\n                                    JSONObject action = actions.getJSONObject(i);\\n                                    JSONObject actionObj = new JSONObject();\\n                                    actionObj.put(\\"action\\", action);\\n                                    actionObj.put(\\"common\\", common);\\n                                    actionObj.put(\\"page\\", page);\\n                                    actionObj.put(\\"ts\\", ts);\\n                                    context.output(actionTag, actionObj.toJSONString());\\n                                }\\n                            }\\n\\n                            // 6.2.5 \u6536\u96c6\u9875\u9762\u6570\u636e\\n                            jsonObj.remove(\\"displays\\");\\n                            jsonObj.remove(\\"actions\\");\\n                            out.collect(jsonObj.toJSONString());\\n                        }\\n\\n                    }\\n                }\\n        );\\n\\n        // \u6253\u5370\u4e3b\u6d41\u548c\u5404\u4fa7\u8f93\u51fa\u6d41\u67e5\u770b\u5206\u6d41\u6548\u679c\\n//        separatedStream.print(\\"page>>>\\");\\n//        separatedStream.getSideOutput(startTag).print(\\"start!!!\\");\\n//        separatedStream.getSideOutput(displayTag).print(\\"display@@@\\");\\n//        separatedStream.getSideOutput(actionTag).print(\\"action###\\");\\n//        separatedStream.getSideOutput(errorTag).print(\\"error$$$\\");\\n\\n        // TODO 7. \u5c06\u6570\u636e\u8f93\u51fa\u5230 Kafka \u7684\u4e0d\u540c\u4e3b\u9898\\n        // 7.1 \u63d0\u53d6\u5404\u4fa7\u8f93\u51fa\u6d41\\n        DataStream<String> startDS = separatedStream.getSideOutput(startTag);\\n        DataStream<String> displayDS = separatedStream.getSideOutput(displayTag);\\n        DataStream<String> actionDS = separatedStream.getSideOutput(actionTag);\\n        DataStream<String> errorDS = separatedStream.getSideOutput(errorTag);\\n\\n        // 7.2 \u5b9a\u4e49\u4e0d\u540c\u65e5\u5fd7\u8f93\u51fa\u5230 Kafka \u7684\u4e3b\u9898\u540d\u79f0\\n        String page_topic = \\"dwd_traffic_page_log\\";\\n        String start_topic = \\"dwd_traffic_start_log\\";\\n        String display_topic = \\"dwd_traffic_display_log\\";\\n        String action_topic = \\"dwd_traffic_action_log\\";\\n        String error_topic = \\"dwd_traffic_error_log\\";\\n\\n        separatedStream.addSink(KafkaUtil.getKafkaProducer(page_topic));\\n        startDS.addSink(KafkaUtil.getKafkaProducer(start_topic));\\n        displayDS.addSink(KafkaUtil.getKafkaProducer(display_topic));\\n        actionDS.addSink(KafkaUtil.getKafkaProducer(action_topic));\\n        errorDS.addSink(KafkaUtil.getKafkaProducer(error_topic));\\n\\n        env.execute();\\n    }\\n}\\n```\\n## \u6d41\u91cf\u57df\u72ec\u7acb\u8bbf\u5ba2\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u8fc7\u6ee4\u9875\u9762\u6570\u636e\u4e2d\u7684\u72ec\u7acb\u8bbf\u5ba2\u8bbf\u95ee\u8bb0\u5f55\u3002\\n  \\n### \u601d\u8def\u5206\u6790\\n1\uff09\u8fc7\u6ee4 last_page_id \u4e0d\u4e3a null \u7684\u6570\u636e\\n\\n\\t\u72ec\u7acb\u8bbf\u5ba2\u6570\u636e\u5bf9\u5e94\u7684\u9875\u9762\u5fc5\u7136\u662f\u4f1a\u8bdd\u8d77\u59cb\u9875\u9762\uff0clast_page_id \u5fc5\u4e3a null\u3002\u8fc7\u6ee4 last_page_id != null \u7684\u6570\u636e\uff0c\u51cf\u5c0f\u6570\u636e\u91cf\uff0c\u63d0\u5347\u8ba1\u7b97\u6548\u7387\u3002\\n  \\n2\uff09\u7b5b\u9009\u72ec\u7acb\u8bbf\u5ba2\u8bb0\u5f55\\n\\n\\t\u8fd0\u7528 Flink \u72b6\u6001\u7f16\u7a0b\uff0c\u4e3a\u6bcf\u4e2a mid \u7ef4\u62a4\u4e00\u4e2a\u952e\u63a7\u72b6\u6001\uff0c\u8bb0\u5f55\u672b\u6b21\u767b\u5f55\u65e5\u671f\u3002\\n  \\n\\t\u5982\u679c\u672b\u6b21\u767b\u5f55\u65e5\u671f\u4e3a null \u6216\u8005\u4e0d\u662f\u4eca\u65e5\uff0c\u5219\u672c\u6b21\u8bbf\u95ee\u662f\u8be5 mid \u5f53\u65e5\u9996\u6b21\u8bbf\u95ee\uff0c\u4fdd\u7559\u6570\u636e\uff0c\u5c06\u672b\u6b21\u767b\u5f55\u65e5\u671f\u66f4\u65b0\u4e3a\u5f53\u65e5\u3002\u5426\u5219\u4e0d\u662f\u5f53\u65e5\u9996\u6b21\u8bbf\u95ee\uff0c\u4e22\u5f03\u6570\u636e\u3002\\n  \\n3\uff09\u72b6\u6001\u5b58\u6d3b\u65f6\u95f4\u8bbe\u7f6e\\n\\n\\t\u5982\u679c\u4fdd\u7559\u72b6\u6001\uff0c\u7b2c\u4e8c\u65e5\u540c\u4e00 mid \u518d\u6b21\u8bbf\u95ee\u65f6\u4f1a\u88ab\u5224\u5b9a\u4e3a\u65b0\u8bbf\u5ba2\uff0c\u5982\u679c\u6e05\u7a7a\u72b6\u6001\uff0c\u5224\u5b9a\u7ed3\u679c\u76f8\u540c\uff0c\u6240\u4ee5\u53ea\u8981\u65f6\u949f\u8fdb\u5165\u7b2c\u4e8c\u65e5\u72b6\u6001\u5c31\u53ef\u4ee5\u6e05\u7a7a\u3002\\n  \\n\u8bbe\u7f6e\u72b6\u6001\u7684 TTL \u4e3a 1 \u5929\uff0c\u66f4\u65b0\u6a21\u5f0f\u4e3a OnCreateAndWrite\uff0c\u8868\u793a\u5728\u521b\u5efa\u548c\u66f4\u65b0\u72b6\u6001\u65f6\u91cd\u7f6e\u72b6\u6001\u5b58\u6d3b\u65f6\u95f4\u3002\\n\\n\u5982\uff1a2022-02-21 08:00:00 \u9996\u6b21\u8bbf\u95ee\uff0c\u82e5 2022-02-22 \u6ca1\u6709\u8bbf\u95ee\u8bb0\u5f55\uff0c\u5219 2022-02-22 08:00:00 \u4e4b\u540e\u72b6\u6001\u6e05\u7a7a\u3002\\n\\n### \u56fe\u89e3\\n\\n  ![img](https://user-images.githubusercontent.com/34996528/167242617-99e9fac8-1ce0-480b-aeda-6166a13aa3bc.png)\\n\\n### \u4ee3\u7801\\n\\n1\uff09\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.log;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.atguigu.gmall.realtime.util.DateFormatUtil;\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.functions.MapFunction;\\nimport org.apache.flink.api.common.functions.RichFilterFunction;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.state.StateTtlConfig;\\nimport org.apache.flink.api.common.state.ValueState;\\nimport org.apache.flink.api.common.state.ValueStateDescriptor;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.configuration.Configuration;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\\nimport org.apache.flink.streaming.api.datastream.KeyedStream;\\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;\\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;\\n\\npublic class DwdTrafficUniqueVisitorDetail {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(30 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece kafka dwd_traffic_page_log \u4e3b\u9898\u8bfb\u53d6\u65e5\u5fd7\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u6d41\\n        String topic = \\"dwd_traffic_page_log\\";\\n        String groupId = \\"dwd_traffic_user_jump_detail\\";\\n        FlinkKafkaConsumer<String> kafkaConsumer = KafkaUtil.getKafkaConsumer(topic, groupId);\\n        DataStreamSource<String> pageLog = env.addSource(kafkaConsumer);\\n\\n        // TODO 4. \u8f6c\u6362\u7ed3\u6784\\n        SingleOutputStreamOperator<JSONObject> mappedStream = pageLog.map(JSON::parseObject);\\n\\n        // TODO 5. \u8fc7\u6ee4 last_page_id \u4e0d\u4e3a null \u7684\u6570\u636e\\n        SingleOutputStreamOperator<JSONObject> firstPageStream = mappedStream.filter(\\n                jsonObj -> jsonObj\\n                        .getJSONObject(\\"page\\")\\n                        .getString(\\"last_page_id\\") == null\\n        );\\n\\n        // TODO 6. \u6309\u7167 mid \u5206\u7ec4\\n        KeyedStream<JSONObject, String> keyedStream = firstPageStream\\n                .keyBy(jsonObj -> jsonObj.getJSONObject(\\"common\\").getString(\\"mid\\"));\\n\\n        // TODO 7. \u901a\u8fc7 Flink \u72b6\u6001\u7f16\u7a0b\u8fc7\u6ee4\u72ec\u7acb\u8bbf\u5ba2\u8bb0\u5f55\\n        SingleOutputStreamOperator<JSONObject> filteredStream = keyedStream.filter(\\n                new RichFilterFunction<JSONObject>() {\\n\\n                    private ValueState<String> lastVisitDt;\\n\\n                    @Override\\n                    public void open(Configuration paramenters) throws Exception {\\n                        super.open(paramenters);\\n                        ValueStateDescriptor<String> valueStateDescriptor =\\n                                new ValueStateDescriptor<>(\\"last_visit_dt\\", String.class);\\n                        valueStateDescriptor.enableTimeToLive(\\n                                StateTtlConfig\\n                                        .newBuilder(Time.days(1L))\\n                                        // \u8bbe\u7f6e\u5728\u521b\u5efa\u548c\u66f4\u65b0\u72b6\u6001\u65f6\u66f4\u65b0\u5b58\u6d3b\u65f6\u95f4\\n                                        .setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite)\\n                                        .build()\\n                        );\\n                        lastVisitDt = getRuntimeContext().getState(valueStateDescriptor);\\n                    }\\n\\n                    @Override\\n                    public boolean filter(JSONObject jsonObj) throws Exception {\\n                        String visitDt = DateFormatUtil.toDate(jsonObj.getLong(\\"ts\\"));\\n                        String lastDt = lastVisitDt.value();\\n                        if (lastDt == null || !lastDt.equals(visitDt)) {\\n                            lastVisitDt.update(visitDt);\\n                            return true;\\n                        }\\n                        return false;\\n                    }\\n                }\\n        );\\n\\n        // TODO 8. \u5c06\u72ec\u7acb\u8bbf\u5ba2\u6570\u636e\u5199\u5165\\n        // Kafka dwd_traffic_unique_visitor_detail \u4e3b\u9898\\n        String targetTopic = \\"dwd_traffic_unique_visitor_detail\\";\\n        FlinkKafkaProducer<String> kafkaProducer = KafkaUtil.getKafkaProducer(targetTopic);\\n        filteredStream.map(JSONAware::toJSONString).addSink(kafkaProducer);\\n\\n        // TODO 9. \u542f\u52a8\u4efb\u52a1\\n        env.execute();\\n    }\\n}\\n```\\n## \u6d41\u91cf\u57df\u7528\u6237\u8df3\u51fa\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u8fc7\u6ee4\u7528\u6237\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002\\n  \\n### \u601d\u8def\u5206\u6790\\n\\n1\uff09\u7b5b\u9009\u7b56\u7565\\n\\n\u8df3\u51fa\u662f\u6307\u4f1a\u8bdd\u4e2d\u53ea\u6709\u4e00\u4e2a\u9875\u9762\u7684\u8bbf\u95ee\u884c\u4e3a\uff0c\u5982\u679c\u80fd\u83b7\u53d6\u4f1a\u8bdd\u7684\u6240\u6709\u9875\u9762\uff0c\u53ea\u8981\u7b5b\u9009\u9875\u9762\u6570\u4e3a 1 \u7684\u4f1a\u8bdd\u5373\u53ef\u83b7\u53d6\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002\\n\\n\uff081\uff09\u79bb\u7ebf\u6570\u4ed3\u4e2d\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4e00\u6574\u5929\u7684\u6570\u636e\uff0c\u7ed3\u5408\u8bbf\u95ee\u65f6\u95f4\u3001page_id \u548c last_page_id \u5b57\u6bb5\u5bf9\u6574\u4f53\u6570\u636e\u96c6\u505a\u5904\u7406\u53ef\u4ee5\u6309\u7167\u4f1a\u8bdd\u5bf9\u9875\u9762\u65e5\u5fd7\u8fdb\u884c\u5212\u5206\uff0c\u4ece\u800c\u83b7\u5f97\u6bcf\u4e2a\u4f1a\u8bdd\u7684\u9875\u9762\u6570\uff0c\u53ea\u8981\u7b5b\u9009\u9875\u9762\u6570\u4e3a 1 \u7684\u4f1a\u8bdd\u5373\u53ef\u63d0\u53d6\u8df3\u51fa\u660e\u7ec6\u6570\u636e\uff1b\\n\\n\uff082\uff09\u5b9e\u65f6\u8ba1\u7b97\u4e2d\u65e0\u6cd5\u8003\u8651\u6574\u4f53\u6570\u636e\u96c6\uff0c\u5f88\u96be\u6309\u7167\u4f1a\u8bdd\u5bf9\u9875\u9762\u8bbf\u95ee\u8bb0\u5f55\u8fdb\u884c\u5212\u5206\u3002\u800c\u672c\u9879\u76ee\u6a21\u62df\u751f\u6210\u7684\u65e5\u5fd7\u6570\u636e\u4e2d\u6ca1\u6709 session_id\uff08\u4f1a\u8bddid\uff09\u5b57\u6bb5\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u6309\u7167 session_id \u5206\u7ec4\u7684\u65b9\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u4f1a\u8bdd\u7684\u9875\u9762\u6570\u3002\\n\\n\uff083\uff09\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u6362\u4e00\u79cd\u89e3\u51b3\u601d\u8def\u3002\u5982\u679c\u80fd\u5224\u5b9a\u9996\u9875\u65e5\u5fd7\u4e4b\u540e\u6ca1\u6709\u540c\u4e00\u4f1a\u8bdd\u7684\u9875\u9762\u8bbf\u95ee\u8bb0\u5f55\u540c\u6837\u53ef\u4ee5\u7b5b\u9009\u8df3\u51fa\u6570\u636e\u3002\u5982\u679c\u65e5\u5fd7\u6570\u636e\u5b8c\u5168\u6709\u5e8f\uff0c\u4f1a\u8bdd\u9875\u9762\u4e0d\u5b58\u5728\u4ea4\u53c9\u60c5\u51b5\uff0c\u5219\u8df3\u51fa\u9875\u9762\u7684\u5224\u5b9a\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\u60c5\u51b5\uff1a\\n\\n\u2460 \u4e24\u6761\u7d27\u90bb\u7684\u9996\u9875\u65e5\u5fd7\u8fdb\u5165\u7b97\u5b50\uff0c\u53ef\u4ee5\u5224\u5b9a\u7b2c\u4e00\u6761\u9996\u9875\u65e5\u5fd7\u6240\u5c5e\u4f1a\u8bdd\u4e3a\u8df3\u51fa\u4f1a\u8bdd\uff1b\\n\\n\u2461 \u7b2c\u4e00\u6761\u9996\u9875\u65e5\u5fd7\u8fdb\u5165\u7b97\u5b50\u540e\uff0c\u63a5\u6536\u5230\u7684\u7b2c\u4e8c\u6761\u65e5\u5fd7\u4e3a\u975e\u9996\u9875\u65e5\u5fd7\uff0c\u5219\u7b2c\u4e00\u6761\u65e5\u5fd7\u6240\u5c5e\u4f1a\u8bdd\u4e0d\u662f\u8df3\u51fa\u4f1a\u8bdd\uff1b\\n\\n\u2462 \u7b2c\u4e00\u6761\u9996\u9875\u65e5\u5fd7\u8fdb\u5165\u7b97\u5b50\u540e\uff0c\u6ca1\u6709\u6536\u5230\u7b2c\u4e8c\u6761\u65e5\u5fd7\uff0c\u6b64\u65f6\u65e0\u6cd5\u5f97\u51fa\u7ed3\u8bba\uff0c\u5fc5\u987b\u7ee7\u7eed\u7b49\u5f85\u3002\u4f46\u662f\u65e0\u4f11\u6b62\u5730\u7b49\u5f85\u663e\u7136\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\\n\\n\u56e0\u6b64\uff0c\u4eba\u4e3a\u8bbe\u5b9a\u8d85\u65f6\u65f6\u95f4\uff0c\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u7b2c\u4e8c\u6761\u6570\u636e\u5c31\u5224\u5b9a\u4e3a\u8df3\u51fa\u884c\u4e3a\uff0c\u8fd9\u662f\u4e00\u79cd\u8fd1\u4f3c\u5904\u7406\uff0c\u5b58\u5728\u8bef\u5dee\uff0c\u4f46\u82e5\u80fd\u7ed3\u5408\u4e1a\u52a1\u573a\u666f\u8bbe\u7f6e\u5408\u7406\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u8bef\u5dee\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\\n\\n\u672c\u7a0b\u5e8f\u4e3a\u4e86\u4fbf\u4e8e\u6d4b\u8bd5\uff0c\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u4e3a 10s\uff0c\u4e3a\u4e86\u66f4\u5feb\u770b\u5230\u6548\u679c\u53ef\u4ee5\u8bbe\u7f6e\u66f4\u5c0f\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u751f\u4ea7\u73af\u5883\u7684\u8bbe\u7f6e\u7ed3\u5408\u4e1a\u52a1\u9700\u6c42\u786e\u5b9a\u3002\\n\\n\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\uff0c\u60c5\u51b5 \u2460 \u7684\u9996\u9875\u6570\u636e\u548c\u60c5\u51b5 \u2462 \u4e2d\u7684\u8d85\u65f6\u6570\u636e\u4e3a\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002\\n\\n2\uff09\u77e5\u8bc6\u50a8\u5907\\n\\n\uff081\uff09Flink CEP\\n\u8df3\u51fa\u884c\u4e3a\u9700\u8981\u8003\u8651\u4f1a\u8bdd\u4e2d\u7684\u4e24\u6761\u9875\u9762\u65e5\u5fd7\u6570\u636e\uff08\u7b2c\u4e00\u6761\u4e3a\u9996\u9875\u65e5\u5fd7\u4e14\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u63a5\u6536\u5230\u7b2c\u4e8c\u6761\uff0c\u6216\u4e24\u6761\u7d27\u90bb\u7684\u9996\u9875\u65e5\u5fd7\u5230\u6765\u53ef\u4ee5\u5224\u5b9a\u7b2c\u4e00\u6761\u4e3a\u8df3\u51fa\u6570\u636e\uff09\uff0c\u8981\u7b5b\u9009\u7684\u662f\u7ec4\u5408\u4e8b\u4ef6\uff0c\u7528 filter \u65e0\u6cd5\u5b9e\u73b0\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u7531\u6b64\u5f15\u51fa Flink CEP\u3002\\n\\nFlink CEP\uff08Complex Event Processing \u590d\u6742\u4e8b\u4ef6\u5904\u7406\uff09\u662f\u5728Flink\u4e0a\u5c42\u5b9e\u73b0\u7684\u590d\u6742\u4e8b\u4ef6\u5904\u7406\u5e93\uff0c\u53ef\u4ee5\u5728\u65e0\u754c\u6d41\u4e2d\u68c0\u6d4b\u51fa\u7279\u5b9a\u7684\u4e8b\u4ef6\u6a21\u578b\u3002\\n\\n\u7528\u6237\u5b9a\u4e49\u590d\u6742\u89c4\u5219\uff08Pattern\uff09\uff0c\u5c06\u5176\u5e94\u7528\u5230\u6d41\u4e0a\uff0c\u5373\u53ef\u4ece\u6d41\u4e2d\u63d0\u53d6\u6ee1\u8db3 Pattern \u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u7b80\u5355\u4e8b\u4ef6\u6784\u6210\u7684\u590d\u6742\u4e8b\u4ef6\u3002\\n\\n\uff082\uff09Flink CEP \u5b9a\u4e49\u7684\u89c4\u5219\u4e4b\u95f4\u7684\u8fde\u7eed\u7b56\u7565\\n\\n-\\t\u4e25\u683c\u8fde\u7eed: \u671f\u671b\u6240\u6709\u5339\u914d\u7684\u4e8b\u4ef6\u4e25\u683c\u7684\u4e00\u4e2a\u63a5\u4e00\u4e2a\u51fa\u73b0\uff0c\u4e2d\u95f4\u6ca1\u6709\u4efb\u4f55\u4e0d\u5339\u914d\u7684\u4e8b\u4ef6\u3002\u5bf9\u5e94\u65b9\u6cd5\u4e3a next()\uff1b\\n-\\t\u677e\u6563\u8fde\u7eed: \u5ffd\u7565\u5339\u914d\u7684\u4e8b\u4ef6\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u7684\u4e8b\u4ef6\u3002\u5bf9\u5e94\u65b9\u6cd5\u4e3afollowedBy()\uff1b\\n-\\t\u4e0d\u786e\u5b9a\u7684\u677e\u6563\u8fde\u7eed: \u66f4\u8fdb\u4e00\u6b65\u7684\u677e\u6563\u8fde\u7eed\uff0c\u5141\u8bb8\u5ffd\u7565\u6389\u4e00\u4e9b\u5339\u914d\u4e8b\u4ef6\u7684\u9644\u52a0\u5339\u914d\u3002\u5bf9\u5e94\u65b9\u6cd5\u4e3afollowedByAny()\u3002\\n\\n3\uff09\u5b9e\u73b0\u6b65\u9aa4\\n\\n\uff081\uff09\u6309\u7167 mid \u5206\u7ec4\\n\\n\\t\u4e0d\u540c\u8bbf\u5ba2\u7684\u6d4f\u89c8\u8bb0\u5f55\u4e92\u4e0d\u5e72\u6d89\uff0c\u8df3\u51fa\u884c\u4e3a\u7684\u5206\u6790\u5e94\u5728\u76f8\u540c mid \u4e0b\u8fdb\u884c\uff0c\u9996\u5148\u6309\u7167 mid \u5206\u7ec4\u3002\\n  \\n\uff082\uff09\u5b9a\u4e49 CEP \u5339\u914d\u89c4\u5219\\n\\n\u2460\u89c4\u5219\u4e00\\n\u8df3\u51fa\u884c\u4e3a\u5bf9\u5e94\u7684\u9875\u9762\u65e5\u5fd7\u5fc5\u7136\u4e3a\u67d0\u4e00\u4f1a\u8bdd\u7684\u9996\u9875\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u89c4\u5219\u5224\u5b9a last_page_id \u662f\u5426\u4e3a null\uff0c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\uff1b\\n\\n\u2461\u89c4\u5219\u4e8c\\n\u89c4\u5219\u4e8c\u548c\u89c4\u5219\u4e00\u4e4b\u95f4\u7684\u7b56\u7565\u91c7\u7528\u4e25\u683c\u8fde\u7eed\uff0c\u8981\u6c42\u4e8c\u8005\u4e4b\u95f4\u4e0d\u80fd\u6709\u5176\u5b83\u4e8b\u4ef6\u3002\\n\\n\u5224\u65ad last_page_id \u662f\u5426\u4e3a null\uff0c\u5728\u6570\u636e\u5b8c\u6574\u6709\u5e8f\u7684\u524d\u63d0\u4e0b\uff0c\u5982\u679c\u4e0d\u662f null \u8bf4\u660e\u672c\u6761\u65e5\u5fd7\u7684\u9875\u9762\u4e0d\u662f\u9996\u9875\uff0c\u53ef\u4ee5\u65ad\u5b9a\u5b83\u4e0e\u89c4\u5219\u4e00\u5339\u914d\u5230\u7684\u4e8b\u4ef6\u540c\u5c5e\u4e8e\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u8fd4\u56de false\uff1b\\n\\n\u5982\u679c\u662f null \u5219\u5f00\u542f\u4e86\u4e00\u4e2a\u65b0\u7684\u4f1a\u8bdd\uff0c\u6b64\u65f6\u53ef\u4ee5\u5224\u5b9a\u4e0a\u4e00\u6761\u9875\u9762\u65e5\u5fd7\u6240\u5c5e\u4f1a\u8bdd\u4e3a\u8df3\u51fa\u4f1a\u8bdd\uff0c\u662f\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\uff0c\u8fd4\u56de true\uff1b\\n\\n\u2462\u8d85\u65f6\u65f6\u95f4\\n\u8d85\u65f6\u65f6\u95f4\u5185\u89c4\u5219\u4e00\u88ab\u6ee1\u8db3\uff0c\u672a\u7b49\u5230\u7b2c\u4e8c\u6761\u6570\u636e\u5219\u4f1a\u88ab\u5224\u5b9a\u4e3a\u8d85\u65f6\u6570\u636e\u3002\\n\\n\uff083\uff09\u628a\u5339\u914d\u89c4\u5219\uff08Pattern\uff09\u5e94\u7528\u5230\u6d41\u4e0a\\n\\n\\t\u6839\u636e Pattern \u5b9a\u4e49\u7684\u89c4\u5219\u5bf9\u6d41\u4e2d\u6570\u636e\u8fdb\u884c\u7b5b\u9009\u3002\\n  \\n\uff084\uff09\u63d0\u53d6\u8d85\u65f6\u6d41\\n\\t\u63d0\u53d6\u8d85\u65f6\u6d41\uff0c\u8d85\u65f6\u6d41\u4e2d\u6ee1\u8db3\u89c4\u5219\u4e00\u7684\u6570\u636e\u5373\u4e3a\u8df3\u51fa\u660e\u7ec6\u6570\u636e\uff0c\u53d6\u51fa\u3002\\n  \\n\uff085\uff09\u5408\u5e76\u4e3b\u6d41\u548c\u8d85\u65f6\u6d41\uff0c\u5199\u5165 Kafka \u8c03\u51fa\u660e\u7ec6\u4e3b\u9898\\n\\n\uff086\uff09\u7ed3\u679c\u5206\u6790\\n\u7406\u8bba\u4e0a Flink \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6c34\u4f4d\u7ebf\u4fdd\u8bc1\u6570\u636e\u4e25\u683c\u6709\u5e8f\uff08\u8d85\u65f6\u65f6\u95f4\u8db3\u591f\u5927\uff09\uff0c\u5728\u6b64\u524d\u63d0\u4e0b\uff0c\u540c\u4e00 mid \u7684\u4f1a\u8bdd\u4e4b\u95f4\u4e0d\u4f1a\u51fa\u73b0\u4ea4\u53c9\u3002\\n\\n\u82e5\u5047\u8bbe\u65e5\u5fd7\u6570\u636e\u6ca1\u6709\u4e22\u5931\uff0c\u6309\u7167\u4e0a\u8ff0\u5339\u914d\u89c4\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e24\u7c7b\u660e\u7ec6\u6570\u636e\\n\\n\u2460\u4e24\u4e2a\u89c4\u5219\u90fd\u88ab\u6ee1\u8db3\uff0c\u6ee1\u8db3\u89c4\u5219\u4e00\u7684\u6570\u636e\u4e3a\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u3002\u5728\u4f1a\u8bdd\u4e4b\u95f4\u4e0d\u4f1a\u4ea4\u53c9\u4e14\u65e5\u5fd7\u6570\u636e\u6ca1\u6709\u4e22\u5931\u7684\u524d\u63d0\u4e0b\uff0c\u6b64\u65f6\u83b7\u53d6\u7684\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u6ca1\u6709\u8bef\u5dee\uff1b\\n\\n\\n\u2461\u7b2c\u4e00\u6761\u6570\u636e\u6ee1\u8db3\u89c4\u5219\u4e8c\uff0c\u8d85\u65f6\u65f6\u95f4\u5185\u6ca1\u6709\u63a5\u6536\u5230\u7b2c\u4e8c\u6761\u6570\u636e\uff0c\u6c34\u4f4d\u7ebf\u8fbe\u5230\u8d85\u65f6\u65f6\u95f4\uff0c\u7b2c\u4e00\u6761\u6570\u636e\u88ab\u53d1\u9001\u5230\u8d85\u65f6\u4fa7\u8f93\u51fa\u6d41\u3002\\n\\n\u5373\u4fbf\u5728\u4f1a\u8bdd\u4e4b\u95f4\u4e0d\u4ea4\u53c9\u4e14\u65e5\u5fd7\u6570\u636e\u4e0d\u4e22\u5931\u7684\u524d\u63d0\u4e0b\uff0c\u6b64\u65f6\u83b7\u53d6\u7684\u8df3\u51fa\u660e\u7ec6\u6570\u636e\u4ecd\u6709\u8bef\u5dee\uff0c\u56e0\u4e3a\u8d85\u65f6\u65f6\u95f4\u4e4b\u540e\u4f1a\u8bdd\u53ef\u80fd\u5e76\u672a\u7ed3\u675f\uff0c\u5982\u679c\u6b64\u65f6\u8bbf\u5ba2\u5728\u540c\u4e00\u4f1a\u8bdd\u5185\u8df3\u8f6c\u5230\u4e86\u5176\u5b83\u9875\u9762\uff0c\u5c31\u4f1a\u5bfc\u81f4\u4f1a\u8bdd\u9875\u9762\u6570\u5927\u4e8e 1 \u7684\u8bbf\u95ee\u88ab\u5224\u5b9a\u4e3a\u8df3\u51fa\u884c\u4e3a\uff0c\u4e0b\u6e38\u8ba1\u7b97\u7684\u8df3\u51fa\u7387\u504f\u5927\u3002\\n\\n\u8bef\u5dee\u5927\u5c0f\u548c\u8bbe\u7f6e\u7684\u8d85\u65f6\u65f6\u95f4\u5448\u8d1f\u76f8\u5173\u5173\u7cfb\uff0c\u8d85\u65f6\u65f6\u95f4\u8d8a\u5927\uff0c\u7406\u8bba\u4e0a\u8bef\u5dee\u8d8a\u5c0f\u3002\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242665-cbab2fa8-9aca-4e02-8d09-55111af38e1c.png)\\n\\n### \u4ee3\u7801\\n1\uff09\u6dfb\u52a0 CEP \u76f8\u5173\u4f9d\u8d56\\n```\\n<dependency>\\n    <groupId>org.apache.flink</groupId>\\n    <artifactId>flink-cep_${scala.version}</artifactId>\\n    version>${flink.version}</version>\\n</dependency>\\n```\\n2\uff09\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.log;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.eventtime.SerializableTimestampAssigner;\\nimport org.apache.flink.api.common.eventtime.WatermarkStrategy;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.cep.CEP;\\nimport org.apache.flink.cep.PatternFlatSelectFunction;\\nimport org.apache.flink.cep.PatternFlatTimeoutFunction;\\nimport org.apache.flink.cep.PatternStream;\\nimport org.apache.flink.cep.pattern.Pattern;\\nimport org.apache.flink.cep.pattern.conditions.SimpleCondition;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\\nimport org.apache.flink.streaming.api.datastream.KeyedStream;\\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;\\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;\\nimport org.apache.flink.util.Collector;\\nimport org.apache.flink.util.OutputTag;\\n\\nimport java.util.List;\\nimport java.util.Map;\\n\\npublic class\\nDwdTrafficUserJumpDetail {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(30 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece kafka dwd_traffic_page_log \u4e3b\u9898\u8bfb\u53d6\u65e5\u5fd7\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u6d41\\n        String topic = \\"dwd_traffic_page_log\\";\\n        String groupId = \\"dwd_traffic_user_jump_detail\\";\\n        FlinkKafkaConsumer<String> kafkaConsumer = KafkaUtil.getKafkaConsumer(topic, groupId);\\n        DataStreamSource<String> pageLog = env.addSource(kafkaConsumer);\\n\\n        // \u6d4b\u8bd5\u6570\u636e\\n        /*DataStream<String> kafkaDS = env\\n            .fromElements(\\n                \\"{\\\\\\"common\\\\\\":{\\\\\\"mid\\\\\\":\\\\\\"101\\\\\\"},\\\\\\"page\\\\\\":{\\\\\\"page_id\\\\\\":\\\\\\"home\\\\\\"},\\\\\\"ts\\\\\\":10000} \\",\\n                \\"{\\\\\\"common\\\\\\":{\\\\\\"mid\\\\\\":\\\\\\"102\\\\\\"},\\\\\\"page\\\\\\":{\\\\\\"page_id\\\\\\":\\\\\\"home\\\\\\"},\\\\\\"ts\\\\\\":12000}\\",\\n                \\"{\\\\\\"common\\\\\\":{\\\\\\"mid\\\\\\":\\\\\\"102\\\\\\"},\\\\\\"page\\\\\\":{\\\\\\"page_id\\\\\\":\\\\\\"good_list\\\\\\",\\\\\\"last_page_id\\\\\\":\\" +\\n                    \\"\\\\\\"home\\\\\\"},\\\\\\"ts\\\\\\":15000} \\",\\n                \\"{\\\\\\"common\\\\\\":{\\\\\\"mid\\\\\\":\\\\\\"102\\\\\\"},\\\\\\"page\\\\\\":{\\\\\\"page_id\\\\\\":\\\\\\"good_list\\\\\\",\\\\\\"last_page_id\\\\\\":\\" +\\n                    \\"\\\\\\"detail\\\\\\"},\\\\\\"ts\\\\\\":30000} \\"\\n            );*/\\n\\n        // TODO 4. \u8f6c\u6362\u7ed3\u6784\\n        SingleOutputStreamOperator<JSONObject> mappedStream = pageLog.map(JSON::parseObject);\\n\\n        // TODO 5. \u8bbe\u7f6e\u6c34\u4f4d\u7ebf\uff0c\u7528\u4e8e\u7528\u6237\u8df3\u51fa\u7edf\u8ba1\\n        SingleOutputStreamOperator<JSONObject> withWatermarkStream = mappedStream.assignTimestampsAndWatermarks(\\n                WatermarkStrategy\\n                        .<JSONObject>forMonotonousTimestamps()\\n                        .withTimestampAssigner(\\n                                new SerializableTimestampAssigner<JSONObject>() {\\n                                    @Override\\n                                    public long extractTimestamp(JSONObject jsonObj, long recordTimestamp) {\\n                                        return jsonObj.getLong(\\"ts\\");\\n                                    }\\n                                }\\n                        )\\n        );\\n\\n        // TODO 6. \u6309\u7167 mid \u5206\u7ec4\\n        KeyedStream<JSONObject, String> keyedStream = withWatermarkStream.keyBy(jsonOjb -> jsonOjb.getJSONObject(\\"common\\").getString(\\"mid\\"));\\n\\n        // TODO 7. \u5b9a\u4e49 CEP \u5339\u914d\u89c4\u5219\\n        Pattern<JSONObject, JSONObject> pattern = Pattern.<JSONObject>begin(\\"first\\").where(\\n                new SimpleCondition<JSONObject>() {\\n\\n                    @Override\\n                    public boolean filter(JSONObject jsonObj) throws Exception {\\n                        String lastPageId = jsonObj.getJSONObject(\\"page\\").getString(\\"last_page_id\\");\\n                        return lastPageId == null;\\n                    }\\n                }\\n        ).next(\\"second\\").where(\\n                new SimpleCondition<JSONObject>() {\\n                    @Override\\n                    public boolean filter(JSONObject jsonObj) throws Exception {\\n                        String lastPageId = jsonObj.getJSONObject(\\"page\\").getString(\\"last_page_id\\");\\n                        return lastPageId == null;\\n                    }\\n                }\\n                // \u4e0a\u6587\u8c03\u7528\u4e86\u540c\u540d Time \u7c7b\uff0c\u6b64\u5904\u9700\u8981\u4f7f\u7528\u5168\u7c7b\u540d\\n        ).within(org.apache.flink.streaming.api.windowing.time.Time.seconds(10L));\\n\\n        // TODO 8. \u628a Pattern \u5e94\u7528\u5230\u6d41\u4e0a\\n        PatternStream<JSONObject> patternStream = CEP.pattern(keyedStream, pattern);\\n\\n        // TODO 9. \u63d0\u53d6\u5339\u914d\u4e0a\u7684\u4e8b\u4ef6\u4ee5\u53ca\u8d85\u65f6\u4e8b\u4ef6\\n        OutputTag<JSONObject> timeoutTag = new OutputTag<JSONObject>(\\"timeoutTag\\") {\\n        };\\n        SingleOutputStreamOperator<JSONObject> flatSelectStream = patternStream.flatSelect(\\n                timeoutTag,\\n                new PatternFlatTimeoutFunction<JSONObject, JSONObject>() {\\n                    @Override\\n                    public void timeout(Map<String, List<JSONObject>> pattern, long timeoutTimestamp, Collector<JSONObject> out) throws Exception {\\n                        JSONObject element = pattern.get(\\"first\\").get(0); \\n                        out.collect(element);\\n                        \\n                    }\\n                },\\n                new PatternFlatSelectFunction<JSONObject, JSONObject>() {\\n                    @Override\\n                    public void flatSelect(Map<String, List<JSONObject>> pattern, Collector<JSONObject> out) throws Exception {\\n                        JSONObject element = pattern.get(\\"first\\").get(0); \\n                        out.collect(element);\\n                    }\\n                }\\n        );\\n\\n        DataStream<JSONObject> timeOutDStream = flatSelectStream.getSideOutput(timeoutTag);\\n\\n        // TODO 11. \u5408\u5e76\u4e24\u4e2a\u6d41\u5e76\u5c06\u6570\u636e\u5199\u51fa\u5230 Kafka\\n        DataStream<JSONObject> unionDStream = flatSelectStream.union(timeOutDStream);\\n        String targetTopic = \\"dwd_traffic_user_jump_detail\\";\\n        FlinkKafkaProducer<String> kafkaProducer = KafkaUtil.getKafkaProducer(targetTopic);\\n          unionDStream .map(JSONAware::toJSONString)\\n.addSink(kafkaProducer);\\n\\n        env.execute();\\n    }\\n}\\n```\\n## \u4ea4\u6613\u57df\u52a0\u8d2d\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u63d0\u53d6\u52a0\u8d2d\u64cd\u4f5c\u751f\u6210\u52a0\u8d2d\u8868\uff0c\u5e76\u5c06\u5b57\u5178\u8868\u4e2d\u7684\u76f8\u5173\u7ef4\u5ea6\u9000\u5316\u5230\u52a0\u8d2d\u8868\u4e2d\uff0c\u5199\u51fa\u5230 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002\\n\\n### \u601d\u8def\u5206\u6790\\n1\uff09\u7ef4\u5ea6\u5173\u8054\uff08\u7ef4\u5ea6\u9000\u5316\uff09\u5b9e\u73b0\u7b56\u7565\u5206\u6790\\n\\n\u672c\u7ae0\u4e1a\u52a1\u4e8b\u5b9e\u8868\u7684\u6784\u5efa\u5168\u90e8\u4f7f\u7528 FlinkSQL \u5b9e\u73b0\uff0c\u5b57\u5178\u8868\u6570\u636e\u5b58\u50a8\u5728 MySQL \u7684\u4e1a\u52a1\u6570\u636e\u5e93\u4e2d\uff0c\u8981\u505a\u7ef4\u5ea6\u9000\u5316\uff0c\u5c31\u8981\u5c06\u8fd9\u4e9b\u6570\u636e\u4ece MySQL \u4e2d\u63d0\u53d6\u51fa\u6765\u5c01\u88c5\u6210 FlinkSQL \u8868\uff0cFlink \u7684 JDBC SQL Connector \u53ef\u4ee5\u5b9e\u73b0\u6211\u4eec\u7684\u9700\u6c42\u3002\\n\\n2\uff09\u77e5\u8bc6\u50a8\u5907\\n\uff081\uff09JDBC SQL Connector\\nJDBC \u8fde\u63a5\u5668\u53ef\u4ee5\u8ba9 Flink \u7a0b\u5e8f\u4ece\u62e5\u6709 JDBC \u9a71\u52a8\u7684\u4efb\u610f\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\u6216\u5c06\u6570\u636e\u5199\u5165\u6570\u636e\u5e93\u3002\\n\\n\u5982\u679c\u5728 Flink SQL \u8868\u7684 DDL \u8bed\u53e5\u4e2d\u5b9a\u4e49\u4e86\u4e3b\u952e\uff0c\u5219\u4f1a\u4ee5 upsert \u6a21\u5f0f\u5c06\u6d41\u4e2d\u6570\u636e\u5199\u5165\u6570\u636e\u5e93\uff0c\u6b64\u65f6\u6d41\u4e2d\u53ef\u4ee5\u5b58\u5728 UPDATE/DElETE\uff08\u66f4\u65b0/\u5220\u9664\uff09\u7c7b\u578b\u7684\u6570\u636e\u3002\u5426\u5219\uff0c\u4f1a\u4ee5 append \u6a21\u5f0f\u5c06\u6570\u636e\u5199\u51fa\u5230\u6570\u636e\u5e93\uff0c\u6b64\u65f6\u6d41\u4e2d\u53ea\u80fd\u6709 INSERT\uff08\u63d2\u5165\uff09\u7c7b\u578b\u7684\u6570\u636e\u3002\\n\\nDDL \u7528\u6cd5\u5b9e\u4f8b\u5982\u4e0b\u3002\\n```\\nCREATE TABLE MyUserTable (\\n  id BIGINT,\\n  name STRING,\\n  age INT,\\n  status BOOLEAN,\\n  PRIMARY KEY (id) NOT ENFORCED\\n) WITH (\\n   \'connector\' = \'jdbc\',\\n   \'url\' = \'jdbc:mysql://localhost:3306/mydatabase\',\\n   \'table-name\' = \'users\'\\n);\\n```\\n\uff082\uff09Lookup Cache\\n\\n\\tJDBC \u8fde\u63a5\u5668\u53ef\u4ee5\u4f5c\u4e3a\u65f6\u6001\u8868\u5173\u8054\u4e2d\u7684\u67e5\u8be2\u6570\u636e\u6e90\uff08\u53c8\u79f0\u7ef4\u8868\uff09\u3002\u76ee\u524d\uff0c\u4ec5\u652f\u6301\u540c\u6b65\u67e5\u8be2\u6a21\u5f0f\u3002\\n  \\n\\t\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u67e5\u8be2\u7f13\u5b58\uff08Lookup Cache\uff09\u672a\u88ab\u542f\u7528\uff0c\u9700\u8981\u8bbe\u7f6e lookup.cache.max-rows \u548c lookup.cache.ttl \u53c2\u6570\u6765\u542f\u7528\u6b64\u529f\u80fd\u3002\\n  \\n\\tLookup \u7f13\u5b58\u662f\u7528\u6765\u63d0\u5347\u6709 JDBC \u8fde\u63a5\u5668\u53c2\u4e0e\u7684\u65f6\u6001\u5173\u8054\u6027\u80fd\u7684\u3002\\n  \\n  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u7f13\u5b58\u672a\u542f\u7528\uff0c\u6240\u6709\u7684\u8bf7\u6c42\u4f1a\u88ab\u53d1\u9001\u5230\u5916\u90e8\u6570\u636e\u5e93\u3002\\n  \\n  \u5f53\u7f13\u5b58\u542f\u7528\u65f6\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\uff08\u5373 TaskManager\uff09\u7ef4\u62a4\u4e00\u4efd\u7f13\u5b58\u3002\u6536\u5230\u8bf7\u6c42\u65f6\uff0cFlink \u4f1a\u5148\u67e5\u8be2\u7f13\u5b58\uff0c\u5982\u679c\u7f13\u5b58\u672a\u547d\u4e2d\u624d\u4f1a\u5411\u5916\u90e8\u6570\u636e\u5e93\u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u7528\u67e5\u8be2\u7ed3\u679c\u66f4\u65b0\u7f13\u5b58\u3002\\n  \\n  \u5982\u679c\u7f13\u5b58\u4e2d\u7684\u8bb0\u5f55\u6761\u6570\u8fbe\u5230\u4e86 lookup.cache.max-rows \u89c4\u5b9a\u7684\u6700\u5927\u884c\u6570\u65f6\u5c06\u6e05\u9664\u5b58\u6d3b\u65f6\u95f4\u6700\u4e45\u7684\u8bb0\u5f55\u3002\\n  \\n  \u5982\u679c\u7f13\u5b58\u4e2d\u7684\u8bb0\u5f55\u5b58\u6d3b\u65f6\u95f4\u8d85\u8fc7\u4e86 lookup.cache.ttl \u89c4\u5b9a\u7684\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\uff0c\u540c\u6837\u4f1a\u88ab\u6e05\u9664\u3002\\n  \\n\\t\u7f13\u5b58\u4e2d\u7684\u8bb0\u5f55\u672a\u5fc5\u662f\u6700\u65b0\u7684\uff0c\u53ef\u4ee5\u5c06 lookup.cache.ttl \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u66f4\u5c0f\u7684\u503c\u6765\u83b7\u5f97\u65f6\u6548\u6027\u66f4\u597d\u7684\u6570\u636e\uff0c\u4f46\u8fd9\u6837\u505a\u4f1a\u589e\u52a0\u53d1\u9001\u5230\u6570\u636e\u5e93\u7684\u8bf7\u6c42\u6570\u91cf\u3002\u6240\u4ee5\u9700\u8981\u5728\u541e\u5410\u91cf\u548c\u6b63\u786e\u6027\u4e4b\u95f4\u5bfb\u6c42\u5e73\u8861\u3002\\n  \\n\\t\uff083\uff09Lookup Join\\n  \\n\\tLookup Join \u901a\u5e38\u5728 Flink SQL \u8868\u548c\u5916\u90e8\u7cfb\u7edf\u67e5\u8be2\u7ed3\u679c\u5173\u8054\u65f6\u4f7f\u7528\u3002\\n  \\n  \u8fd9\u79cd\u5173\u8054\u8981\u6c42\u4e00\u5f20\u8868\uff08\u4e3b\u8868\uff09\u6709\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\uff0c\u800c\u53e6\u4e00\u5f20\u8868\uff08\u7ef4\u8868\uff09\u7531 Lookup \u8fde\u63a5\u5668\u751f\u6210\u3002\\n  \\n\\tLookup Join \u505a\u7684\u662f\u7ef4\u5ea6\u5173\u8054\uff0c\u800c\u7ef4\u5ea6\u6570\u636e\u662f\u6709\u65f6\u6548\u6027\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u65f6\u95f4\u5b57\u6bb5\u6765\u5bf9\u6570\u636e\u7684\u7248\u672c\u8fdb\u884c\u6807\u8bc6\u3002\\n  \\n  \u56e0\u6b64\uff0cFlink \u8981\u6c42\u6211\u4eec\u63d0\u4f9b\u5904\u7406\u65f6\u95f4\u7528\u4f5c\u7248\u672c\u5b57\u6bb5\u3002\\n  \\n\\t\u6b64\u5904\u9009\u62e9\u8c03\u7528 PROCTIME() \u51fd\u6570\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\uff0c\u5c06\u5176\u4f5c\u4e3a\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\u3002\u8be5\u51fd\u6570\u8c03\u7528\u793a\u4f8b\u5982\u4e0b\\n  ```\\ntableEnv.sqlQuery(\\"select PROCTIME() proc_time\\")\\n                .execute()\\n                .print();\\n// \u7ed3\u679c\\n+----+-------------------------+\\n| op |               proc_time |\\n+----+-------------------------+\\n| +I | 2022-04-09 15:45:50.752 |\\n+----+-------------------------+\\n1 row in set\\n```\\n\\t\uff084\uff09JDBC SQL Connector \u53c2\u6570\u89e3\u8bfb\\n-\\tconnector\uff1a\u8fde\u63a5\u5668\u7c7b\u578b\uff0c\u6b64\u5904\u4e3a jdbc\\n-\\turl\uff1a\u6570\u636e\u5e93 url\\n-\\ttable-name\uff1a\u6570\u636e\u5e93\u4e2d\u8868\u540d\\n-\\tlookup.cache.max-rows\uff1alookup \u7f13\u5b58\u4e2d\u7684\u6700\u5927\u8bb0\u5f55\u6761\u6570\\n-\\tlookup.cache.ttl\uff1alookup \u7f13\u5b58\u4e2d\u6bcf\u6761\u8bb0\u5f55\u7684\u6700\u5927\u5b58\u6d3b\u65f6\u95f4\\n-\\tusername\uff1a\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u7528\u6237\u540d\\n-\\tpassword\uff1a\u8bbf\u95ee\u6570\u636e\u5e93\u7684\u5bc6\u7801\\n-\\tdriver\uff1a\u6570\u636e\u5e93\u9a71\u52a8\uff0c\u6ce8\u610f\uff1a\u901a\u5e38\u6ce8\u518c\u9a71\u52a8\u53ef\u4ee5\u7701\u7565\uff0c\u4f46\u662f\u81ea\u52a8\u83b7\u53d6\u7684\u9a71\u52a8\u662f com.mysql.jdbc.Driver\uff0cFlink CDC 2.1.0 \u8981\u6c42 mysql \u9a71\u52a8\u7248\u672c\u5fc5\u987b\u4e3a 8 \u53ca\u4ee5\u4e0a\uff0c\u5728 mysql-connector -8.x \u4e2d\u8be5\u9a71\u52a8\u5df2\u8fc7\u65f6\uff0c\u65b0\u7684\u9a71\u52a8\u4e3a com.mysql.cj.jdbc.Driver\u3002\u7701\u7565\u8be5\u53c2\u6570\u63a7\u5236\u53f0\u6253\u5370\u7684\u8b66\u544a\u5982\u4e0b\\nLoading class `com.mysql.jdbc.Driver\'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver\'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\\n\\t\\n  5\uff09Kafka Connector \u76f8\u5173\u77e5\u8bc6\u9700\u8981\u7ed3\u5408 left join \u7684\u5b9e\u73b0\u8fc7\u7a0b\u8bb2\u89e3\uff0c\u672c\u8282\u5e76\u672a\u6d89\u53ca left join\u3002\u4e8c\u8005\u5c06\u5728\u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u4e00\u5e76\u4ecb\u7ecd\u3002\\n  \\n3\uff09\u6267\u884c\u6b65\u9aa4\\n\\n\\t\uff081\uff09\u8bfb\u53d6\u8d2d\u7269\u8f66\u8868\u6570\u636e\u3002\\n  \\n  \uff082\uff09\u5efa\u7acb Mysql-LookUp \u5b57\u5178\u8868\u3002\\n\\n\\t\uff083\uff09\u5173\u8054\u8d2d\u7269\u8f66\u8868\u548c\u5b57\u5178\u8868\uff0c\u7ef4\u5ea6\u9000\u5316\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242725-1b8b6830-26c8-4a57-87cb-a3493a5f2196.png)\\n\\n### \u4ee3\u7801\\n\\n1\uff09\u8865\u5145 Flink SQL \u76f8\u5173\u4f9d\u8d56\\n\\n\u8981\u6267\u884c Flink SQL \u7a0b\u5e8f\uff0c\u8865\u5145\u76f8\u5173\u4f9d\u8d56\u3002JDBC SQL Connector \u9700\u8981\u7684\u4f9d\u8d56\u5305\u542b\u5728 Flink CDC \u9700\u8981\u7684\u4f9d\u8d56\u4e2d\uff0c\u4e0d\u53ef\u91cd\u590d\u5f15\u5165\u3002\\n```\\n<dependency>\\n<groupId>org.apache.flink</groupId>\\n    <artifactId>flink-table-planner-blink_${scala.version}</artifactId>\\n    <version>${flink.version}</version>\\n</dependency>\\n```\\n2\uff09\u5728 KafkaUtil \u4e2d\u8865\u5145 getKafkaDDL \u65b9\u6cd5\u548c getUpsertKafkaDDL \u65b9\u6cd5\\n```\\n/**\\n     * Kafka-Source DDL \u8bed\u53e5\\n     *\\n     * @param topic   \u6570\u636e\u6e90\u4e3b\u9898\\n     * @param groupId \u6d88\u8d39\u8005\u7ec4\\n     * @return \u62fc\u63a5\u597d\u7684 Kafka \u6570\u636e\u6e90 DDL \u8bed\u53e5\\n     */\\npublic static String getKafkaDDL(String topic, String groupId) {\\n\\n        return \\" with (\'connector\' = \'kafka\', \\" +\\n                \\" \'topic\' = \'\\" + topic + \\"\',\\" +\\n                \\" \'properties.bootstrap.servers\' = \'\\" + BOOTSTRAP_SERVERS + \\"\', \\" +\\n                \\" \'properties.group.id\' = \'\\" + groupId + \\"\', \\" +\\n                \\" \'format\' = \'json\', \\" +\\n                \\" \'scan.startup.mode\' = \'group-offsets\')\\";\\n}\\n\\n/**\\n     * Kafka-Sink DDL \u8bed\u53e5\\n     *\\n     * @param topic \u8f93\u51fa\u5230 Kafka \u7684\u76ee\u6807\u4e3b\u9898\\n     * @return \u62fc\u63a5\u597d\u7684 Kafka-Sink DDL \u8bed\u53e5\\n     */\\npublic static String getUpsertKafkaDDL(String topic) {\\n\\n        return \\"WITH ( \\" +\\n                \\"  \'connector\' = \'upsert-kafka\', \\" +\\n                \\"  \'topic\' = \'\\" + topic + \\"\', \\" +\\n                \\"  \'properties.bootstrap.servers\' = \'\\" + BOOTSTRAP_SERVERS + \\"\', \\" +\\n                \\"  \'key.format\' = \'json\', \\" +\\n                \\"  \'value.format\' = \'json\' \\" +\\n                \\")\\";\\n    }\\n```    \\n3\uff09\u521b\u5efa MysqlUtil \u5de5\u5177\u7c7b\\n\\n\u5c01\u88c5 mysqlLookUpTableDDL() \u65b9\u6cd5\u548c getBaesDicLookUpDDL() \u65b9\u6cd5\uff0c\u7528\u4e8e\u5c06 MySQL \u6570\u636e\u5e93\u4e2d\u7684\u5b57\u5178\u8868\u8bfb\u53d6\u4e3a Flink LookUp \u8868\uff0c\u4ee5\u4fbf\u7ef4\u5ea6\u9000\u5316\u3002\\n```\\npackage com.atguigu.gmall.realtime.util;\\n\\npublic class MysqlUtil {\\npublic static String getBaseDicLookUpDDL() {\\n\\n        return \\"create table `base_dic`(\\\\n\\" +\\n                \\"`dic_code` string,\\\\n\\" +\\n                \\"`dic_name` string,\\\\n\\" +\\n                \\"`parent_code` string,\\\\n\\" +\\n                \\"`create_time` timestamp,\\\\n\\" +\\n                \\"`operate_time` timestamp,\\\\n\\" +\\n                \\"primary key(`dic_code`) not enforced\\\\n\\" +\\n                \\")\\" + MysqlUtil.mysqlLookUpTableDDL(\\"base_dic\\");\\n    }\\n\\npublic static String mysqlLookUpTableDDL(String tableName) {\\n\\n        String ddl = \\"WITH (\\\\n\\" +\\n                \\"\'connector\' = \'jdbc\',\\\\n\\" +\\n                \\"\'url\' = \'jdbc:mysql://hadoop102:3306/gmall\',\\\\n\\" +\\n                \\"\'table-name\' = \'\\" + tableName + \\"\',\\\\n\\" +\\n                \\"\'lookup.cache.max-rows\' = \'10\',\\\\n\\" +\\n                \\"\'lookup.cache.ttl\' = \'1 hour\',\\\\n\\" +\\n                \\"\'username\' = \'root\',\\\\n\\" +\\n                \\"\'password\' = \'000000\',\\\\n\\" +\\n                \\"\'driver\' = \'com.mysql.cj.jdbc.Driver\'\\\\n\\" +\\n                \\")\\";\\n        return ddl;\\n    }\\n}\\n```\\n4\uff09\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.time.ZoneId;\\n\\n\\npublic class DwdTradeCartAdd {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // \u8bbe\u5b9a Table \u4e2d\u7684\u65f6\u533a\u4e3a\u672c\u5730\u65f6\u533a\\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of(\\"GMT+8\\"));\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table topic_db(\\\\n\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`old` map<string, string>,\\\\n\\" +\\n                \\"`ts` string,\\\\n\\" +\\n                \\"`proc_time` as PROCTIME()\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_trade_cart_add\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u8d2d\u7269\u8f66\u8868\u6570\u636e\\n        Table cartAdd = tableEnv.sqlQuery(\\"\\" +\\n                \\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                \\"data[\'source_id\'] source_id,\\\\n\\" +\\n                \\"data[\'source_type\'] source_type,\\\\n\\" +\\n                \\"if(`type` = \'insert\',\\\\n\\" +\\n                \\"data[\'sku_num\'],cast((cast(data[\'sku_num\'] as int) - cast(`old`[\'sku_num\'] as int)) as string)) sku_num,\\\\n\\" +\\n                \\"ts,\\\\n\\" +\\n                \\"proc_time\\\\n\\" +\\n                \\"from `topic_db` \\\\n\\" +\\n                \\"where `table` = \'cart_info\'\\\\n\\" +\\n                \\"and (`type` = \'insert\'\\\\n\\" +\\n                \\"or (`type` = \'update\' \\\\n\\" +\\n                \\"and `old`[\'sku_num\'] is not null \\\\n\\" +\\n                \\"and cast(data[\'sku_num\'] as int) > cast(`old`[\'sku_num\'] as int)))\\");\\n        tableEnv.createTemporaryView(\\"cart_add\\", cartAdd);\\n\\n        // TODO 5. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\\n\\n        // TODO 6. \u5173\u8054\u4e24\u5f20\u8868\u83b7\u5f97\u52a0\u8d2d\u660e\u7ec6\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"cadd.id,\\\\n\\" +\\n                \\"user_id,\\\\n\\" +\\n                \\"sku_id,\\\\n\\" +\\n                \\"source_id,\\\\n\\" +\\n                \\"source_type,\\\\n\\" +\\n                \\"dic_name source_type_name,\\\\n\\" +\\n                \\"sku_num,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from cart_add cadd\\\\n\\" +\\n                \\"left join base_dic for system_time as of cadd.proc_time as dic\\\\n\\" +\\n                \\"on cadd.source_type=dic.dic_code\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 7. \u5efa\u7acb Upsert-Kafka dwd_trade_cart_add \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table dwd_trade_cart_add(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type_code string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_cart_add\\"));\\n\\n        // TODO 8. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_trade_cart_add select * from result_table\\");\\n    }\\n}\\n```\\n## \u4ea4\u6613\u57df\u8ba2\u5355\u9884\u5904\u7406\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u7ecf\u8fc7\u5206\u6790\uff0c\u8ba2\u5355\u660e\u7ec6\u8868\u548c\u8ba2\u5355\u8868\u7684\u6570\u636e\u6765\u6e90\u3001\u8868\u7ed3\u6784\u90fd\u76f8\u540c\uff0c\u5dee\u522b\u53ea\u5728\u4e1a\u52a1\u8fc7\u7a0b\u548c\u8fc7\u6ee4\u6761\u4ef6\uff0c\u4e3a\u4e86\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u5c06\u4e24\u5f20\u8868\u516c\u5171\u7684\u5173\u8054\u8fc7\u7a0b\u63d0\u53d6\u51fa\u6765\uff0c\u5f62\u6210\u8ba2\u5355\u9884\u5904\u7406\u8868\u3002\\n\\n\u5173\u8054\u8ba2\u5355\u660e\u7ec6\u8868\u3001\u8ba2\u5355\u8868\u3001\u8ba2\u5355\u660e\u7ec6\u6d3b\u52a8\u5173\u8054\u8868\u3001\u8ba2\u5355\u660e\u7ec6\u4f18\u60e0\u5238\u5173\u8054\u8868\u56db\u5f20\u4e8b\u5b9e\u4e1a\u52a1\u8868\u548c\u5b57\u5178\u8868\uff08\u7ef4\u5ea6\u4e1a\u52a1\u8868\uff09\u5f62\u6210\u8ba2\u5355\u9884\u5904\u7406\u8868\uff0c\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002\\n\\n\u672c\u8282\u5f62\u6210\u7684\u9884\u5904\u7406\u8868\u4e2d\u8981\u4fdd\u7559\u8ba2\u5355\u8868\u7684 type \u548c old \u5b57\u6bb5\uff0c\u7528\u4e8e\u8fc7\u6ee4\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u548c\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u3002\\n\\n### \u601d\u8def\u5206\u6790\\n1\uff09\u77e5\u8bc6\u50a8\u5907\\n\\n\uff081\uff09left join \u5b9e\u73b0\u8fc7\u7a0b\\n\\n\u5047\u8bbe A \u8868\u4f5c\u4e3a\u4e3b\u8868\u4e0e B \u8868\u505a\u7b49\u503c\u5de6\u5916\u8054\u3002\u5f53 A \u8868\u6570\u636e\u8fdb\u5165\u7b97\u5b50\uff0c\u800c B \u8868\u6570\u636e\u672a\u81f3\u65f6\u4f1a\u5148\u751f\u6210\u4e00\u6761 B \u8868\u5b57\u6bb5\u5747\u4e3a null \u7684\u5173\u8054\u6570\u636eab1\uff0c\u5176\u6807\u8bb0\u4e3a +I\u3002\\n\\n\u5176\u540e\uff0cB \u8868\u6570\u636e\u5230\u6765\uff0c\u4f1a\u5148\u5c06\u4e4b\u524d\u7684\u6570\u636e\u64a4\u56de\uff0c\u5373\u751f\u6210\u4e00\u6761\u4e0e ab1 \u5185\u5bb9\u76f8\u540c\uff0c\u4f46\u6807\u8bb0\u4e3a -D \u7684\u6570\u636e\uff0c\u518d\u751f\u6210\u4e00\u6761\u5173\u8054\u540e\u7684\u6570\u636e\uff0c\u6807\u8bb0\u4e3a +I\u3002\u8fd9\u6837\u751f\u6210\u7684\u52a8\u6001\u8868\u5bf9\u5e94\u7684\u6d41\u79f0\u4e4b\u4e3a\u56de\u64a4\u6d41\u3002\\n\\n\uff082\uff09Kafka SQL Connector\\n\\nKafka SQL Connector \u5206\u4e3a Kafka SQL Connector \u548c Upsert Kafka SQL Connector\\n\\n\u2460 \u529f\u80fd\\nUpsert Kafka Connector\u652f\u6301\u4ee5 upsert \u65b9\u5f0f\u4ece Kafka topic \u4e2d\u8bfb\u5199\u6570\u636e\\nKafka Connector\u652f\u6301\u4ece Kafka topic \u4e2d\u8bfb\u5199\u6570\u636e\\n\\n\u2461 \u533a\u522b\\n\\na\uff09\u5efa\u8868\u8bed\u53e5\u7684\u4e3b\u952e\\n\\ni\uff09Kafka Connector \u8981\u6c42\u8868\u4e0d\u80fd\u6709\u4e3b\u952e\uff0c\u5982\u679c\u8bbe\u7f6e\u4e86\u4e3b\u952e\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\\n\\nCaused by: org.apache.flink.table.api.ValidationException: The Kafka table \'default_catalog.default_database.normal_sink_topic\' with \'json\' format doesn\'t support defining PRIMARY KEY constraint on the table, because it can\'t guarantee the semantic of primary key.\\nii\uff09\\n\\n\u800c Upsert Kafka Connector \u8981\u6c42\u8868\u5fc5\u987b\u6709\u4e3b\u952e\uff0c\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\u4e3b\u952e\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\\n\\nCaused by: org.apache.flink.table.api.ValidationException: \'upsert-kafka\' tables require to define a PRIMARY KEY constraint. The PRIMARY KEY specifies which columns should be read from or write to the Kafka message key. The PRIMARY KEY also defines records in the \'upsert-kafka\' table should update or delete on which keys.\\niii\uff09\\n\\n\u8bed\u6cd5\uff1a primary key(id) not enforced \\n\\n\u6ce8\u610f\uff1anot enforced \u8868\u793a\u4e0d\u5bf9\u6765\u5f80\u6570\u636e\u505a\u7ea6\u675f\u6821\u9a8c\uff0cFlink \u5e76\u4e0d\u662f\u6570\u636e\u7684\u4e3b\u4eba\uff0c\u56e0\u6b64\u53ea\u652f\u6301 not enforced \u6a21\u5f0f\\n\\n\u5982\u679c\u6ca1\u6709 not enforced\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\\n\\nException in thread \\"main\\" org.apache.flink.table.api.ValidationException: Flink doesn\'t support ENFORCED mode for PRIMARY KEY constaint. ENFORCED/NOT ENFORCED  controls if the constraint checks are performed on the incoming/outgoing data. Flink does not own the data therefore the only supported mode is the NOT ENFORCED mode\\n\\nb\uff09\u5bf9\u8868\u4e2d\u6570\u636e\u64cd\u4f5c\u7c7b\u578b\u7684\u8981\u6c42\\n\\ni\uff09Kafka Connector \u4e0d\u80fd\u6d88\u8d39\u5e26\u6709 Upsert/Delete \u64cd\u4f5c\u7c7b\u578b\u6570\u636e\u7684\u8868\uff0c\u5982 left join \u751f\u6210\u7684\u52a8\u6001\u8868\u3002\u5982\u679c\u5bf9\u8fd9\u7c7b\u8868\u8fdb\u884c\u6d88\u8d39\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\\n\\nException in thread \\"main\\" org.apache.flink.table.api.TableException: Table sink \'default_catalog.default_database.normal_sink_topic\' doesn\'t support consuming update and delete changes which is produced by node TableSourceScan(table=[[default_catalog, default_database, Unregistered_DataStream_Source_9]], fields=[l_id, tag_left, tag_right])\\nii\uff09\\n\\nUpsert Kafka Connector \u5c06 INSERT/UPDATE_AFTER \u6570\u636e\u4f5c\u4e3a\u6b63\u5e38\u7684 Kafka \u6d88\u606f\u5199\u5165\uff0c\u5e76\u5c06 DELETE \u6570\u636e\u4ee5 value \u4e3a\u7a7a\u7684 Kafka \u6d88\u606f\u5199\u5165\uff08\u8868\u793a\u5bf9\u5e94 key \u7684\u6d88\u606f\u88ab\u5220\u9664\uff09\u3002\\n\\nFlink \u5c06\u6839\u636e\u4e3b\u952e\u5217\u7684\u503c\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u533a\uff0c\u56e0\u6b64\u540c\u4e00\u4e3b\u952e\u7684\u66f4\u65b0/\u5220\u9664\u6d88\u606f\u5c06\u843d\u5728\u540c\u4e00\u5206\u533a\uff0c\u4ece\u800c\u4fdd\u8bc1\u540c\u4e00\u4e3b\u952e\u7684\u6d88\u606f\u6709\u5e8f\u3002\\n\\n\u2462 left join \u7ed3\u5408 Upsert Kafka Connector \u4f7f\u7528\u8303\u4f8b\\n\\n\u8bf4\u660e\uff1aKafka \u5e76\u884c\u5ea6\u4e3a 4\\n\\na\uff09\u8868\u7ed3\u6784\\n\\nleft\u8868\\nid    tag\\nA    left\\nB    left\\nC    left \\n\\nright \u8868\\nid    tag\\nA    right\\nB    right\\nC    right\\n\\nb\uff09\u67e5\u8be2\u8bed\u53e5\\n\\nselect \\nl.id l_id,\\nl.tag l_tag,\\nr.tag r_tag\\nfrom left l \\nleft join \\nright r \\non l.id = r.id\\n\\nc\uff09\u5173\u8054\u7ed3\u679c\u5199\u5165\u5230 Upsert Kafka \u8868\uff0c\u6d88\u8d39 Kafka \u5bf9\u5e94\u4e3b\u9898\u6570\u636e\u7ed3\u679c\u5c55\u793a\\n\\n{\\"l_id\\":\\"A\\",\\"tag_left\\":\\"left\\",\\"tag_right\\":null}\\nnull\\n{\\"l_id\\":\\"A\\",\\"tag_left\\":\\"left\\",\\"tag_right\\":\\"right\\"}\\n{\\"l_id\\":\\"C\\",\\"tag_left\\":\\"left\\",\\"tag_right\\":null}\\nnull\\n{\\"l_id\\":\\"C\\",\\"tag_left\\":\\"left\\",\\"tag_right\\":\\"right\\"}\\n{\\"l_id\\":\\"B\\",\\"tag_left\\":\\"left\\",\\"tag_right\\":null}\\nnull\\n{\\"l_id\\":\\"B\\",\\"tag_left\\":\\"left\\",\\"tag_right\\":\\"right\\"}\\n\\n\u2463 \u53c2\u6570\u89e3\u8bfb\\n\u672c\u8282\u9700\u8981\u7528\u5230 Kafka \u8fde\u63a5\u5668\u7684\u660e\u7ec6\u8868\u6570\u636e\u6765\u6e90\u4e8e topic_db \u4e3b\u9898\uff0c\u4e8e Kafka \u800c\u8a00\uff0c\u8be5\u4e3b\u9898\u7684\u6570\u636e\u7684\u64cd\u4f5c\u7c7b\u578b\u5747\u4e3a INSERT\uff0c\u6240\u4ee5\u8bfb\u53d6\u6570\u636e\u4f7f\u7528 Kafka Connector \u5373\u53ef\u3002\u800c\u7531\u4e8e left join \u7684\u5b58\u5728\uff0c\u6d41\u4e2d\u5b58\u5728\u4fee\u6539\u6570\u636e\uff0c\u6240\u4ee5\u5199\u51fa\u6570\u636e\u4f7f\u7528 Upsert Kafka Connector\u3002\\n\\na\uff09Kafka Connector \u53c2\u6570\\n-\\tconnector\uff1a\u6307\u5b9a\u4f7f\u7528\u7684\u8fde\u63a5\u5668\uff0c\u5bf9\u4e8e Kafka\uff0c\u53ea\u7528 \'kafka\'\\n-\\ttopic\uff1a\u4e3b\u9898\\n-\\tproperties.bootstrap.servers\uff1a\u4ee5\u9017\u53f7\u5206\u9694\u7684 Kafka broker \u5217\u8868\u3002\u6ce8\u610f\uff1a\u53ef\u4ee5\u901a\u8fc7 properties.* \u7684\u65b9\u5f0f\u6307\u5b9a\u914d\u7f6e\u9879\uff0c*\u7684\u4f4d\u7f6e\u7528 Kafka \u5b98\u65b9\u89c4\u5b9a\u7684\u914d\u7f6e\u9879\u7684 key \u66ff\u4ee3\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u914d\u7f6e\uff0c\u56e0\u4e3a Flink \u53ef\u80fd\u4f1a\u5c06\u5b83\u4eec\u8986\u76d6\uff0c\u5982\uff1a\'key.deserializer\' \u548c \'value.deserializer\'\\n-\\tproperties.group.id\uff1a\u6d88\u8d39\u8005\u7ec4 ID\\n-\\tformat\uff1a\u6307\u5b9a Kafka \u6d88\u606f\u4e2d value \u90e8\u5206\u7684\u5e8f\u5217\u5316\u7684\u53cd\u5e8f\u5217\u5316\u65b9\u5f0f\uff0c\'format\' \u548c \'value.format\' \u4e8c\u8005\u5fc5\u6709\u5176\u4e00\\n-\\tscan.startup.mode\uff1aKafka \u6d88\u8d39\u8005\u542f\u52a8\u6a21\u5f0f\uff0c\u6709\u56db\u79cd\u53d6\u503c\\n-\\t\'earliest-offset\'\uff1a\u4ece\u504f\u79fb\u91cf\u6700\u65e9\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\\n-\\t\'latest-offset\'\uff1a\u4ece\u504f\u79fb\u91cf\u6700\u65b0\u7684\u4f4d\u7f6e\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\\n-\\t\'group-offsets\'\uff1a\u4ece Zookeeper/Kafka broker \u4e2d\u7ef4\u62a4\u7684\u6d88\u8d39\u8005\u7ec4\u504f\u79fb\u91cf\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\\n-\\t\'timestamp\'\uff1a\u4ece\u7528\u6237\u4e3a\u6bcf\u4e2a\u5206\u533a\u63d0\u4f9b\u7684\u65f6\u95f4\u6233\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\\n-\\t\'specific-offsets\'\uff1a\u4ece\u7528\u6237\u4e3a\u6bcf\u4e2a\u5206\u533a\u63d0\u4f9b\u7684\u504f\u79fb\u91cf\u5f00\u59cb\u8bfb\u53d6\u6570\u636e\\n\\n\u9ed8\u8ba4\u503c\u4e3a group-offsets\u3002\u8981\u6ce8\u610f\uff1alatest-offset \u4e0e Kafka \u5b98\u65b9\u63d0\u4f9b\u7684\u914d\u7f6e\u9879 latest \u4e0d\u540c\uff0c Flink \u4f1a\u5c06\u504f\u79fb\u91cf\u7f6e\u4e3a\u6700\u65b0\u4f4d\u7f6e\uff0c\u8986\u76d6\u6389 Zookeeper \u6216 Kafka \u4e2d\u7ef4\u62a4\u7684\u504f\u79fb\u91cf\u3002\\n\\n\u4e0e\u5b98\u65b9\u63d0\u4f9b\u7684 latest \u76f8\u5bf9\u5e94\u7684\u662f\u6b64\u5904\u7684 group-offsets\u3002\\n\\nb\uff09Upsert Kafka Connector \u53c2\u6570\\n\\n-\\tconnector\uff1a\u6307\u5b9a\u4f7f\u7528\u7684\u8fde\u63a5\u5668\uff0c\u5bf9\u4e8e Upsert Kafka\uff0c\u4f7f\u7528 \'upsert-kafka\'\\n-\\ttopic\uff1a\u4e3b\u9898\\n-\\tproperties.bootstrap.servers\uff1a\u4ee5\u9017\u53f7\u5206\u9694\u7684 Kafka broker \u5217\u8868\\n-\\tkey.format\uff1akey \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u683c\u5f0f\\n-\\tvalue.format\uff1avalue \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u683c\u5f0f\\n\\n2\uff09\u6267\u884c\u6b65\u9aa4\\n\u9884\u5904\u7406\u8868\u4e0e\u8ba2\u5355\u660e\u7ec6\u4e8b\u52a1\u4e8b\u5b9e\u8868\u7684\u533a\u522b\u53ea\u5728\u4e8e\u524d\u8005\u4e0d\u4f1a\u6309\u7167\u8ba2\u5355\u6570\u636e\u7684 type \u548c old \u5b57\u6bb5\u505a\u8fc7\u6ee4\uff0c\u4e14\u5728\u8868\u4e2d\u589e\u52a0\u4e86\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u3002\u4e8c\u8005\u7684\u7c92\u5ea6\u3001\u805a\u5408\u903b\u8f91\u90fd\u76f8\u540c\uff0c\u56e0\u6b64\u6309\u7167\u8ba2\u5355\u660e\u7ec6\u8868\u7684\u601d\u8def\u5bf9\u9884\u5904\u7406\u8868\u8fdb\u884c\u5206\u6790\u5373\u53ef\u3002\\n\\n\uff081\uff09\u4ece Kafka topic_db \u4e3b\u9898\u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff1b\\n\u8fd9\u4e00\u6b65\u8981\u8c03\u7528 PROCTIME() \u51fd\u6570\u83b7\u53d6\u7cfb\u7edf\u65f6\u95f4\u4f5c\u4e3a\u4e0e\u5b57\u5178\u8868\u505a Lookup Join \u7684\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\u3002\\n\\n\uff082\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u8868\u6570\u636e\uff1b\\n\u5e94\u5c3d\u53ef\u80fd\u4fdd\u8bc1\u4e8b\u5b9e\u8868\u7684\u7c92\u5ea6\u4e3a\u6700\u7ec6\u7c92\u5ea6\uff0c\u5728\u4e0b\u5355\u4e1a\u52a1\u8fc7\u7a0b\u4e2d\uff0c\u6700\u7ec6\u7c92\u5ea6\u7684\u4e8b\u4ef6\u4e3a\u4e00\u4e2a\u8ba2\u5355\u7684\u4e00\u4e2a SKU \u7684\u4e0b\u5355\u64cd\u4f5c\uff0c\u8ba2\u5355\u660e\u7ec6\u8868\u7684\u7c92\u5ea6\u4e0e\u6700\u7ec6\u7c92\u5ea6\u76f8\u540c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e3b\u8868\u3002\\n\\n\uff083\uff09\u7b5b\u9009\u8ba2\u5355\u8868\u6570\u636e\uff1b\\n\u901a\u8fc7\u8be5\u8868\u83b7\u53d6 user_id \u548c province_id\u3002\u4fdd\u7559 type \u5b57\u6bb5\u548c old \u5b57\u6bb5\u7528\u4e8e\u8fc7\u6ee4\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u548c\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u3002\\n\\n\uff084\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u6d3b\u52a8\u5173\u8054\u8868\u6570\u636e\uff1b\\n\u901a\u8fc7\u8be5\u8868\u83b7\u53d6\u6d3b\u52a8 id \u548c\u6d3b\u52a8\u89c4\u5219 id\u3002\\n\\n\uff085\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u4f18\u60e0\u5238\u5173\u8054\u8868\u6570\u636e\uff1b\\n\u901a\u8fc7\u8be5\u8868\u83b7\u53d6\u4f18\u60e0\u5238 id\u3002\\n\\n\uff086\uff09\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\uff1b\\n\u901a\u8fc7\u5b57\u5178\u8868\u83b7\u53d6\u8ba2\u5355\u6765\u6e90\u7c7b\u578b\u540d\u79f0\u3002\\n\\n\uff087\uff09\u5173\u8054\u4e0a\u8ff0\u4e94\u5f20\u8868\u83b7\u5f97\u8ba2\u5355\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u4e3b\u9898\\n\u4e3b\u8868\u4e0e\u5176\u4f59\u56db\u5f20\u8868\u7684\u5173\u8054\u90fd\u4e3a\u4e86\u83b7\u53d6\u7ef4\u5ea6\u4fe1\u606f\uff0c\u4f7f\u7528\u5de6\u5916\u8fde\u63a5\u5373\u53ef\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242778-9c825356-7b33-4916-a436-fdc6475d9f1e.png)\\n\\n### \u4ee3\u7801\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.time.ZoneId;\\n\\npublic class DwdTradeOrderPreProcess {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.setRestartStrategy(\\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\\n        );\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of(\\"GMT+8\\"));\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` String,\\\\n\\" +\\n                \\"`table` String,\\\\n\\" +\\n                \\"`type` String,\\\\n\\" +\\n                \\"`data` map<String, String>,\\\\n\\" +\\n                \\"`old` map<String, String>,\\\\n\\" +\\n                \\"`proc_time` as PROCTIME(),\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_trade_order_pre_process\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u8ba2\u5355\u660e\u7ec6\u8868\u6570\u636e\\n        Table orderDetail = tableEnv.sqlQuery(\\"select \\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                \\"data[\'sku_name\'] sku_name,\\\\n\\" +\\n                \\"data[\'create_time\'] create_time,\\\\n\\" +\\n                \\"data[\'source_id\'] source_id,\\\\n\\" +\\n                \\"data[\'source_type\'] source_type,\\\\n\\" +\\n                \\"data[\'sku_num\'] sku_num,\\\\n\\" +\\n                \\"cast(cast(data[\'sku_num\'] as decimal(16,2)) * \\" +\\n                \\"cast(data[\'order_price\'] as decimal(16,2)) as String) split_original_amount,\\\\n\\" +\\n                \\"data[\'split_total_amount\'] split_total_amount,\\\\n\\" +\\n                \\"data[\'split_activity_amount\'] split_activity_amount,\\\\n\\" +\\n                \\"data[\'split_coupon_amount\'] split_coupon_amount,\\\\n\\" +\\n                \\"ts od_ts,\\\\n\\" +\\n                \\"proc_time\\\\n\\" +\\n                \\"from `topic_db` where `table` = \'order_detail\' \\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"order_detail\\", orderDetail);\\n\\n        // TODO 5. \u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\\n        Table orderInfo = tableEnv.sqlQuery(\\"select \\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'province_id\'] province_id,\\\\n\\" +\\n                \\"data[\'operate_time\'] operate_time,\\\\n\\" +\\n                \\"data[\'order_status\'] order_status,\\\\n\\" +\\n                \\"`type`,\\\\n\\" +\\n                \\"`old`,\\\\n\\" +\\n                \\"ts oi_ts\\\\n\\" +\\n                \\"from `topic_db`\\\\n\\" +\\n                \\"where `table` = \'order_info\'\\\\n\\" +\\n                \\"and (`type` = \'insert\' or `type` = \'update\')\\");\\n        tableEnv.createTemporaryView(\\"order_info\\", orderInfo);\\n\\n        // TODO 6. \u8bfb\u53d6\u8ba2\u5355\u660e\u7ec6\u6d3b\u52a8\u5173\u8054\u8868\u6570\u636e\\n        Table orderDetailActivity = tableEnv.sqlQuery(\\"select \\\\n\\" +\\n                \\"data[\'order_detail_id\'] order_detail_id,\\\\n\\" +\\n                \\"data[\'activity_id\'] activity_id,\\\\n\\" +\\n                \\"data[\'activity_rule_id\'] activity_rule_id\\\\n\\" +\\n                \\"from `topic_db`\\\\n\\" +\\n                \\"where `table` = \'order_detail_activity\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"order_detail_activity\\", orderDetailActivity);\\n\\n        // TODO 7. \u8bfb\u53d6\u8ba2\u5355\u660e\u7ec6\u4f18\u60e0\u5238\u5173\u8054\u8868\u6570\u636e\\n        Table orderDetailCoupon = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'order_detail_id\'] order_detail_id,\\\\n\\" +\\n                \\"data[\'coupon_id\'] coupon_id\\\\n\\" +\\n                \\"from `topic_db`\\\\n\\" +\\n                \\"where `table` = \'order_detail_coupon\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"order_detail_coupon\\", orderDetailCoupon);\\n\\n        // TODO 8. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\\n\\n        // TODO 9. \u5173\u8054\u4e94\u5f20\u8868\u83b7\u5f97\u8ba2\u5355\u660e\u7ec6\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"select \\\\n\\" +\\n                \\"od.id,\\\\n\\" +\\n                \\"od.order_id,\\\\n\\" +\\n                \\"oi.user_id,\\\\n\\" +\\n                \\"oi.order_status,\\\\n\\" +\\n                \\"od.sku_id,\\\\n\\" +\\n                \\"od.sku_name,\\\\n\\" +\\n                \\"oi.province_id,\\\\n\\" +\\n                \\"act.activity_id,\\\\n\\" +\\n                \\"act.activity_rule_id,\\\\n\\" +\\n                \\"cou.coupon_id,\\\\n\\" +\\n                \\"date_format(od.create_time, \'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"od.create_time,\\\\n\\" +\\n                \\"date_format(oi.operate_time, \'yyyy-MM-dd\') operate_date_id,\\\\n\\" +\\n                \\"oi.operate_time,\\\\n\\" +\\n                \\"od.source_id,\\\\n\\" +\\n                \\"od.source_type,\\\\n\\" +\\n                \\"dic.dic_name source_type_name,\\\\n\\" +\\n                \\"od.sku_num,\\\\n\\" +\\n                \\"od.split_original_amount,\\\\n\\" +\\n                \\"od.split_activity_amount,\\\\n\\" +\\n                \\"od.split_coupon_amount,\\\\n\\" +\\n                \\"od.split_total_amount,\\\\n\\" +\\n                \\"oi.`type`,\\\\n\\" +\\n                \\"oi.`old`,\\\\n\\" +\\n                \\"od.od_ts,\\\\n\\" +\\n                \\"oi.oi_ts,\\\\n\\" +\\n                \\"current_row_timestamp() row_op_ts\\\\n\\" +\\n                \\"from order_detail od \\\\n\\" +\\n                \\"join order_info oi\\\\n\\" +\\n                \\"on od.order_id = oi.id\\\\n\\" +\\n                \\"left join order_detail_activity act\\\\n\\" +\\n                \\"on od.id = act.order_detail_id\\\\n\\" +\\n                \\"left join order_detail_coupon cou\\\\n\\" +\\n                \\"on od.id = cou.order_detail_id\\\\n\\" +\\n                \\"left join `base_dic` for system_time as of od.proc_time as dic\\\\n\\" +\\n                \\"on od.source_type = dic.dic_code\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 10. \u5efa\u7acb Upsert-Kafka dwd_trade_order_pre_process \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table dwd_trade_order_pre_process(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"order_status string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"operate_date_id string,\\\\n\\" +\\n                \\"operate_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_total_amount string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`old` map<string,string>,\\\\n\\" +\\n                \\"od_ts string,\\\\n\\" +\\n                \\"oi_ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3),\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_order_pre_process\\"));\\n\\n        // TODO 11. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_trade_order_pre_process \\\\n\\" +\\n                \\"select * from result_table\\")\\n                .print();\\n\\n        env.execute();\\n    }\\n}\\n```\\n## \u4ea4\u6613\u57df\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u4ece Kafka \u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u8868\u6570\u636e\uff0c\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff0c\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002\\n\\n### \u601d\u8def\u5206\u6790\\n\\n\u5b9e\u73b0\u6b65\u9aa4\\n\\n\uff081\uff09\u4ece Kafka dwd_trade_order_pre_process \u4e3b\u9898\u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u6570\u636e\uff1b\\n\\n\uff082\uff09\u7b5b\u9009\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff1a\u65b0\u589e\u6570\u636e\uff0c\u5373\u8ba2\u5355\u8868\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u4e3a\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff1b\\n\\n\uff083\uff09\u5199\u5165 Kafka \u8ba2\u5355\u660e\u7ec6\u4e3b\u9898\u3002\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242807-36dcfafa-0ea0-4ee0-b3c9-e076a5b343a0.png)\\n\\n### \u4ee3\u7801\\n\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.time.ZoneId;\\n\\npublic class DwdTradeOrderDetail {\\n\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.setRestartStrategy(\\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\\n        );\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of(\\"GMT+8\\"));\\n\\n        // TODO 3. \u8bfb\u53d6 Kafka dwd_trade_order_pre_process \u4e3b\u9898\u6570\u636e\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table dwd_trade_order_pre_process(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"order_status string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"operate_date_id string,\\\\n\\" +\\n                \\"operate_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_total_amount string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`old` map<string,string>,\\\\n\\" +\\n                \\"od_ts string,\\\\n\\" +\\n                \\"oi_ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3)\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\n                \\"dwd_trade_order_pre_process\\", \\"dwd_trade_order_detail\\"));\\n\\n        // TODO 4. \u8fc7\u6ee4\u4e0b\u5355\u6570\u636e\\n        Table filteredTable = tableEnv.sqlQuery(\\"\\" +\\n                \\"select \\" +\\n                \\"id,\\\\n\\" +\\n                \\"order_id,\\\\n\\" +\\n                \\"user_id,\\\\n\\" +\\n                \\"sku_id,\\\\n\\" +\\n                \\"sku_name,\\\\n\\" +\\n                \\"province_id,\\\\n\\" +\\n                \\"activity_id,\\\\n\\" +\\n                \\"activity_rule_id,\\\\n\\" +\\n                \\"coupon_id,\\\\n\\" +\\n                \\"date_id,\\\\n\\" +\\n                \\"create_time,\\\\n\\" +\\n                \\"source_id,\\\\n\\" +\\n                \\"source_type source_type_code,\\\\n\\" +\\n                \\"source_type_name,\\\\n\\" +\\n                \\"sku_num,\\\\n\\" +\\n                \\"split_original_amount,\\\\n\\" +\\n                \\"split_activity_amount,\\\\n\\" +\\n                \\"split_coupon_amount,\\\\n\\" +\\n                \\"split_total_amount,\\\\n\\" +\\n                \\"od_ts ts,\\\\n\\" +\\n                \\"row_op_ts\\\\n\\" +\\n                \\"from dwd_trade_order_pre_process \\" +\\n                \\"where `type`=\'insert\'\\");\\n        tableEnv.createTemporaryView(\\"filtered_table\\", filteredTable);\\n\\n        // TODO 5. \u521b\u5efa Kafka \u4e0b\u5355\u660e\u7ec6\u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table dwd_trade_order_detail(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type_code string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_total_amount string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3),\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_order_detail\\"));\\n\\n        // TODO 6. \u5c06\u6570\u636e\u5199\u51fa\u5230 Kafka\\n        tableEnv.executeSql(\\"insert into dwd_trade_order_detail select * from filtered_table\\");\\n    }\\n}\\n```\\n## \u4ea4\u6613\u57df\u53d6\u6d88\u8ba2\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u4ece Kafka \u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u8868\u6570\u636e\uff0c\u7b5b\u9009\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff0c\u5199\u5165 Kafka \u5bf9\u5e94\u4e3b\u9898\u3002\\n\\n### \u601d\u8def\u5206\u6790\\n\\n\u5b9e\u73b0\u6b65\u9aa4\\n\\n\uff081\uff09\u4ece Kafka dwd_trade_order_pre_process \u4e3b\u9898\u8bfb\u53d6\u8ba2\u5355\u9884\u5904\u7406\u6570\u636e\uff1b\\n\\n\uff082\uff09\u7b5b\u9009\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\uff1a\u4fdd\u7559\u4fee\u6539\u4e86 order_status \u5b57\u6bb5\u4e14\u4fee\u6539\u540e\u8be5\u5b57\u6bb5\u503c\u4e3a \\"1003\\" \u7684\u6570\u636e;\\n\\n\uff083\uff09\u5199\u5165 Kafka \u53d6\u6d88\u8ba2\u5355\u4e3b\u9898\u3002\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242824-aeb7b7b9-afb7-407e-b5ab-3bd377c577e1.png)\\n\\n### \u4ee3\u7801\\n\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.time.ZoneId;\\n\\npublic class DwdTradeCancelDetail  {\\n\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.setRestartStrategy(\\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\\n        );\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of(\\"GMT+8\\"));\\n\\n        // TODO 3. \u8bfb\u53d6 Kafka dwd_trade_order_pre_process \u4e3b\u9898\u6570\u636e\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table dwd_trade_order_pre_process(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"order_status string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"operate_date_id string,\\\\n\\" +\\n                \\"operate_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_total_amount string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`old` map<string,string>,\\\\n\\" +\\n                \\"od_ts string,\\\\n\\" +\\n                \\"oi_ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3)\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\n                        \\"dwd_trade_order_pre_process\\", \\"dwd_trade_cancel_detail\\"));\\n\\n        // TODO 4. \u7b5b\u9009\u53d6\u6d88\u8ba2\u5355\u660e\u7ec6\u6570\u636e\\n        Table filteredTable = tableEnv.sqlQuery(\\"\\" +\\n                \\"select\\\\n\\" +\\n                \\"id,\\\\n\\" +\\n                \\"order_id,\\\\n\\" +\\n                \\"user_id,\\\\n\\" +\\n                \\"sku_id,\\\\n\\" +\\n                \\"sku_name,\\\\n\\" +\\n                \\"province_id,\\\\n\\" +\\n                \\"activity_id,\\\\n\\" +\\n                \\"activity_rule_id,\\\\n\\" +\\n                \\"coupon_id,\\\\n\\" +\\n                \\"operate_date_id date_id,\\\\n\\" +\\n                \\"operate_time cancel_time,\\\\n\\" +\\n                \\"source_id,\\\\n\\" +\\n                \\"source_type source_type_code,\\\\n\\" +\\n                \\"source_type_name,\\\\n\\" +\\n                \\"sku_num,\\\\n\\" +\\n                \\"split_original_amount,\\\\n\\" +\\n                \\"split_activity_amount,\\\\n\\" +\\n                \\"split_coupon_amount,\\\\n\\" +\\n                \\"split_total_amount,\\\\n\\" +\\n                \\"oi_ts ts,\\\\n\\" +\\n                \\"row_op_ts\\\\n\\" +\\n                \\"from dwd_trade_order_pre_process\\\\n\\" +\\n                \\"where `type` = \'update\'\\\\n\\" +\\n                \\"and `old`[\'order_status\'] is not null\\\\n\\" +\\n                \\"and order_status = \'1003\'\\");\\n        tableEnv.createTemporaryView(\\"filtered_table\\", filteredTable);\\n\\n        // TODO 5. \u5efa\u7acb Upsert-Kafka dwd_trade_cancel_detail \u8868\\n        tableEnv.executeSql(\\"create table dwd_trade_cancel_detail(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"cancel_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type_code string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_total_amount string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3),\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_cancel_detail\\"));\\n\\n        // TODO 6. \u5c06\u6570\u636e\u5199\u51fa\u5230 Kafka\\n        tableEnv.executeSql(\\n                \\"insert into dwd_trade_cancel_detail select * from filtered_table\\");\\n    }\\n\\n}\\n```\\n## \u4ea4\u6613\u57df\u652f\u4ed8\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u4ece Kafka topic_db\u4e3b\u9898\u7b5b\u9009\u652f\u4ed8\u6210\u529f\u6570\u636e\u3001\u4ecedwd_trade_order_detail\u4e3b\u9898\u4e2d\u8bfb\u53d6\u8ba2\u5355\u4e8b\u5b9e\u6570\u636e\u3001MySQL-LookUp\u5b57\u5178\u8868\uff0c\u5173\u8054\u4e09\u5f20\u8868\u5f62\u6210\u652f\u4ed8\u6210\u529f\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u652f\u4ed8\u6210\u529f\u4e3b\u9898\u3002\\n\\n### \u601d\u8def\u5206\u6790\\n\\n1\uff09\u83b7\u53d6\u8ba2\u5355\u660e\u7ec6\u6570\u636e\\n\\n\u7528\u6237\u5fc5\u7136\u8981\u5148\u4e0b\u5355\u624d\u6709\u53ef\u80fd\u652f\u4ed8\u6210\u529f\uff0c\u56e0\u6b64\u652f\u4ed8\u6210\u529f\u660e\u7ec6\u6570\u636e\u96c6\u5fc5\u7136\u662f\u8ba2\u5355\u660e\u7ec6\u6570\u636e\u96c6\u7684\u5b50\u96c6\u3002\\n\\n2\uff09\u7b5b\u9009\u652f\u4ed8\u8868\u6570\u636e\\n\\n\\t\u83b7\u53d6\u652f\u4ed8\u7c7b\u578b\u3001\u56de\u8c03\u65f6\u95f4\uff08\u652f\u4ed8\u6210\u529f\u65f6\u95f4\uff09\u3001\u652f\u4ed8\u6210\u529f\u65f6\u95f4\u6233\u3002\\n  \\n\\t\u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u7528\u6237\u652f\u4ed8\u540e\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u652f\u4ed8\u8868\u4f1a\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6\u7684\u56de\u8c03\u65f6\u95f4\u548c\u56de\u8c03\u5185\u5bb9\u4e3a\u7a7a\u3002\u901a\u5e38\u5e95\u5c42\u4f1a\u8c03\u7528\u7b2c\u4e09\u65b9\u652f\u4ed8\u63a5\u53e3\uff0c\u63a5\u53e3\u4f1a\u8fd4\u56de\u56de\u8c03\u4fe1\u606f\uff0c\u5982\u679c\u652f\u4ed8\u6210\u529f\u5219\u56de\u8c03\u4fe1\u606f\u4e0d\u4e3a\u7a7a\uff0c\u6b64\u65f6\u4f1a\u66f4\u65b0\u652f\u4ed8\u8868\uff0c\u8865\u5168\u56de\u8c03\u65f6\u95f4\u548c\u56de\u8c03\u5185\u5bb9\u5b57\u6bb5\u7684\u503c\uff0c\u5e76\u5c06 payment_status \u5b57\u6bb5\u7684\u503c\u4fee\u6539\u4e3a\u652f\u4ed8\u6210\u529f\u5bf9\u5e94\u7684\u72b6\u6001\u7801\uff08\u672c\u9879\u76ee\u4e3a 1602\uff09\u3002\\n  \\n  \u652f\u4ed8\u6210\u529f\u4e4b\u540e\uff0c\u652f\u4ed8\u8868\u6570\u636e\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u4e14\u72b6\u6001\u7801\u4e3a 1602 \u5373\u4e3a\u652f\u4ed8\u6210\u529f\u6570\u636e\u3002\\n  \\n\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\uff0c\u652f\u4ed8\u6210\u529f\u5bf9\u5e94\u7684\u4e1a\u52a1\u6570\u636e\u5e93\u53d8\u5316\u65e5\u5fd7\u5e94\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\\n\\n\uff081\uff09payment_status \u5b57\u6bb5\u7684\u503c\u4e3a 1602\uff1b\\n\\n\uff082\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\u3002\\n\\n\u6ce8\uff1a1602 \u5728\u5b57\u5178\u8868\u4e2d\u5e76\u6ca1\u6709\u5bf9\u5e94\u8bb0\u5f55\uff0c\u4e14 payment_info \u4e2d payment_status \u5b57\u6bb5\u7684\u503c\u5747\u4e3a null\uff0c\u8fd9\u662f\u6a21\u62df\u6570\u636e\u7684\u95ee\u9898\uff0c\u5e76\u4e0d\u5f71\u54cd\u4e1a\u52a1\u903b\u8f91\uff0c\u65e0\u987b\u6df1\u7a76\u3002\\n\\n\u4e3a\u4e86\u770b\u5230\u6548\u679c\uff0c\u6ce8\u91ca\u5bf9\u6761\u4ef6\uff081\uff09\u7684\u5224\u65ad\u3002\\n\\n\u6b64\u5916\uff0c\u6a21\u62df\u7684 payment_info \u8868\u6570\u636e\u6ca1\u6709\u4e0a\u8ff0\u63d0\u5230\u7684\u53d8\u5316\uff0c\u53ea\u5728\u652f\u4ed8\u6210\u529f\u65f6\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6\u7684 callback_time \u5b57\u6bb5\u503c\u5df2\u7ecf\u4e0d\u4e3a null\uff0c\u5373\u8be5\u8868\u4e2d\u7684\u6240\u6709\u6570\u636e\u5747\u4e3a\u652f\u4ed8\u6210\u529f\u6570\u636e\u3002\\n\\n\u4e3a\u4e86\u770b\u5230\u6548\u679c\uff0c\u6ce8\u91ca\u5bf9\u6761\u4ef6\uff082\uff09\u7684\u5224\u65ad\u3002\\n\\n\u672c\u7a0b\u5e8f\u4e3a\u4e86\u53bb\u9664\u91cd\u590d\u6570\u636e\uff0c\u5728\u5173\u8054\u540e\u7684\u5bbd\u8868\u4e2d\u8865\u5145\u4e86\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\uff0cDWS \u5c42\u5c06\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd\u3002\\n\\n\u652f\u4ed8\u6210\u529f\u8868\u662f\u7531\u652f\u4ed8\u6210\u529f\u6570\u636e\u4e0e\u8ba2\u5355\u660e\u7ec6\u505a\u5185\u8fde\u63a5\uff0c\u800c\u540e\u4e0e\u5b57\u5178\u8868\u505a LookUp Join \u5f97\u6765\u3002\\n\\n\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u56de\u64a4\u6570\u636e\uff0c\u5173\u8054\u540e\u8868\u7684\u91cd\u590d\u6570\u636e\u6765\u6e90\u4e8e\u8ba2\u5355\u660e\u7ec6\u8868\uff0c\u6240\u4ee5\u5e94\u6309\u7167\u8ba2\u5355\u660e\u7ec6\u8868\u7684\u5904\u7406\u65f6\u95f4\u5b57\u6bb5\u53bb\u91cd\uff0c\u6545\u652f\u4ed8\u6210\u529f\u660e\u7ec6\u8868\u7684 row_op_ts \u53d6\u81ea\u8ba2\u5355\u660e\u7ec6\u8868\u3002\\n\\n3\uff09\u6784\u5efa MySQL-LookUp \u5b57\u5178\u8868\\n\\n4\uff09\u5173\u8054\u4e0a\u8ff0\u4e09\u5f20\u8868\u5f62\u6210\u652f\u4ed8\u6210\u529f\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u652f\u4ed8\u6210\u529f\u4e3b\u9898\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242855-0d3f0e7c-68d8-4445-ba81-d75ea6da16a1.png)\\n\\n### \u4ee3\u7801\\n\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.time.ZoneId;\\n\\npublic class DwdTradePayDetailSuc {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u57fa\u672c\u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of(\\"GMT+8\\"));\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u8bfb\u53d6 Kafka dwd_trade_order_detail \u4e3b\u9898\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"create table dwd_trade_order_detail(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type_code string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_total_amount string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3)\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"dwd_trade_order_detail\\", \\"dwd_trade_pay_detail_suc\\"));\\n\\n        // TODO 4. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` String,\\\\n\\" +\\n                \\"`table` String,\\\\n\\" +\\n                \\"`type` String,\\\\n\\" +\\n                \\"`data` map<String, String>,\\\\n\\" +\\n                \\"`old` map<String, String>,\\\\n\\" +\\n                \\"`proc_time` as PROCTIME(),\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_trade_pay_detail_suc\\"));\\n\\n        // TODO 5. \u7b5b\u9009\u652f\u4ed8\u6210\u529f\u6570\u636e\\n        Table paymentInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                \\"data[\'payment_type\'] payment_type,\\\\n\\" +\\n                \\"data[\'callback_time\'] callback_time,\\\\n\\" +\\n                \\"`proc_time`,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'payment_info\'\\\\n\\"\\n//                +\\n//                \\"and `type` = \'update\'\\\\n\\" +\\n//                \\"and data[\'payment_status\']=\'1602\'\\"\\n        );\\n        tableEnv.createTemporaryView(\\"payment_info\\", paymentInfo);\\n\\n        // TODO 6. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\\n\\n        // TODO 7. \u5173\u8054 3 \u5f20\u8868\u83b7\u5f97\u652f\u4ed8\u6210\u529f\u5bbd\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"\\" +\\n                \\"select\\\\n\\" +\\n                \\"od.id order_detail_id,\\\\n\\" +\\n                \\"od.order_id,\\\\n\\" +\\n                \\"od.user_id,\\\\n\\" +\\n                \\"od.sku_id,\\\\n\\" +\\n                \\"od.sku_name,\\\\n\\" +\\n                \\"od.province_id,\\\\n\\" +\\n                \\"od.activity_id,\\\\n\\" +\\n                \\"od.activity_rule_id,\\\\n\\" +\\n                \\"od.coupon_id,\\\\n\\" +\\n                \\"pi.payment_type payment_type_code,\\\\n\\" +\\n                \\"dic.dic_name payment_type_name,\\\\n\\" +\\n                \\"pi.callback_time,\\\\n\\" +\\n                \\"od.source_id,\\\\n\\" +\\n                \\"od.source_type_code,\\\\n\\" +\\n                \\"od.source_type_name,\\\\n\\" +\\n                \\"od.sku_num,\\\\n\\" +\\n                \\"od.split_original_amount,\\\\n\\" +\\n                \\"od.split_activity_amount,\\\\n\\" +\\n                \\"od.split_coupon_amount,\\\\n\\" +\\n                \\"od.split_total_amount split_payment_amount,\\\\n\\" +\\n                \\"pi.ts,\\\\n\\" +\\n                \\"od.row_op_ts row_op_ts\\\\n\\" +\\n                \\"from payment_info pi\\\\n\\" +\\n                \\"join dwd_trade_order_detail od\\\\n\\" +\\n                \\"on pi.order_id = od.order_id\\\\n\\" +\\n                \\"left join `base_dic` for system_time as of pi.proc_time as dic\\\\n\\" +\\n                \\"on pi.payment_type = dic.dic_code\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 8. \u521b\u5efa Kafka dwd_trade_pay_detail \u8868\\n        tableEnv.executeSql(\\"create table dwd_trade_pay_detail_suc(\\\\n\\" +\\n                \\"order_detail_id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"sku_name string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"activity_id string,\\\\n\\" +\\n                \\"activity_rule_id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"payment_type_code string,\\\\n\\" +\\n                \\"payment_type_name string,\\\\n\\" +\\n                \\"callback_time string,\\\\n\\" +\\n                \\"source_id string,\\\\n\\" +\\n                \\"source_type_code string,\\\\n\\" +\\n                \\"source_type_name string,\\\\n\\" +\\n                \\"sku_num string,\\\\n\\" +\\n                \\"split_original_amount string,\\\\n\\" +\\n                \\"split_activity_amount string,\\\\n\\" +\\n                \\"split_coupon_amount string,\\\\n\\" +\\n                \\"split_payment_amount string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3),\\\\n\\" +\\n                \\"primary key(order_detail_id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_pay_detail_suc\\"));\\n\\n        // TODO 9. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_trade_pay_detail_suc select * from result_table\\");\\n    }\\n}\\n```\\n## \u4ea4\u6613\u57df\u9000\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u7b5b\u9009\u9000\u5355\u8868\u6570\u636e\uff0c\u7b5b\u9009\u6ee1\u8db3\u6761\u4ef6\u7684\u8ba2\u5355\u8868\u6570\u636e\uff0c\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\uff0c\u5173\u8054\u4e09\u5f20\u8868\u83b7\u5f97\u9000\u5355\u660e\u7ec6\u5bbd\u8868\u3002\\n\\n### \u601d\u8def\u5206\u6790\\n\\n1\uff09\u7b5b\u9009\u9000\u5355\u8868\u6570\u636e\\n\\n\\t\u9000\u5355\u4e1a\u52a1\u8fc7\u7a0b\u6700\u7ec6\u7c92\u5ea6\u7684\u64cd\u4f5c\u4e3a\u4e00\u4e2a\u8ba2\u5355\u4e2d\u4e00\u4e2a SKU \u7684\u9000\u5355\u64cd\u4f5c\uff0c\u9000\u5355\u8868\u7c92\u5ea6\u4e0e\u6700\u7ec6\u7c92\u5ea6\u76f8\u540c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e3b\u8868\u3002\\n  \\n2\uff09\u7b5b\u9009\u8ba2\u5355\u8868\u6570\u636e\u5e76\u8f6c\u5316\u4e3a\u6d41\\n\\n\\t\u83b7\u53d6 province_id\u3002\u9000\u5355\u64cd\u4f5c\u53d1\u751f\u65f6\uff0c\u8ba2\u5355\u8868\u7684 order_status \u5b57\u6bb5\u503c\u4f1a\u75311002\uff08\u5df2\u652f\u4ed8\uff09\u66f4\u65b0\u4e3a 1005\uff08\u9000\u6b3e\u4e2d\uff09\u3002\u8ba2\u5355\u8868\u4e2d\u7684\u6570\u636e\u8981\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\\n  \\n\uff081\uff09order_status \u4e3a 1005\uff08\u9000\u6b3e\u4e2d\uff09\uff1b\\n\\n\uff082\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b\\n\\n\uff083\uff09\u66f4\u65b0\u7684\u5b57\u6bb5\u4e3a order_status\u3002\\n\\n\u8be5\u5b57\u6bb5\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u53d8\u66f4\u6570\u636e\u4e2d old \u5b57\u6bb5\u4e0b order_status \u7684\u503c\u4e0d\u4e3a null\uff08\u4e3a 1002\uff09\u3002\\n\\n3\uff09\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\\n\\n\\t\u83b7\u53d6\u9000\u6b3e\u7c7b\u578b\u540d\u79f0\u548c\u9000\u6b3e\u539f\u56e0\u7c7b\u578b\u540d\u79f0\u3002\\n  \\n4\uff09\u5173\u8054\u8fd9\u51e0\u5f20\u8868\u83b7\u5f97\u9000\u5355\u660e\u7ec6\u5bbd\u8868\uff0c\u5199\u5165 Kafka \u9000\u5355\u660e\u7ec6\u4e3b\u9898\\n\\n\\t\u4e3b\u8868\u4e2d\u7684\u6570\u636e\u90fd\u4e0e\u9000\u5355\u4e1a\u52a1\u76f8\u5173\uff0c\u56e0\u6b64\u6240\u6709\u5173\u8054\u5747\u7528\u5de6\u5916\u8054\u5373\u53ef\u3002\u7b2c\u4e8c\u6b65\u662f\u5426\u5bf9\u8ba2\u5355\u8868\u6570\u636e\u7b5b\u9009\u5e76\u4e0d\u5f71\u54cd\u67e5\u8be2\u7ed3\u679c\uff0c\u63d0\u524d\u5bf9\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u662f\u4e3a\u4e86\u51cf\u5c11\u6570\u636e\u91cf\uff0c\u51cf\u5c11\u6027\u80fd\u6d88\u8017\u3002\u4e0b\u6587\u540c\u7406\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242887-d9848372-5e23-4e3e-9737-472fa67d50c4.png)\\n\\n### \u4ee3\u7801\\n\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\npublic class DwdTradeOrderRefund {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6 topic_db \u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`old` map<string, string>,\\\\n\\" +\\n                \\"`proc_time` as PROCTIME(),\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_trade_order_refund\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u9000\u5355\u8868\u6570\u636e\\n        Table orderRefundInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                \\"data[\'refund_type\'] refund_type,\\\\n\\" +\\n                \\"data[\'refund_num\'] refund_num,\\\\n\\" +\\n                \\"data[\'refund_amount\'] refund_amount,\\\\n\\" +\\n                \\"data[\'refund_reason_type\'] refund_reason_type,\\\\n\\" +\\n                \\"data[\'refund_reason_txt\'] refund_reason_txt,\\\\n\\" +\\n                \\"data[\'create_time\'] create_time,\\\\n\\" +\\n                \\"proc_time,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'order_refund_info\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"order_refund_info\\", orderRefundInfo);\\n\\n        // TODO 5. \u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\uff0c\u7b5b\u9009\u9000\u5355\u6570\u636e\\n        Table orderInfoRefund = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'province_id\'] province_id,\\\\n\\" +\\n                \\"`old`\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'order_info\'\\\\n\\" +\\n                \\"and `type` = \'update\'\\\\n\\" +\\n                \\"and data[\'order_status\']=\'1005\'\\\\n\\" +\\n                \\"and `old`[\'order_status\'] is not null\\");\\n\\n        tableEnv.createTemporaryView(\\"order_info_refund\\", orderInfoRefund);\\n\\n        // TODO 6. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\\n\\n        // TODO 7. \u5173\u8054\u4e09\u5f20\u8868\u83b7\u5f97\u9000\u5355\u5bbd\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"select \\\\n\\" +\\n                \\"ri.id,\\\\n\\" +\\n                \\"ri.user_id,\\\\n\\" +\\n                \\"ri.order_id,\\\\n\\" +\\n                \\"ri.sku_id,\\\\n\\" +\\n                \\"oi.province_id,\\\\n\\" +\\n                \\"date_format(ri.create_time,\'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"ri.create_time,\\\\n\\" +\\n                \\"ri.refund_type,\\\\n\\" +\\n                \\"type_dic.dic_name,\\\\n\\" +\\n                \\"ri.refund_reason_type,\\\\n\\" +\\n                \\"reason_dic.dic_name,\\\\n\\" +\\n                \\"ri.refund_reason_txt,\\\\n\\" +\\n                \\"ri.refund_num,\\\\n\\" +\\n                \\"ri.refund_amount,\\\\n\\" +\\n                \\"ri.ts,\\\\n\\" +\\n                \\"current_row_timestamp() row_op_ts\\\\n\\" +\\n                \\"from order_refund_info ri\\\\n\\" +\\n                \\"left join \\\\n\\" +\\n                \\"order_info_refund oi\\\\n\\" +\\n                \\"on ri.order_id = oi.id\\\\n\\" +\\n                \\"left join \\\\n\\" +\\n                \\"base_dic for system_time as of ri.proc_time as type_dic\\\\n\\" +\\n                \\"on ri.refund_type = type_dic.dic_code\\\\n\\" +\\n                \\"left join\\\\n\\" +\\n                \\"base_dic for system_time as of ri.proc_time as reason_dic\\\\n\\" +\\n                \\"on ri.refund_reason_type=reason_dic.dic_code\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 8. \u5efa\u7acb Upsert-Kafka dwd_trade_order_refund \u8868\\n        tableEnv.executeSql(\\"create table dwd_trade_order_refund(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"refund_type_code string,\\\\n\\" +\\n                \\"refund_type_name string,\\\\n\\" +\\n                \\"refund_reason_type_code string,\\\\n\\" +\\n                \\"refund_reason_type_name string,\\\\n\\" +\\n                \\"refund_reason_txt string,\\\\n\\" +\\n                \\"refund_num string,\\\\n\\" +\\n                \\"refund_amount string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3),\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_order_refund\\"));\\n\\n        // TODO 9. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_trade_order_refund select * from result_table\\");\\n    }\\n}\\n```\\n## \u4ea4\u6613\u57df\u9000\u6b3e\u6210\u529f\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n1\uff09\u4ece\u9000\u6b3e\u8868\u4e2d\u63d0\u53d6\u9000\u6b3e\u6210\u529f\u6570\u636e\uff0c\u5e76\u5c06\u5b57\u5178\u8868\u7684 dic_name \u7ef4\u5ea6\u9000\u5316\u5230\u8868\u4e2d\\n\\n2\uff09\u4ece\u8ba2\u5355\u8868\u4e2d\u63d0\u53d6\u9000\u6b3e\u6210\u529f\u8ba2\u5355\u6570\u636e\\n\\n3\uff09\u4ece\u9000\u5355\u8868\u4e2d\u63d0\u53d6\u9000\u6b3e\u6210\u529f\u7684\u660e\u7ec6\u6570\u636e\\n\\n### \u601d\u8def\u5206\u6790\\n\\n1\uff09\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\\n\\n\\t\u83b7\u53d6\u652f\u4ed8\u7c7b\u578b\u540d\u79f0\u3002\\n  \\n2\uff09\u8bfb\u53d6\u9000\u6b3e\u8868\u6570\u636e\uff0c\u7b5b\u9009\u9000\u6b3e\u6210\u529f\u6570\u636e\\n\\n\\t\u9000\u6b3e\u8868 refund_payment \u7684\u7c92\u5ea6\u4e3a\u4e00\u4e2a\u8ba2\u5355\u4e2d\u4e00\u4e2a SKU \u7684\u9000\u6b3e\u8bb0\u5f55\uff0c\u4e0e\u9000\u6b3e\u4e1a\u52a1\u8fc7\u7a0b\u7684\u6700\u7ec6\u7c92\u5ea6\u76f8\u540c\uff0c\u5c06\u5176\u4f5c\u4e3a\u4e3b\u8868\u3002\\n  \\n\\t\u9000\u6b3e\u64cd\u4f5c\u53d1\u751f\u65f6\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u9000\u6b3e\u8868\u4f1a\u5148\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6 refund_status \u72b6\u6001\u7801\u5e94\u4e3a 0701\uff08\u5546\u5bb6\u5ba1\u6838\u4e2d\uff09\uff0ccallback_time \u4e3a null\uff0c\u800c\u540e\u7ecf\u5386\u4e00\u7cfb\u5217\u4e1a\u52a1\u8fc7\u7a0b\uff1a\u5546\u5bb6\u5ba1\u6838\u3001\u4e70\u5bb6\u53d1\u8d27\u3001\u9000\u5355\u5b8c\u6210\u3002\\n  \\n  \u9000\u5355\u5b8c\u6210\u65f6\u4f1a\u5c06\u72b6\u6001\u7801\u7531 0701 \u66f4\u65b0\u4e3a 0705\uff08\u9000\u5355\u5b8c\u6210\uff09\uff0c\u540c\u65f6\u5c06 callback_time \u66f4\u65b0\u4e3a\u9000\u6b3e\u652f\u4ed8\u6210\u529f\u7684\u56de\u8c03\u65f6\u95f4\u3002\\n  \\n\\t\u7531\u4e0a\u8ff0\u5206\u6790\u53ef\u77e5\uff0c\u9000\u6b3e\u6210\u529f\u8bb0\u5f55\u5e94\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\\n  \\n  \uff081\uff09\u6570\u636e\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b\\n  \\n  \uff082\uff09refund_status \u4e3a 0705\uff1b\\n  \\n  \uff083\uff09\u4fee\u6539\u7684\u5b57\u6bb5\u5305\u542b refund_status\u3002\\n  \\n\u6ce8\uff1a\u672c\u9879\u76ee\u751f\u6210\u6a21\u62df\u6570\u636e\u7684\u5b57\u5178\u8868\u4e2d\u5e76\u6ca1\u6709\u4e0e\u9000\u5355\u72b6\u6001\u76f8\u5173\u7684\u72b6\u6001\u7801\u8bb0\u5f55\uff0c\u4e14\u9000\u6b3e\u8868\u7684\u6570\u636e\u5e76\u6ca1\u6709\u4e0a\u8ff0\u5206\u6790\u63d0\u5230\u7684\u5b8c\u6574\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u591a\u4e1a\u52a1\u8fc7\u7a0b\u7684\u53d8\u5316\uff0c\u4ec5\u5728\u9000\u6b3e\u64cd\u4f5c\u5b8c\u6210\u65f6\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u6b64\u65f6\u7684 refund_status \u4e3a 0702\uff0ccallback_time \u4e0d\u4e3a null\uff0c\u56e0\u6b64\u8981\u60f3\u89c2\u6d4b\u5230\u67e5\u8be2\u6548\u679c\uff0c\u67e5\u8be2\u6761\u4ef6\u5e94\u505a\u4fee\u6539\uff1a\\n\\n\uff081\uff09\u6ce8\u91ca\u5bf9\u64cd\u4f5c\u7c7b\u578b\u7684\u5224\u65ad\uff1b\\n\\n\uff082\uff09where \u5b50\u53e5\u4e2d refund_status \u7684\u503c\u5e94\u4e3a 0702\uff1b\\n\\n\uff083\uff09\u8be5\u6761\u4ef6\u7684\u6821\u9a8c\u662f\u901a\u8fc7\u5224\u65ad old[\'refund_status\'] \u7684\u503c\u662f\u5426\u4e3a null \u6765\u5b9e\u73b0\u7684\uff0c\u6a21\u62df\u6570\u636e\u6ca1\u6709\u4fee\u6539\uff0cold[\'refund_status\'] \u5fc5\u4e3a null\uff0c\u9700\u8981\u6ce8\u91ca\u8be5\u6761\u4ef6\u3002\\n\\n\u6a21\u62df\u6570\u636e\u751f\u6210\u7684\u95ee\u9898\u5e76\u4e0d\u5f71\u54cd\u6211\u4eec\u5bf9\u4e1a\u52a1\u903b\u8f91\u7684\u5206\u6790\uff0c\u65e0\u987b\u5728\u610f\u3002\\n\\n3\uff09\u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\uff0c\u8fc7\u6ee4\u9000\u6b3e\u6210\u529f\u8ba2\u5355\u6570\u636e\\n\\n\\t\u7528\u4e8e\u83b7\u53d6 user_id \u548c province_id\u3002\u9000\u6b3e\u64cd\u4f5c\u5b8c\u540e\u65f6\uff0c\u8ba2\u5355\u8868\u7684 order_status \u5b57\u6bb5\u4f1a\u66f4\u65b0\u4e3a 1006\uff08\u9000\u6b3e\u5b8c\u6210\uff09\uff0c\u56e0\u6b64\u9000\u5355\u6210\u529f\u5bf9\u5e94\u7684\u8ba2\u5355\u6570\u636e\u5e94\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a\\n  \\n\uff081\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b\\n\\n\uff082\uff09order_status \u4e3a 1006\uff1b\uff083\uff09\u4fee\u6539\u4e86 order_status \u5b57\u6bb5\u3002\\n\\n\\torder_status \u503c\u66f4\u6539\u4e3a 1006 \u4e4b\u540e\u5bf9\u5e94\u7684\u8ba2\u5355\u8868\u6570\u636e\u5c31\u4e0d\u4f1a\u518d\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u53ea\u8981\u6ee1\u8db3\u524d\u4e24\u4e2a\u6761\u4ef6\uff0c\u7b2c\u4e09\u4e2a\u6761\u4ef6\u5fc5\u5b9a\u6ee1\u8db3\u3002\\n  \\n  \u672c\u9879\u76ee order_info \u8868\u5e76\u6ca1\u6709\u9000\u6b3e\u6210\u529f\u65f6\u5e94\u6709\u7684\u53d8\u5316\uff0c\u6ca1\u6709 order_status \u53d6\u503c\u4e3a 1006 \u7684\u8bb0\u5f55\u3002\\n  \\n  \u4e3a\u4e86\u770b\u5230\u6548\u679c\u6ce8\u91ca\u6389\u6240\u6709\u8fc7\u6ee4\u6761\u4ef6\u3002order_info \u8868\u7684\u5173\u8054\u662f\u4e3a\u4e86\u83b7\u53d6 user_id \u548c province_id\uff0c\u6ca1\u6709\u8fc7\u6ee4\u6761\u4ef6\u4f1a\u628a order_info \u8868\u7684\u6240\u6709\u53d8\u66f4\u64cd\u4f5c\u4fdd\u7559\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6570\u636e\u91cd\u590d\uff0c\u4f46\u4e0b\u6e38\u4f1a\u8fdb\u884c\u53bb\u91cd\uff0c\u4e0d\u4f1a\u5f71\u54cd\u6700\u7ec8\u7ed3\u679c\u3002\\n  \\n4\uff09\u7b5b\u9009\u9000\u6b3e\u6210\u529f\u7684\u9000\u5355\u660e\u7ec6\u6570\u636e\\n\\n\\t\u7528\u4e8e\u83b7\u53d6\u9000\u5355\u4ef6\u6570 refund_num\u3002\u9000\u5355\u6210\u529f\u65f6 order_refund_info \u8868\u4e2d\u7684 refund_status \u5b57\u6bb5\u4f1a\u4fee\u6539\u4e3a0705\uff08\u9000\u6b3e\u6210\u529f\u72b6\u6001\u7801\uff09\u3002\\n  \\n  \u56e0\u6b64\u7b5b\u9009\u6761\u4ef6\u6709\u4e09\uff1a\\n  \\n  \uff081\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b\\n  \\n  \uff082\uff09refund_status \u4e3a 0705\uff1b\\n  \\n  \uff083\uff09\u4fee\u6539\u4e86 refund_status \u5b57\u6bb5\u3002\u7b5b\u9009\u65b9\u5f0f\u540c\u4e0a\u3002\\n  \\n\u6ce8\uff1a\u672c\u9879\u76ee\u6a21\u62df\u6570\u636e\u7684\u5b57\u5178\u8868\u5e76\u672a\u7ef4\u62a4\u9000\u5355\u76f8\u5173\u7684\u72b6\u6001\u7801\uff08\u6682\u672a\u53d1\u5e03\u7684\u6570\u636e\u751f\u6210\u6587\u4ef6\u8865\u5145\u4e86\u76f8\u5173\u72b6\u6001\u7801\uff0c\u9000\u6b3e\u6210\u529f\u72b6\u6001\u7801\u4e3a 0705\uff09\u3002\\n\\n\u5f53\u524d\u4e1a\u52a1\u6570\u636e\u5e93\u4e2d order_refund_info \u8868\u6240\u6709\u8bb0\u5f55\u7684 refund_status \u5b57\u6bb5\u503c\u5747\u4e3a null\u3002\\n\\n\u6b64\u5916\uff0corder_refund_info \u8868\u53ea\u6709 insert \u64cd\u4f5c\uff0c\u5373\u6a21\u62df\u6570\u636e\u7684\u4e1a\u52a1\u903b\u8f91\u662f\u9000\u5355\u64cd\u4f5c\u548c\u9000\u6b3e\u5b8c\u6210\u540c\u65f6\u53d1\u751f\u3002\\n\\n\u56e0\u6b64\u8981\u60f3\u770b\u5230\u6548\u679c\uff0c\u9700\u8981\u5bf9\u8fc7\u6ee4\u6761\u4ef6\u505a\u7279\u6b8a\u5904\u7406\uff1a\\n\\n\uff081\uff09\u6ce8\u91ca\u5bf9 refund_status \u7684\u5224\u65ad\uff1b\\n\\n\uff082\uff09\u6ce8\u91ca\u5bf9\u64cd\u4f5c\u7c7b\u578b\u7684\u5224\u65ad\uff1b\\n\\n\uff083\uff09\u6ce8\u91ca\u5bf9\u4fee\u6539\u5b57\u6bb5\u7684\u5224\u65ad\u3002\\n\\n5\uff09\u5173\u8054\u56db\u5f20\u8868\u5e76\u5199\u51fa\u5230 Kafka \u9000\u6b3e\u6210\u529f\u4e3b\u9898\\n\\n\u4e3b\u8868\u6570\u636e\u7b5b\u9009\u5b8c\u6210\u540e\u5df2\u7ecf\u83b7\u53d6\u4e86\u5168\u90e8\u3001\u51c6\u786e\u7684\u9000\u6b3e\u6210\u529f\u6570\u636e\uff0c\u4e0e\u53e6\u5916\u4e24\u5f20\u8868\u7684\u5173\u8054\u53ea\u662f\u4e3a\u4e86\u8865\u5145\u5b57\u6bb5\uff0c\u56e0\u6b64\u4f7f\u7528 left join \u5373\u53ef\u3002\u4e4b\u6240\u4ee5\u63d0\u524d\u8fc7\u6ee4\u662f\u4e3a\u4e86\u51cf\u5c0f\u6570\u636e\u91cf\uff0c\u63d0\u5347\u8ba1\u7b97\u6548\u7387\u3002\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242919-007d7af2-34bf-4be2-b9c8-a11f87814317.png)\\n\\n### \u4ee3\u7801\\n\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\npublic class DwdTradeRefundPaySuc {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6 topic_db \u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`old` map<string, string>,\\\\n\\" +\\n                \\"`proc_time` as PROCTIME(),\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_trade_refund_pay_suc\\"));\\n\\n        // TODO 4. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\\n\\n        // TODO 5. \u8bfb\u53d6\u9000\u6b3e\u8868\u6570\u636e\uff0c\u5e76\u7b5b\u9009\u9000\u6b3e\u6210\u529f\u6570\u636e\\n        Table refundPayment = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                        \\"data[\'id\'] id,\\\\n\\" +\\n                        \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                        \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                        \\"data[\'payment_type\'] payment_type,\\\\n\\" +\\n                        \\"data[\'callback_time\'] callback_time,\\\\n\\" +\\n                        \\"data[\'total_amount\'] total_amount,\\\\n\\" +\\n                        \\"proc_time,\\\\n\\" +\\n                        \\"ts\\\\n\\" +\\n                        \\"from topic_db\\\\n\\" +\\n                        \\"where `table` = \'refund_payment\'\\\\n\\" +\\n//                \\"and `type` = \'update\'\\\\n\\" +\\n                        \\"and data[\'refund_status\'] = \'0702\'\\\\n\\"\\n//                        +\\n//                \\"and `old`[\'refund_status\'] is not null\\"\\n        );\\n\\n        tableEnv.createTemporaryView(\\"refund_payment\\", refundPayment);\\n\\n        // TODO 6. \u8bfb\u53d6\u8ba2\u5355\u8868\u6570\u636e\u5e76\u8fc7\u6ee4\u9000\u6b3e\u6210\u529f\u8ba2\u5355\u6570\u636e\\n        Table orderInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'province_id\'] province_id,\\\\n\\" +\\n                \\"`old`\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'order_info\'\\\\n\\" +\\n                \\"and `type` = \'update\'\\\\n\\"\\n//                +\\n//                \\"and data[\'order_status\']=\'1006\'\\\\n\\" +\\n//                \\"and `old`[\'order_status\'] is not null\\"\\n        );\\n\\n        tableEnv.createTemporaryView(\\"order_info\\", orderInfo);\\n\\n        // TODO 7. \u8bfb\u53d6\u9000\u5355\u8868\u6570\u636e\u5e76\u8fc7\u6ee4\u9000\u6b3e\u6210\u529f\u6570\u636e\\n        Table orderRefundInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                        \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                        \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                        \\"data[\'refund_num\'] refund_num,\\\\n\\" +\\n                        \\"`old`\\\\n\\" +\\n                        \\"from topic_db\\\\n\\" +\\n                        \\"where `table` = \'order_refund_info\'\\\\n\\"\\n//                        +\\n//                        \\"and `type` = \'update\'\\\\n\\" +\\n//                        \\"and data[\'refund_status\']=\'0705\'\\\\n\\" +\\n//                        \\"and `old`[\'refund_status\'] is not null\\"\\n                // order_refund_info \u8868\u7684 refund_status \u5b57\u6bb5\u503c\u5747\u4e3a null\\n        );\\n\\n        tableEnv.createTemporaryView(\\"order_refund_info\\", orderRefundInfo);\\n\\n        // TODO 8. \u5173\u8054\u56db\u5f20\u8868\u83b7\u5f97\u9000\u6b3e\u6210\u529f\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"rp.id,\\\\n\\" +\\n                \\"oi.user_id,\\\\n\\" +\\n                \\"rp.order_id,\\\\n\\" +\\n                \\"rp.sku_id,\\\\n\\" +\\n                \\"oi.province_id,\\\\n\\" +\\n                \\"rp.payment_type,\\\\n\\" +\\n                \\"dic.dic_name payment_type_name,\\\\n\\" +\\n                \\"date_format(rp.callback_time,\'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"rp.callback_time,\\\\n\\" +\\n                \\"ri.refund_num,\\\\n\\" +\\n                \\"rp.total_amount,\\\\n\\" +\\n                \\"rp.ts,\\\\n\\" +\\n                \\"current_row_timestamp() row_op_ts\\\\n\\" +\\n                \\"from refund_payment rp \\\\n\\" +\\n                \\"left join \\\\n\\" +\\n                \\"order_info oi\\\\n\\" +\\n                \\"on rp.order_id = oi.id\\\\n\\" +\\n                \\"left join\\\\n\\" +\\n                \\"order_refund_info ri\\\\n\\" +\\n                \\"on rp.order_id = ri.order_id\\\\n\\" +\\n                \\"and rp.sku_id = ri.sku_id\\\\n\\" +\\n                \\"left join \\\\n\\" +\\n                \\"base_dic for system_time as of rp.proc_time as dic\\\\n\\" +\\n                \\"on rp.payment_type = dic.dic_code\\\\n\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 9. \u521b\u5efa Upsert-Kafka dwd_trade_refund_pay_suc \u8868\\n        tableEnv.executeSql(\\"create table dwd_trade_refund_pay_suc(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"province_id string,\\\\n\\" +\\n                \\"payment_type_code string,\\\\n\\" +\\n                \\"payment_type_name string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"callback_time string,\\\\n\\" +\\n                \\"refund_num string,\\\\n\\" +\\n                \\"refund_amount string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"row_op_ts timestamp_ltz(3),\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_trade_refund_pay_suc\\"));\\n\\n        // TODO 10. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_trade_refund_pay_suc select * from result_table\\");\\n    }\\n}\\n```\\n## \u5de5\u5177\u57df\u4f18\u60e0\u5238\u9886\u53d6\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u6570\u636e\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u9886\u7528\u4e3b\u9898\\n\\n### \u601d\u8def\u5206\u6790\\n\\n\u7528\u6237\u9886\u53d6\u4f18\u60e0\u5238\u540e\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u4f18\u60e0\u5238\u9886\u7528\u8868\u4f1a\u65b0\u589e\u4e00\u6761\u6570\u636e\uff0c\u56e0\u6b64\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u4e3a\u4f18\u60e0\u5238\u9886\u53d6\u6570\u636e\u3002\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242954-7fe50475-454e-40a1-a871-d41039e98830.png)\\n\\n### \u4ee3\u7801\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\npublic class DwdToolCouponGet {\\npublic static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table `topic_db`(\\\\n\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_tool_coupon_get\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'],\\\\n\\" +\\n                \\"data[\'coupon_id\'],\\\\n\\" +\\n                \\"data[\'user_id\'],\\\\n\\" +\\n                \\"date_format(data[\'get_time\'],\'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"data[\'get_time\'],\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'coupon_use\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 5. \u5efa\u7acb Upsert-Kafka dwd_tool_coupon_get \u8868\\n        tableEnv.executeSql(\\"create table dwd_tool_coupon_get (\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"get_time string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_tool_coupon_get\\"));\\n\\n        // TODO 6. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_tool_coupon_get select * from result_table\\");\\n    }\\n}\\n```\\n## \u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528\uff08\u4e0b\u5355\uff09\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u7b5b\u9009\u4f18\u60e0\u5238\u4e0b\u5355\u6570\u636e\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u4e0b\u5355\u4e3b\u9898\u3002\\n  \\n### \u601d\u8def\u5206\u6790\\n\\n1\uff09\u77e5\u8bc6\u50a8\u5907\\n\u7528\u6237\u4f7f\u7528\u4f18\u60e0\u5238\u4e0b\u5355\u65f6\uff0c\u4f18\u60e0\u5238\u9886\u7528\u8868\u7684 using_time \u5b57\u6bb5\u4f1a\u66f4\u65b0\u4e3a\u4e0b\u5355\u65f6\u95f4\uff0c\u56e0\u6b64\u4f18\u60e0\u5238\u4e0b\u5355\u6570\u636e\u5e94\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\\n\\n\u2460 \u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b\\n\\n\u2461 \u4fee\u6539\u4e86 using_time \u5b57\u6bb5\u3002\\n\\n\u2460 \u6761\u4ef6\u4e00\u7684\u5224\u65ad\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u987b\u5728 SQL \u8bed\u53e5\u4e2d\u8865\u5145 where \u6761\u4ef6\uff1b\\n\\n\u2461 \u6761\u4ef6\u4e8c\u9700\u8981\u5224\u65ad Maxwell \u5c01\u88c5\u7684 JSON \u5b57\u7b26\u4e32\u4e2d `old` \u5b57\u6bb5\u4e0b\u662f\u5426\u6709 using_time \u5b57\u6bb5\uff0c`old` \u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u662f Map\uff0c\u5b83\u7684 key \u662f\u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\u79f0\uff0cvalue \u662f\u5b57\u6bb5\u65e7\u503c\u3002\\n\\n\u5728\u79bb\u7ebf\u6570\u4ed3\u4e2d\u6211\u4eec\u5c06 Maxwell \u5c01\u88c5\u7684 JSON \u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a HIVE \u8868\u4e2d\u7684\u7ed3\u6784\u4f53\u5b57\u6bb5\uff0c\u7528 map_keys() \u51fd\u6570\u83b7\u53d6\u4e86\u6240\u6709\u7684 key\uff0c\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e2a array\uff08\u6570\u7ec4\uff09\uff0c\u6570\u7ec4\u4e2d\u4fdd\u5b58\u4e86\u6240\u6709\u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\u79f0\uff0c\u6700\u540e\u7528 array_contains() \u65b9\u6cd5\u5224\u65ad\u8be5\u6570\u7ec4\u4e2d\u662f\u5426\u5305\u542b order_status \u5b57\u6bb5\u5373\u53ef\u5b8c\u6210\u6761\u4ef6\u4e8c\u7684\u5224\u65ad\u3002\\n\\n\u800c Flink SQL \u5e76\u6ca1\u6709\u63d0\u4f9b\u7c7b\u4f3c\u7684 API\uff0c\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u53d1\u751f\u53d8\u66f4\u7684\u5b57\u6bb5\u540d\u79f0\u3002\\n\\n\u6240\u4ee5\u9700\u8981\u6362\u4e00\u79cd\u601d\u8def\uff0c\u6b64\u5904\u5c06 Flink SQL \u52a8\u6001\u8868\u8f6c\u5316\u4e3a\u6d41\uff0c\u901a\u8fc7\u6d41\u5904\u7406\u7b5b\u9009\u6ee1\u8db3\u6761\u4ef6\u4e8c\u7684\u6570\u636e\uff0c\u518d\u5c06\u6d41\u8f6c\u6362\u4e3a\u52a8\u6001\u8868\u3002\u6b64\u5904\u6d89\u53ca\u6d41\u548c\u52a8\u6001\u8868\u7684\u8f6c\u5316\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5148\u4e86\u89e3\u76f8\u5173 API\u3002\\n\\n\uff081\uff09\u73af\u5883\u51c6\u5907\\n\\n\\t\u4e1a\u52a1\u573a\u666f\uff1aleft\u3001right \u4e24\u5f20\u8868\u505a left join\uff0c\u7136\u540e\u5c06\u83b7\u53d6\u7684 Table \u7c7b\u578b\u53d8\u91cf\uff08\u52a8\u6001\u8868\uff09\u8f6c\u6362\u4e3a\u6d41\uff0c\u518d\u5c06\u6d41\u8f6c\u6362\u4e3a Table \u53d8\u91cf\u3002\\n  \\n\\t\u2460 left\u3001right \u8868\u5982\u4e0b\\n  \\nleft\u8868\\n\\nid    tag\\nA    left\\nB    left\\nC    left \\n\\nright \u8868\\n\\nid    tag\\nA    right\\nB    right\\nC    right\\n\\n\u2461 SQL \u5982\u4e0b\\n```\\nTable joinTable = tableEnv.sqlQuery(\\n                \\"select \\\\n\\" +\\n                        \\"l.id l_id,\\\\n\\" +\\n                        \\"l.tag l_tag,\\\\n\\" +\\n                        \\"r.tag r_tag\\\\n\\" +\\n                        \\"from left l \\\\n\\" +\\n                        \\"left join \\\\n\\" +\\n                        \\"right r \\\\n\\" +\\n                        \\"on l.id = r.id\\"\\n        );\\n```        \\n\u2462 \u5b9e\u4f53\u7c7b JoinBean \u5982\u4e0b\\n```\\n@Data\\npublic class JoinBean {\\n    String l_id;\\n    String tag_left;\\n    String tag_right;\\n}\\n```\\n\uff082\uff09Flink SQL \u7684 Table \u7c7b\u578b\u53d8\u91cf\u8f6c\u5316\u4e3a DataStream \u6709\u56db\u7c7b API\\n\\n\u2460 toAppendStream\\n\\n\u2461 toDataStream\\n\\n\u2462 toChangelogStream\\n\\n\u2463 toRetractStream\\n\\n\u5176\u4e2d\uff0cTable \u53d8\u91cf\u4e2d\u5305\u542b\u66f4\u65b0\u548c\u5220\u9664\u6570\u636e\u65f6\u8c03\u7528 \u2460 \u548c \u2461 \u8f6c\u5316\u4e3a\u6d41\u4f1a\u62a5\u9519\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\\n\\n// toAppendStream \u62a5\u9519\u4fe1\u606f\\n\\ntoAppendStream doesn\'t support consuming update and delete changes which is produced by node Join(joinType=[LeftOuterJoin], where=[(id = id0)], select=[id, tag, id0, tag0], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])\\n\\n// toDataStream \u62a5\u9519\u4fe1\u606f\\n\\nTable sink \'default_catalog.default_database.Unregistered_DataStream_Sink_2\' doesn\'t support consuming update and delete changes which is produced by node Join(joinType=[LeftOuterJoin], where=[(id = id0)], select=[id, tag, id0, tag0], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])\\n\\n\u8c03\u7528 \u2462 \u548c \u2463 \u53ef\u4ee5\u5c06\u5305\u542b\u66f4\u65b0\u548c\u5220\u9664\u6570\u636e\u7684\u8868\u8f6c\u5316\u4e3a\u6d41\u3002\u9700\u8981\u6307\u5b9a\u8868\u7ed3\u6784\u65f6\u7528\u6cd5\u5982\u4e0b\\n```\\nDataStream<Row> changelogStream = tableEnv.toChangelogStream(joinTable, Schema.newBuilder()\\n    .column(\\"l_id\\", \\"STRING\\")\\n    .column(\\"tag_left\\", \\"STRING\\")\\n    .column(\\"tag_right\\", \\"STRING\\")\\n.build());\\n\\nDataStream<Tuple2<Boolean, JoinBean>> retractS = tableEnv.toRetractStream(joinTable, JoinBean.class); \\n\\nchangelogStream.print(\\"changelogStream>>>\\");\\n\\nretractS.print(\\"retractS\\");\\n```\\n\u6d41\u6253\u5370\u7ed3\u679c\u5982\u4e0b\\n```\\nchangelogStream>>>> +I[A, left, null]\\nchangelogStream>>>> -D[A, left, null]\\nchangelogStream>>>> +I[A, left, right]\\nchangelogStream>>>> +I[B, left, null]\\nchangelogStream>>>> -D[B, left, null]\\nchangelogStream>>>> +I[B, left, right]\\nchangelogStream>>>> +I[C, left, null]\\nchangelogStream>>>> -D[C, left, null]\\nchangelogStream>>>> +I[C, left, right]\\n\\nretractS> (true,JoinBean(l_id=A, tag_left=left, tag_right=null))\\nretractS> (false,JoinBean(l_id=A, tag_left=left, tag_right=null))\\nretractS> (true,JoinBean(l_id=A, tag_left=left, tag_right=right))\\nretractS> (true,JoinBean(l_id=B, tag_left=left, tag_right=null))\\nretractS> (false,JoinBean(l_id=B, tag_left=left, tag_right=null))\\nretractS> (true,JoinBean(l_id=B, tag_left=left, tag_right=right))\\nretractS> (true,JoinBean(l_id=C, tag_left=left, tag_right=null))\\nretractS> (false,JoinBean(l_id=C, tag_left=left, tag_right=null))\\nretractS> (true,JoinBean(l_id=C, tag_left=left, tag_right=right))\\n```\\n\uff083\uff09\u5c06\u6d41\u8f6c\u5316\u4e3a\u52a8\u6001\u8868\\n\\n\u2460 \u76ee\u524d\u7248\u672c Flink \u53ea\u63d0\u4f9b\u4e86\u4e24\u79cd API \\n\\n-\\tfromChangelogStream\\n-\\tfromDataStream\\n\\n\u2461 \u5e94\u7528\u573a\u666f\\n\\na\uff09fromDataStream \u4e0d\u53ef\u7528\u4e8e\u5305\u542b\u5220\u9664\u548c\u66f4\u65b0\u6570\u636e\u7684\u6d41\u5411 Table \u7684\u8f6c\u5316\uff0c\u5426\u5219\u62a5\u9519\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\\n\\nError during input conversion. Conversion expects insert-only records but DataStream API record contains: DELETE\\n\\nb\uff09fromChangelogStream \u53ef\u7528\u4e8e\u5305\u542b\u5220\u9664\u548c\u66f4\u65b0\u6570\u636e\u6d41\u5411 Table \u7684\u8f6c\u5316\\n\\n\u2462 \u7528\u6cd5\\n```\\nTable changelogTable = tableEnv.fromChangelogStream(\\nchangelogStream,\\nSchema.newBuilder()\\n    .column(\\"l_id\\", \\"STRING\\")\\n    .column(\\"tag_left\\", \\"STRING\\")\\n    .column(\\"tag_right\\", \\"STRING\\")\\n    .build()\\n);\\n```\\n\uff084\uff09\u672c\u9879\u76ee DWD \u5c42\u6d89\u53ca\u5230\u7684\u6d41\u548c\u8868\u8f6c\u5316\\n\\nINSERT \u64cd\u4f5c\u7684\u6d41\u548c\u8868\u6ca1\u6709\u56de\u64a4\u6570\u636e\uff0c\u4e0d\u9700\u8981\u8003\u8651\u53bb\u91cd\u95ee\u9898\u3002\\n\\n\u2460 \u4ece Kafka \u8bfb\u53d6\u7684 ODS \u5c42\u6570\u636e\u64cd\u4f5c\u7c7b\u578b\u5747\u4e3a INSERT\uff1b\\n\\n\u2461 \u53ea\u542b INSERT \u64cd\u4f5c\u7684\u6570\u636e\u548c Lookup \u8868\u5173\u8054\u540e\u7684\u6570\u636e\u540c\u6837\u53ea\u6709 INSERT \u64cd\u4f5c\\n\\n\u6240\u4ee5\uff0c\u672c\u9879\u76ee\u4e2d\u6d41\u548c\u8868\u7684\u8f6c\u5316\u4e0d\u7528\u8003\u8651\u53bb\u91cd\uff0c\u65e0\u987b\u989d\u5916\u5904\u7406\u3002\\n\\n2\uff09\u6267\u884c\u6b65\u9aa4\\n\uff081\uff09\u7b5b\u9009\u4f18\u60e0\u5238\u9886\u7528\u6570\u636e\u5c01\u88c5\u4e3a\u8868\u3002\\n\\n\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u7684\u6570\u636e\u3002\\n\\n\uff082\uff09\u5728\u6d41\u4e2d\u7b5b\u9009\u4f18\u60e0\u5238\u9886\u53d6\u6570\u636e\u3002\\n\\n\u5224\u65ad\u662f\u5426\u4fee\u6539\u4e86 using_time \u5b57\u6bb5\u3002\\n\\n\uff083\uff09\u5c01\u88c5\u4e3a\u8868\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u4f7f\u7528\uff08\u4e0b\u5355\uff09\u4e8b\u5b9e\u4e3b\u9898\u3002\\n\\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242981-19c9ef18-45a2-4d94-8d1f-ac529014bb35.png)\\n\\n### \u4ee3\u7801\\n\\n1\uff09\u521b\u5efa\u5b9e\u4f53\u7c7b CouponUseOrderBean\\n```\\npackage com.atguigu.gmall.realtime.bean;\\n\\nimport lombok.Data;\\n\\n@Data\\npublic class CouponUseOrderBean {\\n    // \u4f18\u60e0\u5238\u9886\u7528\u8bb0\u5f55 id\\n    String id;\\n\\n    // \u4f18\u60e0\u5238 id\\n    String coupon_id;\\n\\n    // \u7528\u6237 id\\n    String user_id;\\n\\n    // \u8ba2\u5355 id\\n    String order_id;\\n\\n    // \u4f18\u60e0\u5238\u4f7f\u7528\u65e5\u671f\uff08\u4e0b\u5355\uff09\\n    String date_id;\\n\\n    // \u4f18\u60e0\u5238\u4f7f\u7528\u65f6\u95f4\uff08\u4e0b\u5355\uff09\\n    String using_time;\\n\\n    // \u5386\u53f2\u6570\u636e\\n    String old;\\n\\n    // \u65f6\u95f4\u6233\\n    String ts;\\n}\\n```\\n2\uff09\u4e3b\u7a0b\u5e8f\\n\\n```java\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.atguigu.gmall.realtime.bean.CouponUseOrderBean;\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\n\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.datastream.DataStream;\\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.util.Map;\\nimport java.util.Set;\\n\\npublic class DwdToolCouponOrder {\\n\\tpublic static void main(String[] args) {\\n\\n\\t\\t// TODO 1. \u73af\u5883\u51c6\u5907\\n\\t\\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n\\t\\tenv.setParallelism(4);\\n\\t\\tStreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n\\t\\t// TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n\\t\\tenv.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n\\t\\tenv.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n\\t\\tenv.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n\\t\\tenv.getCheckpointConfig().enableExternalizedCheckpoints(\\n\\t\\t\\t\\tCheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n\\t\\t);\\n\\t\\tenv.setRestartStrategy(RestartStrategies.failureRateRestart(\\n\\t\\t\\t\\t3, Time.days(1), Time.minutes(1)\\n\\t\\t));\\n\\t\\tenv.setStateBackend(new HashMapStateBackend());\\n\\t\\tenv.getCheckpointConfig().setCheckpointStorage(\\n\\t\\t\\t\\t\\"hdfs://hadoop102:8020/ck\\"\\n\\t\\t);\\n\\t\\tSystem.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n\\t\\t// TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n\\t\\ttableEnv.executeSql(\\"create table `topic_db` (\\\\n\\" +\\n\\t\\t\\t\\t\\"`database` string,\\\\n\\" +\\n\\t\\t\\t\\t\\"`table` string,\\\\n\\" +\\n\\t\\t\\t\\t\\"`data` map<string, string>,\\\\n\\" +\\n\\t\\t\\t\\t\\"`type` string,\\\\n\\" +\\n\\t\\t\\t\\t\\"`old` string,\\\\n\\" +\\n\\t\\t\\t\\t\\"`ts` string\\\\n\\" +\\n\\t\\t\\t\\t\\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_tool_coupon_order\\"));\\n\\n\\t\\t// TODO 4. \u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u6d41\\n\\t\\tTable couponUseOrder = tableEnv.sqlQuery(\\"\\"\\"\\n\\t\\t\\t\\tselect\\n\\t\\t\\t\\tdata[\'id\'] id,\\n\\t\\t\\t\\tdata[\'coupon_id\'] coupon_id,\\n\\t\\t\\t\\tdata[\'user_id\'] user_id,\\n\\t\\t\\t\\tdata[\'order_id\'] order_id,\\n\\t\\t\\t\\tdate_format(data[\'using_time\'],\'yyyy-MM-dd\') date_id,\\n\\t\\t\\t\\tdata[\'using_time\'] using_time,\\n\\t\\t\\t\\t`old`,\\n\\t\\t\\t\\tts\\n\\t\\t\\t\\tfrom topic_db\\n\\t\\t\\t\\twhere `table` = \'coupon_use\'\\n\\t\\t\\t\\tand `type` = \'update\'\\n\\t\\t\\t\\t\\"\\"\\");\\n\\t\\tDataStream<CouponUseOrderBean> couponUseOrderDS = tableEnv.toAppendStream(couponUseOrder, CouponUseOrderBean.class);\\n\\n\\t\\t// TODO 5. \u8fc7\u6ee4\u6ee1\u8db3\u6761\u4ef6\u7684\u4f18\u60e0\u5238\u4e0b\u5355\u6570\u636e\uff0c\u5c01\u88c5\u4e3a\u8868\\n\\t\\tSingleOutputStreamOperator<CouponUseOrderBean> filteredDS = couponUseOrderDS.filter(\\n\\t\\t\\t\\tcouponUseOrderBean -> {\\n\\t\\t\\t\\t\\tString old = couponUseOrderBean.getOld();\\n\\t\\t\\t\\t\\tif (old != null) {\\n\\t\\t\\t\\t\\t\\tMap oldMap = JSON.parseObject(old, Map.class);\\n\\t\\t\\t\\t\\t\\tSet changeKeys = oldMap.keySet();\\n\\t\\t\\t\\t\\t\\treturn changeKeys.contains(\\"using_time\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t);\\n\\t\\tTable resultTable = tableEnv.fromDataStream(filteredDS);\\n\\t\\ttableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n\\t\\t// TODO 6. \u5efa\u7acb Upsert-Kafka dwd_tool_coupon_order \u8868\\n\\t\\ttableEnv.executeSql(\\"create table dwd_tool_coupon_order(\\\\n\\" +\\n\\t\\t\\t\\t\\"id string,\\\\n\\" +\\n\\t\\t\\t\\t\\"coupon_id string,\\\\n\\" +\\n\\t\\t\\t\\t\\"user_id string,\\\\n\\" +\\n\\t\\t\\t\\t\\"order_id string,\\\\n\\" +\\n\\t\\t\\t\\t\\"date_id string,\\\\n\\" +\\n\\t\\t\\t\\t\\"order_time string,\\\\n\\" +\\n\\t\\t\\t\\t\\"ts string,\\\\n\\" +\\n\\t\\t\\t\\t\\"primary key(id) not enforced\\\\n\\" +\\n\\t\\t\\t\\t\\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_tool_coupon_order\\"));\\n\\n\\t\\t// TODO 7. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\\n\\t\\ttableEnv.executeSql(\\"\\"\\"\\n\\t\\t\\t\\tinsert into dwd_tool_coupon_order select id,\\n\\t\\t\\t\\tcoupon_id,\\n\\t\\t\\t\\tuser_id,\\n\\t\\t\\t\\torder_id,\\n\\t\\t\\t\\tdate_id,\\n\\t\\t\\t\\tusing_time order_time,\\n\\t\\t\\t\\tts from result_table\\"\\"\\");\\n\\t\\tenv.execute();\\n\\t}\\n}\\n```\\n\\n\\n## \u5de5\u5177\u57df\u4f18\u60e0\u5238\u4f7f\u7528(\u652f\u4ed8)\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u7b5b\u9009\u4f18\u60e0\u5238\u652f\u4ed8\u6570\u636e\uff0c\u5199\u5165 Kafka \u4f18\u60e0\u5238\u652f\u4ed8\u4e3b\u9898\u3002\\n  \\n### \u601d\u8def\u5206\u6790\\n\\n\\t\u7528\u6237\u4f7f\u7528\u4f18\u60e0\u5238\u652f\u4ed8\u65f6\uff0c\u4f18\u60e0\u5238\u9886\u7528\u8868\u7684 used_time \u5b57\u6bb5\u4f1a\u66f4\u65b0\u4e3a\u652f\u4ed8\u65f6\u95f4\uff0c\u56e0\u6b64\u4f18\u60e0\u5238\u652f\u4ed8\u6570\u636e\u5e94\u6ee1\u8db3\u4e24\u4e2a\u6761\u4ef6\uff1a\\n  \\n  \uff081\uff09\u64cd\u4f5c\u7c7b\u578b\u4e3a update\uff1b\\n  \\n  \uff082\uff09\u4fee\u6539\u4e86 used_time \u5b57\u6bb5\u3002\u4f7f\u7528\u4f18\u60e0\u5238\u652f\u4ed8\u540e\uff0c\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\u5c31\u4e0d\u4f1a\u518d\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u5728\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u7684\u524d\u63d0\u4e0b\uff0c\u53ea\u8981 used_time \u4e0d\u4e3a null\uff0c\u5c31\u53ef\u4ee5\u65ad\u5b9a\u672c\u6b21\u64cd\u4f5c\u4fee\u6539\u7684\u662f used_time \u5b57\u6bb5\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167242998-8443ee23-a92f-4581-98a3-5d50a8b83edf.png)\\n\\n### \u4ee3\u7801\\n\\n\u4e3b\u7a0b\u5e8f\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\npublic class DwdToolCouponPay {\\n    public static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table `topic_db` (\\\\n\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`old` string,\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_tool_coupon_pay\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u4f18\u60e0\u5238\u9886\u7528\u8868\u6570\u636e\uff0c\u7b5b\u9009\u4f18\u60e0\u5238\u4f7f\u7528\uff08\u652f\u4ed8\uff09\u6570\u636e\\n        Table couponUsePay = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'coupon_id\'] coupon_id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                \\"date_format(data[\'used_time\'],\'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"data[\'used_time\'] used_time,\\\\n\\" +\\n                \\"`old`,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'coupon_use\'\\\\n\\" +\\n                \\"and `type` = \'update\'\\\\n\\" +\\n                \\"and data[\'used_time\'] is not null\\");\\n\\n        tableEnv.createTemporaryView(\\"coupon_use_pay\\", couponUsePay);\\n\\n        // TODO 5. \u5efa\u7acb Upsert-Kafka dwd_tool_coupon_order \u8868\\n        tableEnv.executeSql(\\"create table dwd_tool_coupon_pay(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"coupon_id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"payment_time string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_tool_coupon_pay\\"));\\n\\n        // TODO 6. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_tool_coupon_pay select \\" +\\n                \\"id,\\\\n\\" +\\n                \\"coupon_id,\\\\n\\" +\\n                \\"user_id,\\\\n\\" +\\n                \\"order_id,\\\\n\\" +\\n                \\"date_id,\\\\n\\" +\\n                \\"used_time payment_time,\\\\n\\" +\\n                \\"ts from coupon_use_pay\\");\\n    }\\n}\\n```\\n## \u4e92\u52a8\u57df\u6536\u85cf\u5546\u54c1\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u8bfb\u53d6\u6536\u85cf\u6570\u636e\uff0c\u5199\u5165 Kafka \u6536\u85cf\u4e3b\u9898\\n  \\n### \u601d\u8def\u5206\u6790\\n\\n\\t\u7528\u6237\u6536\u85cf\u5546\u54c1\u65f6\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u6536\u85cf\u8868\u4f1a\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u56e0\u6b64\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a update \u7684\u6570\u636e\u5373\u53ef\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167243018-facb2ce6-7b89-47d1-841c-74283d7d1c99.png)\\n\\n### \u4ee3\u7801\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\npublic class DwdInteractionFavorAdd {\\npublic static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_interaction_favor_add\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u6536\u85cf\u8868\u6570\u636e\\n        Table favorInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                \\"date_format(data[\'create_time\'],\'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"data[\'create_time\'] create_time,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'favor_info\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"favor_info\\", favorInfo);\\n\\n        // TODO 5. \u521b\u5efa Upsert-Kafka dwd_interaction_favor_add \u8868\\n        tableEnv.executeSql(\\"create table dwd_interaction_favor_add (\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_interaction_favor_add\\"));\\n\\n        // TODO 6. \u5c06\u6570\u636e\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_interaction_favor_add select * from favor_info\\");\\n    }\\n}\\n```\\n## \u4e92\u52a8\u57df\u8bc4\u4ef7\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u5efa\u7acb MySQL-Lookup \u5b57\u5178\u8868\uff0c\u8bfb\u53d6\u8bc4\u8bba\u8868\u6570\u636e\uff0c\u5173\u8054\u5b57\u5178\u8868\u4ee5\u83b7\u53d6\u8bc4\u4ef7\uff08\u597d\u8bc4\u3001\u4e2d\u8bc4\u3001\u5dee\u8bc4\u3001\u81ea\u52a8\uff09\uff0c\u5c06\u7ed3\u679c\u5199\u5165 Kafka \u8bc4\u4ef7\u4e3b\u9898\u3002\\n  \\n### \u601d\u8def\u5206\u6790\\n\\n\\t\u7528\u6237\u63d0\u4ea4\u8bc4\u8bba\u65f6\u8bc4\u4ef7\u8868\u4f1a\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u53ef\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167243041-aff42c3e-c8b1-46db-ba56-ffb07c1e56da.png)\\n\\n### \u4ee3\u7801\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport com.atguigu.gmall.realtime.util.MysqlUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\npublic class DwdInteractionComment {\\npublic static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n\\n        // TODO 2. \u72b6\u6001\u540e\u7aef\u8bbe\u7f6e\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.setRestartStrategy(RestartStrategies.failureRateRestart(\\n                3, Time.days(1), Time.minutes(1)\\n        ));\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\n                \\"hdfs://hadoop102:8020/ck\\"\\n        );\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`proc_time` as PROCTIME(),\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_interaction_comment\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u8bc4\u8bba\u8868\u6570\u636e\\n        Table commentInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] id,\\\\n\\" +\\n                \\"data[\'user_id\'] user_id,\\\\n\\" +\\n                \\"data[\'sku_id\'] sku_id,\\\\n\\" +\\n                \\"data[\'order_id\'] order_id,\\\\n\\" +\\n                \\"data[\'create_time\'] create_time,\\\\n\\" +\\n                \\"data[\'appraise\'] appraise,\\\\n\\" +\\n                \\"proc_time,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'comment_info\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"comment_info\\", commentInfo);\\n\\n        // TODO 5. \u5efa\u7acb MySQL-LookUp \u5b57\u5178\u8868\\n        tableEnv.executeSql(MysqlUtil.getBaseDicLookUpDDL());\\n\\n        // TODO 6. \u5173\u8054\u4e24\u5f20\u8868\\n        Table resultTable = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"ci.id,\\\\n\\" +\\n                \\"ci.user_id,\\\\n\\" +\\n                \\"ci.sku_id,\\\\n\\" +\\n                \\"ci.order_id,\\\\n\\" +\\n                \\"date_format(ci.create_time,\'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"ci.create_time,\\\\n\\" +\\n                \\"ci.appraise,\\\\n\\" +\\n                \\"dic.dic_name,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from comment_info ci\\\\n\\" +\\n                \\"left join\\\\n\\" +\\n                \\"base_dic for system_time as of ci.proc_time as dic\\\\n\\" +\\n                \\"on ci.appraise = dic.dic_code\\");\\n        tableEnv.createTemporaryView(\\"result_table\\", resultTable);\\n\\n        // TODO 7. \u5efa\u7acb Upsert-Kafka dwd_interaction_comment \u8868\\n        tableEnv.executeSql(\\"create table dwd_interaction_comment(\\\\n\\" +\\n                \\"id string,\\\\n\\" +\\n                \\"user_id string,\\\\n\\" +\\n                \\"sku_id string,\\\\n\\" +\\n                \\"order_id string,\\\\n\\" +\\n                \\"date_id string,\\\\n\\" +\\n                \\"create_time string,\\\\n\\" +\\n                \\"appraise_code string,\\\\n\\" +\\n                \\"appraise_name string,\\\\n\\" +\\n                \\"ts string,\\\\n\\" +\\n                \\"primary key(id) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_interaction_comment\\"));\\n\\n        // TODO 8. \u5c06\u5173\u8054\u7ed3\u679c\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"\\" +\\n                \\"insert into dwd_interaction_comment select * from result_table\\");\\n    }\\n}\\n```\\n## \u7528\u6237\u57df\u7528\u6237\u6ce8\u518c\u4e8b\u52a1\u4e8b\u5b9e\u8868\\n\\n### \u4e3b\u8981\u4efb\u52a1\\n\\n\\t\u8bfb\u53d6\u7528\u6237\u8868\u6570\u636e\uff0c\u83b7\u53d6\u6ce8\u518c\u65f6\u95f4\uff0c\u5c06\u7528\u6237\u6ce8\u518c\u4fe1\u606f\u5199\u5165 Kafka \u7528\u6237\u6ce8\u518c\u4e3b\u9898\u3002\\n  \\n### \u601d\u8def\u5206\u6790\\n\\n\\t\u7528\u6237\u6ce8\u518c\u65f6\u4f1a\u5728\u7528\u6237\u8868\u4e2d\u63d2\u5165\u4e00\u6761\u6570\u636e\uff0c\u7b5b\u9009\u64cd\u4f5c\u7c7b\u578b\u4e3a insert \u7684\u6570\u636e\u5373\u53ef\u3002\\n  \\n### \u56fe\u89e3\\n\\n   ![img](https://user-images.githubusercontent.com/34996528/167243060-268080b2-fc92-4bd5-aa94-c896fa5043bb.png)\\n\\n### \u4ee3\u7801\\n```\\npackage com.atguigu.gmall.realtime.app.dwd.db;\\n\\nimport com.atguigu.gmall.realtime.util.KafkaUtil;\\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\\nimport org.apache.flink.api.common.time.Time;\\nimport org.apache.flink.runtime.state.hashmap.HashMapStateBackend;\\nimport org.apache.flink.streaming.api.CheckpointingMode;\\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\\nimport org.apache.flink.table.api.Table;\\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\\n\\nimport java.time.ZoneId;\\n\\npublic class DwdUserRegister {\\npublic static void main(String[] args) throws Exception {\\n\\n        // TODO 1. \u73af\u5883\u51c6\u5907\\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\\n        env.setParallelism(4);\\n        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);\\n        tableEnv.getConfig().setLocalTimeZone(ZoneId.of(\\"GMT+8\\"));\\n\\n        // TODO 2. \u542f\u7528\u72b6\u6001\u540e\u7aef\\n        env.enableCheckpointing(3000L, CheckpointingMode.EXACTLY_ONCE);\\n        env.getCheckpointConfig().setCheckpointTimeout(60 * 1000L);\\n        env.getCheckpointConfig().enableExternalizedCheckpoints(\\n                CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION\\n        );\\n        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(3000L);\\n        env.setRestartStrategy(\\n                RestartStrategies.failureRateRestart(3, Time.days(1L), Time.minutes(3L))\\n        );\\n        env.setStateBackend(new HashMapStateBackend());\\n        env.getCheckpointConfig().setCheckpointStorage(\\"hdfs://hadoop102:8020/ck\\");\\n        System.setProperty(\\"HADOOP_USER_NAME\\", \\"atguigu\\");\\n\\n        // TODO 3. \u4ece Kafka \u8bfb\u53d6\u4e1a\u52a1\u6570\u636e\uff0c\u5c01\u88c5\u4e3a Flink SQL \u8868\\n        tableEnv.executeSql(\\"create table topic_db(\\" +\\n                \\"`database` string,\\\\n\\" +\\n                \\"`table` string,\\\\n\\" +\\n                \\"`type` string,\\\\n\\" +\\n                \\"`data` map<string, string>,\\\\n\\" +\\n                \\"`ts` string\\\\n\\" +\\n                \\")\\" + KafkaUtil.getKafkaDDL(\\"topic_db\\", \\"dwd_trade_order_detail\\"));\\n\\n        // TODO 4. \u8bfb\u53d6\u7528\u6237\u8868\u6570\u636e\\n        Table userInfo = tableEnv.sqlQuery(\\"select\\\\n\\" +\\n                \\"data[\'id\'] user_id,\\\\n\\" +\\n                \\"data[\'create_time\'] create_time,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from topic_db\\\\n\\" +\\n                \\"where `table` = \'user_info\'\\\\n\\" +\\n                \\"and `type` = \'insert\'\\\\n\\");\\n        tableEnv.createTemporaryView(\\"user_info\\", userInfo);\\n\\n        // TODO 5. \u521b\u5efa Upsert-Kafka dwd_user_register \u8868\\n        tableEnv.executeSql(\\"create table `dwd_user_register`(\\\\n\\" +\\n                \\"`user_id` string,\\\\n\\" +\\n                \\"`date_id` string,\\\\n\\" +\\n                \\"`create_time` string,\\\\n\\" +\\n                \\"`ts` string,\\\\n\\" +\\n                \\"primary key(`user_id`) not enforced\\\\n\\" +\\n                \\")\\" + KafkaUtil.getUpsertKafkaDDL(\\"dwd_user_register\\"));\\n\\n        // TODO 6. \u5c06\u8f93\u5165\u5199\u5165 Upsert-Kafka \u8868\\n        tableEnv.executeSql(\\"insert into dwd_user_register\\\\n\\" +\\n                \\"select \\\\n\\" +\\n                \\"user_id,\\\\n\\" +\\n                \\"date_format(create_time, \'yyyy-MM-dd\') date_id,\\\\n\\" +\\n                \\"create_time,\\\\n\\" +\\n                \\"ts\\\\n\\" +\\n                \\"from user_info\\");\\n\\n    }\\n}\\n```"},{"id":"/\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840","source":"@site/i18n/en/docusaurus-plugin-content-blog/\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840.md","title":"Fundamentals of Realtime Digital Warehouse Theory","description":"\u6570\u636e\u4ed3\u5e93\u6982\u8ff0","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"data warehouse","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-warehouse"}],"readingTime":31.355,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["data warehouse"]},"prevItem":{"title":"Realtime DataWarehouse Development","permalink":"/Bigdata_Blog_Website/en/blog/\u5b9e\u65f6\u6570\u4ed3\u5f00\u53d1"},"nextItem":{"title":"Digital warehouse architecture","permalink":"/Bigdata_Blog_Website/en/blog/\u6570\u4ed3\u67b6\u6784\u4f53\u7cfb"}},"content":"## \u6570\u636e\u4ed3\u5e93\u6982\u8ff0\\n\\n### \u6570\u636e\u4ed3\u5e93\u6982\u5ff5\\n\\n\u6570\u636e\u4ed3\u5e93\u662f\u4e00\u4e2a\u4e3a\u6570\u636e\u5206\u6790\u800c\u8bbe\u8ba1\u7684\u4f01\u4e1a\u7ea7\u6570\u636e\u7ba1\u7406\u7cfb\u7edf\u3002\u6570\u636e\u4ed3\u5e93\u53ef\u96c6\u4e2d\u3001\u6574\u5408\u591a\u4e2a\u4fe1\u606f\u6e90\u7684\u5927\u91cf\u6570\u636e\uff0c\u501f\u52a9\u6570\u636e\u4ed3\u5e93\u7684\u5206\u6790\u80fd\u529b\uff0c\u4f01\u4e1a\u53ef\u4ece\u6570\u636e\u4e2d\u83b7\u5f97\u5b9d\u8d35\u7684\u4fe1\u606f\u8fdb\u800c\u6539\u8fdb\u51b3\u7b56\u3002\u540c\u65f6\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6570\u636e\u4ed3\u5e93\u4e2d\u79ef\u7d2f\u7684\u5927\u91cf\u5386\u53f2\u6570\u636e\u5bf9\u4e8e\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u4e1a\u52a1\u5206\u6790\u5e08\u4e5f\u662f\u5341\u5206\u5b9d\u8d35\u7684\u3002\\n\\n### \u6570\u636e\u4ed3\u5e93\u6838\u5fc3\u67b6\u6784\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153501-915f456b-b22c-4810-95b4-209239568655.png)\\n\\n\x3c!--truncate--\x3e\\n\\n## \u6570\u636e\u4ed3\u5e93\u5efa\u6a21\u6982\u8ff0\\n\\n### \u6570\u636e\u4ed3\u5e93\u5efa\u6a21\u7684\u610f\u4e49\\n\\n\u5982\u679c\u628a\u6570\u636e\u770b\u4f5c\u56fe\u4e66\u9986\u91cc\u7684\u4e66\uff0c\u6211\u4eec\u5e0c\u671b\u770b\u5230\u5b83\u4eec\u5728\u4e66\u67b6\u4e0a\u5206\u95e8\u522b\u7c7b\u5730\u653e\u7f6e\uff1b\u5982\u679c\u628a\u6570\u636e\u770b\u4f5c\u57ce\u5e02\u7684\u5efa\u7b51\uff0c\u6211\u4eec\u5e0c\u671b\u57ce\u5e02\u89c4\u5212\u5e03\u5c40\u5408\u7406\uff1b\u5982\u679c\u628a\u6570\u636e\u770b\u4f5c\u7535\u8111\u6587\u4ef6\u548c\u6587\u4ef6\u5939\uff0c\u6211\u4eec\u5e0c\u671b\u6309\u7167\u81ea\u5df1\u7684\u4e60\u60ef\u6709\u5f88\u597d\u7684\u6587\u4ef6\u5939\u7ec4\u7ec7\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u7cdf\u7cd5\u6df7\u4e71\u7684\u684c\u9762\uff0c\u7ecf\u5e38\u4e3a\u627e\u4e00\u4e2a\u6587\u4ef6\u800c\u4e0d\u77e5\u6240\u63aa\u3002\\n\u6570\u636e\u6a21\u578b\u5c31\u662f\u6570\u636e\u7ec4\u7ec7\u548c\u5b58\u50a8\u65b9\u6cd5\uff0c\u5b83\u5f3a\u8c03\u4ece\u4e1a\u52a1\u3001\u6570\u636e\u5b58\u53d6\u548c\u4f7f\u7528\u89d2\u5ea6\u5408\u7406\u5b58\u50a8\u6570\u636e\u3002\u53ea\u6709\u5c06\u6570\u636e\u6709\u5e8f\u7684\u7ec4\u7ec7\u548c\u5b58\u50a8\u8d77\u6765\u4e4b\u540e\uff0c\u6570\u636e\u624d\u80fd\u5f97\u5230\u9ad8\u6027\u80fd\u3001\u4f4e\u6210\u672c\u3001\u9ad8\u6548\u7387\u3001\u9ad8\u8d28\u91cf\u7684\u4f7f\u7528\u3002\\n\\n- \u9ad8\u6027\u80fd\uff1a\u826f\u597d\u7684\u6570\u636e\u6a21\u578b\u80fd\u591f\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u67e5\u8be2\u6240\u9700\u8981\u7684\u6570\u636e\u3002\\n- \u4f4e\u6210\u672c\uff1a\u826f\u597d\u7684\u6570\u636e\u6a21\u578b\u80fd\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u5b9e\u73b0\u8ba1\u7b97\u7ed3\u679c\u7684\u590d\u7528\uff0c\u964d\u4f4e\u8ba1\u7b97\u6210\u672c\u3002\\n- \u9ad8\u6548\u7387\uff1a\u826f\u597d\u7684\u6570\u636e\u6a21\u578b\u80fd\u6781\u5927\u7684\u6539\u5584\u7528\u6237\u4f7f\u7528\u6570\u636e\u7684\u4f53\u9a8c\uff0c\u63d0\u9ad8\u4f7f\u7528\u6570\u636e\u7684\u6548\u7387\u3002\\n- \u9ad8\u8d28\u91cf\uff1a\u826f\u597d\u7684\u6570\u636e\u6a21\u578b\u80fd\u6539\u5584\u6570\u636e\u7edf\u8ba1\u53e3\u5f84\u7684\u6df7\u4e71\uff0c\u51cf\u5c11\u8ba1\u7b97\u9519\u8bef\u7684\u53ef\u80fd\u6027\\n\\n\\n### \u6570\u636e\u4ed3\u5e93\u5efa\u6a21\u65b9\u6cd5\u8bba\\n\\n#### ER\u6a21\u578b\\n\\n\u6570\u636e\u4ed3\u5e93\u4e4b\u7236Bill Inmon\u63d0\u51fa\u7684\u5efa\u6a21\u65b9\u6cd5\u662f\u4ece\u5168\u4f01\u4e1a\u7684\u9ad8\u5ea6\uff0c\u7528\u5b9e\u4f53\u5173\u7cfb\uff08Entity Relationship\uff0cER\uff09\u6a21\u578b\u6765\u63cf\u8ff0\u4f01\u4e1a\u4e1a\u52a1\uff0c\u5e76\u7528\u89c4\u8303\u5316\u7684\u65b9\u5f0f\u8868\u793a\u51fa\u6765\uff0c\u5728\u8303\u5f0f\u7406\u8bba\u4e0a\u7b26\u54083NF\u3002\\n1\uff09\u5b9e\u4f53\u5173\u7cfb\u6a21\u578b\\n\u5b9e\u4f53\u5173\u7cfb\u6a21\u578b\u5c06\u590d\u6742\u7684\u6570\u636e\u62bd\u8c61\u4e3a\u4e24\u4e2a\u6982\u5ff5\u2014\u2014\u5b9e\u4f53\u548c\u5173\u7cfb\u3002\u5b9e\u4f53\u8868\u793a\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f8b\u5982\u5b66\u751f\u3001\u73ed\u7ea7\uff0c\u5173\u7cfb\u662f\u6307\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u4f8b\u5982\u5b66\u751f\u548c\u73ed\u7ea7\u4e4b\u95f4\u7684\u4ece\u5c5e\u5173\u7cfb\u3002\\n2\uff09\u6570\u636e\u5e93\u89c4\u8303\u5316\\n\u6570\u636e\u5e93\u89c4\u8303\u5316\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u8303\u5f0f\u8bbe\u8ba1\u6570\u636e\u5e93\uff08\u901a\u5e38\u662f\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff09\u7684\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u51cf\u5c11\u6570\u636e\u5197\u4f59\uff0c\u589e\u5f3a\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\\n\u8fd9\u4e00\u7cfb\u5217\u8303\u5f0f\u5c31\u662f\u6307\u5728\u8bbe\u8ba1\u5173\u7cfb\u578b\u6570\u636e\u5e93\u65f6\uff0c\u9700\u8981\u9075\u4ece\u7684\u4e0d\u540c\u7684\u89c4\u8303\u3002\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u8303\u5f0f\u4e00\u5171\u6709\u516d\u79cd\uff0c\u5206\u522b\u662f\u7b2c\u4e00\u8303\u5f0f\uff081NF\uff09\u3001\u7b2c\u4e8c\u8303\u5f0f\uff082NF\uff09\u3001\u7b2c\u4e09\u8303\u5f0f\uff083NF\uff09\u3001\u5df4\u65af-\u79d1\u5fb7\u8303\u5f0f\uff08BCNF\uff09\u3001\u7b2c\u56db\u8303\u5f0f(4NF\uff09\u548c\u7b2c\u4e94\u8303\u5f0f\uff085NF\uff09\u3002\u9075\u5faa\u7684\u8303\u5f0f\u7ea7\u522b\u8d8a\u9ad8\uff0c\u6570\u636e\u5197\u4f59\u6027\u5c31\u8d8a\u4f4e\u3002\\n3\uff09\u4e09\u8303\u5f0f\\n\uff081\uff09\u51fd\u6570\u4f9d\u8d56\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153683-7dec074a-908e-4300-b5c5-e2bbcecca226.png)\\n\\n\uff082\uff09\u7b2c\u4e00\u8303\u5f0f\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153729-fb85329b-75d2-4898-bcb0-bd24d73b304e.png)\\n\\n\uff083\uff09\u7b2c\u4e8c\u8303\u5f0f\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153754-b30c4bd1-b4d9-4010-889c-1c1818f13f78.png)\\n\\n\uff084\uff09\u7b2c\u4e09\u8303\u5f0f\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153773-bf01a21b-57b1-4e74-b83e-8f1f9dcd8d92.png)\\n\\n\u4e0b\u56fe\u4e3a\u4e00\u4e2a\u91c7\u7528Bill Inmon\u5021\u5bfc\u7684\u5efa\u6a21\u65b9\u6cd5\u6784\u5efa\u7684\u6a21\u578b\uff0c\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u8f83\u4e3a\u677e\u6563\u3001\u96f6\u788e\uff0c\u7269\u7406\u8868\u6570\u91cf\u591a\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153789-a9bbf3a5-b194-489f-9441-7b68ed305c4a.png)\\n\\n\u8fd9\u79cd\u5efa\u6a21\u65b9\u6cd5\u7684\u51fa\u53d1\u70b9\u662f\u6574\u5408\u6570\u636e\uff0c\u5176\u76ee\u7684\u662f\u5c06\u6574\u4e2a\u4f01\u4e1a\u7684\u6570\u636e\u8fdb\u884c\u7ec4\u5408\u548c\u5408\u5e76\uff0c\u5e76\u8fdb\u884c\u89c4\u8303\u5904\u7406\uff0c\u51cf\u5c11\u6570\u636e\u5197\u4f59\u6027\uff0c\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002\u8fd9\u79cd\u6a21\u578b\u5e76\u4e0d\u9002\u5408\u76f4\u63a5\u7528\u4e8e\u5206\u6790\u7edf\u8ba1\u3002\\n\\n#### \u7ef4\u5ea6\u6a21\u578b\\n\u6570\u636e\u4ed3\u5e93\u9886\u57df\u7684\u4ee4\u4e00\u4f4d\u5927\u5e08\u2014\u2014Ralph Kimball\u5021\u5bfc\u7684\u5efa\u6a21\u65b9\u6cd5\u4e3a\u7ef4\u5ea6\u5efa\u6a21\u3002\u7ef4\u5ea6\u6a21\u578b\u5c06\u590d\u6742\u7684\u4e1a\u52a1\u901a\u8fc7\u4e8b\u5b9e\u548c\u7ef4\u5ea6\u4e24\u4e2a\u6982\u5ff5\u8fdb\u884c\u5448\u73b0\u3002\u4e8b\u5b9e\u901a\u5e38\u5bf9\u5e94\u4e1a\u52a1\u8fc7\u7a0b\uff0c\u800c\u7ef4\u5ea6\u901a\u5e38\u5bf9\u5e94\u4e1a\u52a1\u8fc7\u7a0b\u53d1\u751f\u65f6\u6240\u5904\u7684\u73af\u5883\u3002\\n\u6ce8\uff1a\u4e1a\u52a1\u8fc7\u7a0b\u53ef\u4ee5\u6982\u62ec\u4e3a\u4e00\u4e2a\u4e2a\u4e0d\u53ef\u62c6\u5206\u7684\u884c\u4e3a\u4e8b\u4ef6\uff0c\u4f8b\u5982\u7535\u5546\u4ea4\u6613\u4e2d\u7684\u4e0b\u5355\uff0c\u53d6\u6d88\u8ba2\u5355\uff0c\u4ed8\u6b3e\uff0c\u9000\u5355\u7b49\uff0c\u90fd\u662f\u4e1a\u52a1\u8fc7\u7a0b\u3002\\n\u4e0b\u56fe\u4e3a\u4e00\u4e2a\u5178\u578b\u7684\u7ef4\u5ea6\u6a21\u578b\uff0c\u5176\u4e2d\u4f4d\u4e8e\u4e2d\u5fc3\u7684SalesOrder\u4e3a\u4e8b\u5b9e\u8868\uff0c\u5176\u4e2d\u4fdd\u5b58\u7684\u662f\u4e0b\u5355\u8fd9\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u7684\u6240\u6709\u8bb0\u5f55\u3002\u4f4d\u4e8e\u5468\u56f4\u6bcf\u5f20\u8868\u90fd\u662f\u7ef4\u5ea6\u8868\uff0c\u5305\u62ecDate\uff08\u65e5\u671f\uff09\uff0cCustomer\uff08\u987e\u5ba2\uff09\uff0cProduct\uff08\u4ea7\u54c1\uff09\uff0cLocation\uff08\u5730\u533a\uff09\u7b49\uff0c\u8fd9\u4e9b\u7ef4\u5ea6\u8868\u5c31\u7ec4\u6210\u4e86\u6bcf\u4e2a\u8ba2\u5355\u53d1\u751f\u65f6\u6240\u5904\u7684\u73af\u5883\uff0c\u5373\u4f55\u4eba\u3001\u4f55\u65f6\u3001\u5728\u4f55\u5730\u4e0b\u5355\u4e86\u4f55\u79cd\u4ea7\u54c1\u3002\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6a21\u578b\u76f8\u5bf9\u6e05\u6670\u3001\u7b80\u6d01\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153809-7085f05c-211b-4913-afb2-e09269acadf5.png)\\n\\n\\n\u7ef4\u5ea6\u5efa\u6a21\u4ee5\u6570\u636e\u5206\u6790\u4f5c\u4e3a\u51fa\u53d1\u70b9\uff0c\u4e3a\u6570\u636e\u5206\u6790\u670d\u52a1\uff0c\u56e0\u6b64\u5b83\u5173\u6ce8\u7684\u91cd\u70b9\u7684\u7528\u6237\u5982\u4f55\u66f4\u5feb\u7684\u5b8c\u6210\u9700\u6c42\u5206\u6790\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b0\u8f83\u597d\u7684\u5927\u89c4\u6a21\u590d\u6742\u67e5\u8be2\u7684\u54cd\u5e94\u6027\u80fd\u3002\\n\\n## \u7ef4\u5ea6\u5efa\u6a21\u7406\u8bba\u4e4b\u4e8b\u5b9e\u8868\\n\\n### \u4e8b\u5b9e\u8868\u6982\u8ff0\\n\\n\u4e8b\u5b9e\u8868\u4f5c\u4e3a\u6570\u636e\u4ed3\u5e93\u7ef4\u5ea6\u5efa\u6a21\u7684\u6838\u5fc3\uff0c\u7d27\u7d27\u56f4\u7ed5\u7740\u4e1a\u52a1\u8fc7\u7a0b\u6765\u8bbe\u8ba1\u3002\u5176\u5305\u542b\u4e0e\u8be5\u4e1a\u52a1\u8fc7\u7a0b\u6709\u5173\u7684\u7ef4\u5ea6\u5f15\u7528\uff08\u7ef4\u5ea6\u8868\u5916\u952e\uff09\u4ee5\u53ca\u8be5\u4e1a\u52a1\u8fc7\u7a0b\u7684\u5ea6\u91cf\uff08\u901a\u5e38\u662f\u53ef\u7d2f\u52a0\u7684\u6570\u5b57\u7c7b\u578b\u5b57\u6bb5\uff09\u3002\\n\\n#### \u4e8b\u5b9e\u8868\u7279\u70b9\\n\\n\u4e8b\u5b9e\u8868\u901a\u5e38\u6bd4\u8f83\u201c\u7ec6\u957f\u201d\uff0c\u5373\u5217\u8f83\u5c11\uff0c\u4f46\u884c\u8f83\u591a\uff0c\u4e14\u884c\u7684\u589e\u901f\u5feb\u3002\\n\\n#### \u4e8b\u5b9e\u8868\u5206\u7c7b\\n\\n\u4e8b\u5b9e\u8868\u6709\u4e09\u79cd\u7c7b\u578b\uff1a\u5206\u522b\u662f\u4e8b\u52a1\u4e8b\u5b9e\u8868\u3001\u5468\u671f\u5feb\u7167\u4e8b\u5b9e\u8868\u548c\u7d2f\u79ef\u5feb\u7167\u4e8b\u5b9e\u8868\uff0c\u6bcf\u79cd\u4e8b\u5b9e\u8868\u90fd\u5177\u6709\u4e0d\u540c\u7684\u7279\u70b9\u548c\u9002\u7528\u573a\u666f\uff0c\u4e0b\u9762\u9010\u4e2a\u4ecb\u7ecd\u3002\\n\\n### \u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\\n\\n#### \u6982\u8ff0\\n\\n\u4e8b\u52a1\u4e8b\u5b9e\u8868\u7528\u6765\u8bb0\u5f55\u5404\u4e1a\u52a1\u8fc7\u7a0b\uff0c\u5b83\u4fdd\u5b58\u7684\u662f\u5404\u4e1a\u52a1\u8fc7\u7a0b\u7684\u539f\u5b50\u64cd\u4f5c\u4e8b\u4ef6\uff0c\u5373\u6700\u7ec6\u7c92\u5ea6\u7684\u64cd\u4f5c\u4e8b\u4ef6\u3002\u7c92\u5ea6\u662f\u6307\u4e8b\u5b9e\u8868\u4e2d\u4e00\u884c\u6570\u636e\u6240\u8868\u8fbe\u7684\u4e1a\u52a1\u7ec6\u8282\u7a0b\u5ea6\u3002\\n\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u53ef\u7528\u4e8e\u5206\u6790\u4e0e\u5404\u4e1a\u52a1\u8fc7\u7a0b\u76f8\u5173\u7684\u5404\u9879\u7edf\u8ba1\u6307\u6807\uff0c\u7531\u4e8e\u5176\u4fdd\u5b58\u4e86\u6700\u7ec6\u7c92\u5ea6\u7684\u8bb0\u5f55\uff0c\u53ef\u4ee5\u63d0\u4f9b\u6700\u5927\u9650\u5ea6\u7684\u7075\u6d3b\u6027\uff0c\u53ef\u4ee5\u652f\u6301\u65e0\u6cd5\u9884\u671f\u7684\u5404\u79cd\u7ec6\u8282\u5c42\u6b21\u7684\u7edf\u8ba1\u9700\u6c42\u3002\\n\\n#### \u8bbe\u8ba1\u6d41\u7a0b\\n\\n\u8bbe\u8ba1\u4e8b\u52a1\u4e8b\u5b9e\u8868\u65f6\u4e00\u822c\u53ef\u9075\u5faa\u4ee5\u4e0b\u56db\u4e2a\u6b65\u9aa4\uff1a\\n\u9009\u62e9\u4e1a\u52a1\u8fc7\u7a0b\u2192\u58f0\u660e\u7c92\u5ea6\u2192\u786e\u8ba4\u7ef4\u5ea6\u2192\u786e\u8ba4\u4e8b\u5b9e\\n\\n1\uff09\u9009\u62e9\u4e1a\u52a1\u8fc7\u7a0b\\n\u5728\u4e1a\u52a1\u7cfb\u7edf\u4e2d\uff0c\u6311\u9009\u6211\u4eec\u611f\u5174\u8da3\u7684\u4e1a\u52a1\u8fc7\u7a0b\uff0c\u4e1a\u52a1\u8fc7\u7a0b\u53ef\u4ee5\u6982\u62ec\u4e3a\u4e00\u4e2a\u4e2a\u4e0d\u53ef\u62c6\u5206\u7684\u884c\u4e3a\u4e8b\u4ef6\uff0c\u4f8b\u5982\u7535\u5546\u4ea4\u6613\u4e2d\u7684\u4e0b\u5355\uff0c\u53d6\u6d88\u8ba2\u5355\uff0c\u4ed8\u6b3e\uff0c\u9000\u5355\u7b49\uff0c\u90fd\u662f\u4e1a\u52a1\u8fc7\u7a0b\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u5bf9\u5e94\u4e00\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u3002\\n\\n2\uff09\u58f0\u660e\u7c92\u5ea6\\n\u4e1a\u52a1\u8fc7\u7a0b\u786e\u5b9a\u540e\uff0c\u9700\u8981\u4e3a\u6bcf\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u58f0\u660e\u7c92\u5ea6\u3002\u5373\u7cbe\u786e\u5b9a\u4e49\u6bcf\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u6bcf\u884c\u6570\u636e\u8868\u793a\u4ec0\u4e48\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u9009\u62e9\u6700\u7ec6\u7c92\u5ea6\uff0c\u4ee5\u6b64\u6765\u5e94\u5404\u79cd\u7ec6\u8282\u7a0b\u5ea6\u7684\u9700\u6c42\u3002\\n\u5178\u578b\u7684\u7c92\u5ea6\u58f0\u660e\u5982\u4e0b\uff1a\\n\u8ba2\u5355\u4e8b\u5b9e\u8868\u4e2d\u4e00\u884c\u6570\u636e\u8868\u793a\u7684\u662f\u4e00\u4e2a\u8ba2\u5355\u4e2d\u7684\u4e00\u4e2a\u5546\u54c1\u9879\u3002\\n\\n3\uff09\u786e\u5b9a\u7ef4\u5ea6\\n\u786e\u5b9a\u7ef4\u5ea6\u5177\u4f53\u662f\u6307\uff0c\u786e\u5b9a\u4e0e\u6bcf\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u76f8\u5173\u7684\u7ef4\u5ea6\u6709\u54ea\u4e9b\u3002\\n\u786e\u5b9a\u7ef4\u5ea6\u65f6\u5e94\u5c3d\u91cf\u591a\u7684\u9009\u62e9\u4e0e\u4e1a\u52a1\u8fc7\u7a0b\u76f8\u5173\u7684\u73af\u5883\u4fe1\u606f\u3002\u56e0\u4e3a\u7ef4\u5ea6\u7684\u4e30\u5bcc\u7a0b\u5ea6\u5c31\u51b3\u5b9a\u4e86\u7ef4\u5ea6\u6a21\u578b\u80fd\u591f\u652f\u6301\u7684\u6307\u6807\u4e30\u5bcc\u7a0b\u5ea6\u3002\\n\\n4\uff09\u786e\u5b9a\u4e8b\u5b9e\\n\u6b64\u5904\u7684\u201c\u4e8b\u5b9e\u201d\u4e00\u8bcd\uff0c\u6307\u7684\u662f\u6bcf\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u7684\u5ea6\u91cf\u503c\uff08\u901a\u5e38\u662f\u53ef\u7d2f\u52a0\u7684\u6570\u5b57\u7c7b\u578b\u7684\u503c\uff0c\u4f8b\u5982\uff1a\u6b21\u6570\u3001\u4e2a\u6570\u3001\u4ef6\u6570\u3001\u91d1\u989d\u7b49\uff09\u3002\\n\u7ecf\u8fc7\u4e0a\u8ff0\u56db\u4e2a\u6b65\u9aa4\uff0c\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u5c31\u57fa\u672c\u8bbe\u8ba1\u5b8c\u6210\u4e86\u3002\u7b2c\u4e00\u6b65\u9009\u62e9\u4e1a\u52a1\u8fc7\u7a0b\u53ef\u4ee5\u786e\u5b9a\u6709\u54ea\u4e9b\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\uff0c\u7b2c\u4e8c\u6b65\u53ef\u4ee5\u786e\u5b9a\u6bcf\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u6bcf\u884c\u6570\u636e\u662f\u4ec0\u4e48\uff0c\u7b2c\u4e09\u6b65\u53ef\u4ee5\u786e\u5b9a\u6bcf\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u7ef4\u5ea6\u5916\u952e\uff0c\u7b2c\u56db\u6b65\u53ef\u4ee5\u786e\u5b9a\u6bcf\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u5ea6\u91cf\u503c\u5b57\u6bb5\u3002\\n\\n#### \u4e0d\u8db3\\n\\n\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u53ef\u4ee5\u4fdd\u5b58\u6240\u6709\u4e1a\u52a1\u8fc7\u7a0b\u7684\u6700\u7ec6\u7c92\u5ea6\u7684\u64cd\u4f5c\u4e8b\u4ef6\uff0c\u6545\u7406\u8bba\u4e0a\u5176\u53ef\u4ee5\u652f\u6491\u4e0e\u5404\u4e1a\u52a1\u8fc7\u7a0b\u76f8\u5173\u7684\u5404\u79cd\u7edf\u8ba1\u7c92\u5ea6\u7684\u9700\u6c42\u3002\u4f46\u5bf9\u4e8e\u67d0\u4e9b\u7279\u5b9a\u7c7b\u578b\u7684\u9700\u6c42\uff0c\u5176\u903b\u8f91\u53ef\u80fd\u4f1a\u6bd4\u8f83\u590d\u6742\uff0c\u6216\u8005\u6548\u7387\u4f1a\u6bd4\u8f83\u4f4e\u4e0b\u3002\u4f8b\u5982\uff1a\\n\\n1\uff09\u5b58\u91cf\u578b\u6307\u6807\\n\u4f8b\u5982\u5546\u54c1\u5e93\u5b58\uff0c\u8d26\u6237\u4f59\u989d\u7b49\u3002\u6b64\u5904\u4ee5\u7535\u5546\u4e2d\u7684\u865a\u62df\u8d27\u5e01\u4e3a\u4f8b\uff0c\u865a\u62df\u8d27\u5e01\u4e1a\u52a1\u5305\u542b\u7684\u4e1a\u52a1\u8fc7\u7a0b\u4e3b\u8981\u5305\u62ec\u83b7\u53d6\u8d27\u5e01\u548c\u4f7f\u7528\u8d27\u5e01\uff0c\u4e24\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u5404\u81ea\u5bf9\u5e94\u4e00\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\uff0c\u4e00\u5f20\u5b58\u50a8\u6240\u6709\u7684\u83b7\u53d6\u8d27\u5e01\u7684\u539f\u5b50\u64cd\u4f5c\u4e8b\u4ef6\uff0c\u53e6\u4e00\u5f20\u5b58\u50a8\u6240\u6709\u4f7f\u7528\u8d27\u5e01\u7684\u539f\u5b50\u64cd\u4f5c\u4e8b\u4ef6\u3002\\n\\n\u5047\u5b9a\u73b0\u6709\u4e00\u4e2a\u9700\u6c42\uff0c\u8981\u6c42\u7edf\u8ba1\u622a\u81f3\u5f53\u65e5\u7684\u5404\u7528\u6237\u865a\u62df\u8d27\u5e01\u4f59\u989d\u3002\u7531\u4e8e\u83b7\u53d6\u8d27\u5e01\u548c\u4f7f\u7528\u8d27\u5e01\u5747\u4f1a\u5f71\u54cd\u5230\u4f59\u989d\uff0c\u6545\u9700\u8981\u5bf9\u4e24\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u8fdb\u884c\u805a\u5408\uff0c\u4e14\u9700\u8981\u533a\u5206\u4e24\u8005\u5bf9\u4f59\u989d\u7684\u5f71\u54cd\uff08\u52a0\u6216\u51cf\uff09\uff0c\u53e6\u5916\u9700\u8981\u5bf9\u4e24\u5f20\u8868\u7684\u5168\u8868\u6570\u636e\u805a\u5408\u624d\u80fd\u5f97\u5230\u7edf\u8ba1\u7ed3\u679c\u3002\\n\u53ef\u4ee5\u770b\u5230\uff0c\u4e0d\u8bba\u662f\u4ece\u903b\u8f91\u4e0a\u8fd8\u662f\u6548\u7387\u4e0a\u8003\u8651\uff0c\u8fd9\u90fd\u4e0d\u662f\u4e00\u4e2a\u597d\u7684\u65b9\u6848\u3002\\n\\n2\uff09\u591a\u4e8b\u52a1\u5173\u8054\u7edf\u8ba1\\n\u4f8b\u5982\uff0c\u73b0\u9700\u8981\u7edf\u8ba1\u6700\u8fd130\u5929\uff0c\u7528\u6237\u4e0b\u5355\u5230\u652f\u4ed8\u7684\u65f6\u95f4\u95f4\u9694\u7684\u5e73\u5747\u503c\u3002\u7edf\u8ba1\u601d\u8def\u5e94\u8be5\u662f\u627e\u5230\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868\u548c\u652f\u4ed8\u4e8b\u52a1\u4e8b\u5b9e\u8868\uff0c\u8fc7\u6ee4\u51fa\u6700\u8fd130\u5929\u7684\u8bb0\u5f55\uff0c\u7136\u540e\u6309\u7167\u8ba2\u5355id\u5bf9\u4e24\u5f20\u4e8b\u5b9e\u8868\u8fdb\u884c\u5173\u8054\uff0c\u4e4b\u540e\u7528\u652f\u4ed8\u65f6\u95f4\u51cf\u53bb\u4e0b\u5355\u65f6\u95f4\uff0c\u7136\u540e\u518d\u6c42\u5e73\u5747\u503c\u3002\\n\\n\u903b\u8f91\u4e0a\u867d\u7136\u5e76\u4e0d\u590d\u6742\uff0c\u4f46\u662f\u5176\u6548\u7387\u8f83\u4f4e\uff0c\u5e94\u4e3a\u4e0b\u5355\u4e8b\u52a1\u4e8b\u5b9e\u8868\u548c\u652f\u4ed8\u4e8b\u52a1\u4e8b\u5b9e\u8868\u5747\u4e3a\u5927\u8868\uff0c\u5927\u8868join\u5927\u8868\u7684\u64cd\u4f5c\u5e94\u5c3d\u91cf\u907f\u514d\u3002\\n\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u4e0a\u8ff0\u4e24\u79cd\u573a\u666f\u4e0b\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u8868\u73b0\u5e76\u4e0d\u7406\u60f3\u3002\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u53e6\u5916\u4e24\u79cd\u7c7b\u578b\u7684\u4e8b\u5b9e\u8868\u5c31\u662f\u4e3a\u4e86\u5f25\u8865\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u4e0d\u8db3\u7684\u3002\\n\\n### \u5468\u671f\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\\n\\n#### \u6982\u8ff0\\n\\n\u5468\u671f\u5feb\u7167\u4e8b\u5b9e\u8868\u4ee5\u5177\u6709\u89c4\u5f8b\u6027\u7684\u3001\u53ef\u9884\u89c1\u7684\u65f6\u95f4\u95f4\u9694\u6765\u8bb0\u5f55\u4e8b\u5b9e\uff0c\u4e3b\u8981\u7528\u4e8e\u5206\u6790\u4e00\u4e9b\u5b58\u91cf\u578b\uff08\u4f8b\u5982\u5546\u54c1\u5e93\u5b58\uff0c\u8d26\u6237\u4f59\u989d\uff09\u6216\u8005\u72b6\u6001\u578b\uff08\u7a7a\u6c14\u6e29\u5ea6\uff0c\u884c\u9a76\u901f\u5ea6\uff09\u6307\u6807\u3002\\n\\n\u5bf9\u4e8e\u5546\u54c1\u5e93\u5b58\u3001\u8d26\u6237\u4f59\u989d\u8fd9\u4e9b\u5b58\u91cf\u578b\u6307\u6807\uff0c\u4e1a\u52a1\u7cfb\u7edf\u4e2d\u901a\u5e38\u5c31\u4f1a\u8ba1\u7b97\u5e76\u4fdd\u5b58\u6700\u65b0\u7ed3\u679c\uff0c\u6240\u4ee5\u5b9a\u671f\u540c\u6b65\u4e00\u4efd\u5168\u91cf\u6570\u636e\u5230\u6570\u636e\u4ed3\u5e93\uff0c\u6784\u5efa\u5468\u671f\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\uff0c\u5c31\u80fd\u8f7b\u677e\u5e94\u5bf9\u6b64\u7c7b\u7edf\u8ba1\u9700\u6c42\uff0c\u800c\u65e0\u9700\u518d\u5bf9\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u4e2d\u5927\u91cf\u7684\u5386\u53f2\u8bb0\u5f55\u8fdb\u884c\u805a\u5408\u4e86\u3002\\n\u5bf9\u4e8e\u7a7a\u6c14\u6e29\u5ea6\u3001\u884c\u9a76\u901f\u5ea6\u8fd9\u4e9b\u72b6\u6001\u578b\u6307\u6807\uff0c\u7531\u4e8e\u5b83\u4eec\u7684\u503c\u5f80\u5f80\u662f\u8fde\u7eed\u7684\uff0c\u6211\u4eec\u65e0\u6cd5\u6355\u83b7\u5176\u53d8\u52a8\u7684\u539f\u5b50\u4e8b\u52a1\u64cd\u4f5c\uff0c\u6240\u4ee5\u65e0\u6cd5\u4f7f\u7528\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7edf\u8ba1\u6b64\u7c7b\u9700\u6c42\u3002\u800c\u53ea\u80fd\u5b9a\u671f\u5bf9\u5176\u8fdb\u884c\u91c7\u6837\uff0c\u6784\u5efa\u5468\u671f\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u3002\\n\\n#### \u8bbe\u8ba1\u6d41\u7a0b\\n\\n1\uff09\u786e\u5b9a\u7c92\u5ea6\\n\u5468\u671f\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u7684\u7c92\u5ea6\u53ef\u7531\u91c7\u6837\u5468\u671f\u548c\u7ef4\u5ea6\u63cf\u8ff0\uff0c\u6545\u786e\u5b9a\u91c7\u6837\u5468\u671f\u548c\u7ef4\u5ea6\u540e\u5373\u53ef\u786e\u5b9a\u7c92\u5ea6\u3002\\n\u91c7\u6837\u5468\u671f\u901a\u5e38\u9009\u62e9\u6bcf\u65e5\u3002\\n\u7ef4\u5ea6\u53ef\u6839\u636e\u7edf\u8ba1\u6307\u6807\u51b3\u5b9a\uff0c\u4f8b\u5982\u6307\u6807\u4e3a\u7edf\u8ba1\u6bcf\u4e2a\u4ed3\u5e93\u4e2d\u6bcf\u79cd\u5546\u54c1\u7684\u5e93\u5b58\uff0c\u5219\u53ef\u786e\u5b9a\u7ef4\u5ea6\u4e3a\u4ed3\u5e93\u548c\u5546\u54c1\u3002\\n\u786e\u5b9a\u5b8c\u91c7\u6837\u5468\u671f\u548c\u7ef4\u5ea6\u540e\uff0c\u5373\u53ef\u786e\u5b9a\u8be5\u8868\u7c92\u5ea6\u4e3a\u6bcf\u65e5-\u4ed3\u5e93-\u5546\u54c1\u3002\\n\\n2\uff09\u786e\u8ba4\u4e8b\u5b9e\\n\u4e8b\u5b9e\u4e5f\u53ef\u6839\u636e\u7edf\u8ba1\u6307\u6807\u51b3\u5b9a\uff0c\u4f8b\u5982\u6307\u6807\u4e3a\u7edf\u8ba1\u6bcf\u4e2a\u4ed3\u5e93\u4e2d\u6bcf\u79cd\u5546\u54c1\u7684\u5e93\u5b58\uff0c\u5219\u4e8b\u5b9e\u4e3a\u5546\u54c1\u5e93\u5b58\u3002\\n\\n#### \u4e8b\u5b9e\u7c7b\u578b\\n\\n\u6b64\u5904\u7684\u4e8b\u5b9e\u7c7b\u578b\u662f\u6307\u5ea6\u91cf\u503c\u7684\u7c7b\u578b\uff0c\u800c\u975e\u4e8b\u5b9e\u8868\u7684\u7c7b\u578b\u3002\u4e8b\u5b9e\uff08\u5ea6\u91cf\u503c\uff09\u5171\u5206\u4e3a\u4e09\u7c7b\uff0c\u5206\u522b\u662f\u53ef\u52a0\u4e8b\u5b9e\uff0c\u534a\u53ef\u52a0\u4e8b\u5b9e\u548c\u4e0d\u53ef\u52a0\u4e8b\u5b9e\u3002\\n\\n1\uff09\u53ef\u52a0\u4e8b\u5b9e\\n\u53ef\u52a0\u4e8b\u5b9e\u662f\u6307\u53ef\u4ee5\u6309\u7167\u4e0e\u4e8b\u5b9e\u8868\u76f8\u5173\u7684\u6240\u6709\u7ef4\u5ea6\u8fdb\u884c\u7d2f\u52a0\uff0c\u4f8b\u5982\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u4e2d\u7684\u4e8b\u5b9e\u3002\\n\\n2\uff09\u534a\u53ef\u52a0\u4e8b\u5b9e\\n\u534a\u53ef\u52a0\u4e8b\u5b9e\u662f\u6307\u53ea\u80fd\u6309\u7167\u4e0e\u4e8b\u5b9e\u8868\u76f8\u5173\u7684\u4e00\u90e8\u5206\u7ef4\u5ea6\u8fdb\u884c\u7d2f\u52a0\uff0c\u4f8b\u5982\u5468\u671f\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u4e2d\u7684\u4e8b\u5b9e\u3002\u4ee5\u4e0a\u8ff0\u5404\u4ed3\u5e93\u4e2d\u5404\u5546\u54c1\u7684\u5e93\u5b58\u6bcf\u5929\u5feb\u7167\u4e8b\u5b9e\u8868\u4e3a\u4f8b\uff0c\u8fd9\u5f20\u8868\u4e2d\u7684\u5e93\u5b58\u4e8b\u5b9e\u53ef\u4ee5\u6309\u7167\u4ed3\u5e93\u6216\u8005\u5546\u54c1\u7ef4\u5ea6\u8fdb\u884c\u7d2f\u52a0\uff0c\u4f46\u662f\u4e0d\u80fd\u6309\u7167\u65f6\u95f4\u7ef4\u5ea6\u8fdb\u884c\u7d2f\u52a0\uff0c\u56e0\u4e3a\u5c06\u6bcf\u5929\u7684\u5e93\u5b58\u7d2f\u52a0\u8d77\u6765\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u7684\u3002\\n\\n3\uff09\u4e0d\u53ef\u52a0\u4e8b\u5b9e\\n\u4e0d\u53ef\u52a0\u4e8b\u5b9e\u662f\u6307\u5b8c\u5168\u4e0d\u5177\u5907\u53ef\u52a0\u6027\uff0c\u4f8b\u5982\u6bd4\u7387\u578b\u4e8b\u5b9e\u3002\u4e0d\u53ef\u52a0\u4e8b\u5b9e\u901a\u5e38\u9700\u8981\u8f6c\u5316\u4e3a\u53ef\u52a0\u4e8b\u5b9e\uff0c\u4f8b\u5982\u6bd4\u7387\u53ef\u8f6c\u5316\u4e3a\u5206\u5b50\u548c\u5206\u6bcd\u3002\\n\\n### \u7d2f\u79ef\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\\n\\n#### \u6982\u8ff0\\n\\n\u7d2f\u8ba1\u5feb\u7167\u4e8b\u5b9e\u8868\u662f\u57fa\u4e8e\u4e00\u4e2a\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u7684\u591a\u4e2a\u5173\u952e\u4e1a\u52a1\u8fc7\u7a0b\u8054\u5408\u5904\u7406\u800c\u6784\u5efa\u7684\u4e8b\u5b9e\u8868\uff0c\u5982\u4ea4\u6613\u6d41\u7a0b\u4e2d\u7684\u4e0b\u5355\u3001\u652f\u4ed8\u3001\u53d1\u8d27\u3001\u786e\u8ba4\u6536\u8d27\u4e1a\u52a1\u8fc7\u7a0b\u3002\\n\u7d2f\u79ef\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u901a\u5e38\u5177\u6709\u591a\u4e2a\u65e5\u671f\u5b57\u6bb5\uff0c\u6bcf\u4e2a\u65e5\u671f\u5bf9\u5e94\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u4e1a\u52a1\u8fc7\u7a0b\uff08\u91cc\u7a0b\u7891\uff09\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166153894-25418c7d-1ef2-4000-bdf2-f3fe2ef65ec5.png)\\n\\n\u7d2f\u79ef\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u4e3b\u8981\u7528\u4e8e\u5206\u6790\u4e1a\u52a1\u8fc7\u7a0b\uff08\u91cc\u7a0b\u7891\uff09\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u7b49\u9700\u6c42\u3002\u4f8b\u5982\u524d\u6587\u63d0\u5230\u7684\u7528\u6237\u4e0b\u5355\u5230\u652f\u4ed8\u7684\u5e73\u5747\u65f6\u95f4\u95f4\u9694\uff0c\u4f7f\u7528\u7d2f\u79ef\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u8fdb\u884c\u7edf\u8ba1\uff0c\u5c31\u80fd\u907f\u514d\u4e24\u4e2a\u4e8b\u52a1\u4e8b\u5b9e\u8868\u7684\u5173\u8054\u64cd\u4f5c\uff0c\u4ece\u800c\u53d8\u5f97\u5341\u5206\u7b80\u5355\u9ad8\u6548\u3002\\n\\n#### \u8bbe\u8ba1\u6d41\u7a0b\\n\\n\u7d2f\u79ef\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u7684\u8bbe\u8ba1\u6d41\u7a0b\u540c\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7c7b\u4f3c\uff0c\u4e5f\u53ef\u91c7\u7528\u4ee5\u4e0b\u56db\u4e2a\u6b65\u9aa4\uff0c\u4e0b\u9762\u91cd\u70b9\u63cf\u8ff0\u4e0e\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u4e0d\u540c\u4e4b\u5904\u3002\\n\u9009\u62e9\u4e1a\u52a1\u8fc7\u7a0b\u2192\u58f0\u660e\u7c92\u5ea6\u2192\u786e\u8ba4\u7ef4\u5ea6\u2192\u786e\u8ba4\u4e8b\u5b9e\u3002\\n\\n1\uff09\u9009\u62e9\u4e1a\u52a1\u8fc7\u7a0b\\n\u9009\u62e9\u4e00\u4e2a\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u9700\u8981\u5173\u8054\u5206\u6790\u7684\u591a\u4e2a\u5173\u952e\u4e1a\u52a1\u8fc7\u7a0b\uff0c\u591a\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u5bf9\u5e94\u4e00\u5f20\u7d2f\u79ef\u578b\u5feb\u7167\u4e8b\u5b9e\u8868\u3002\\n\\n2\uff09\u58f0\u660e\u7c92\u5ea6\\n\u7cbe\u786e\u5b9a\u4e49\u6bcf\u884c\u6570\u636e\u8868\u793a\u7684\u662f\u4ec0\u4e48\uff0c\u5c3d\u91cf\u9009\u62e9\u6700\u5c0f\u7c92\u5ea6\u3002\\n\\n3\uff09\u786e\u8ba4\u7ef4\u5ea6\\n\u9009\u62e9\u4e0e\u5404\u4e1a\u52a1\u8fc7\u7a0b\u76f8\u5173\u7684\u7ef4\u5ea6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u5404\u4e1a\u52a1\u8fc7\u7a0b\u5747\u9700\u8981\u4e00\u4e2a\u65e5\u671f\u7ef4\u5ea6\u3002\\n\\n4\uff09\u786e\u8ba4\u4e8b\u5b9e\\n\u9009\u62e9\u5404\u4e1a\u52a1\u8fc7\u7a0b\u7684\u5ea6\u91cf\u503c\u3002\\n\\n## \u7ef4\u5ea6\u5efa\u6a21\u7406\u8bba\u4e4b\u7ef4\u5ea6\u8868\\n\\n\u5728\u7535\u5546\u79bb\u7ebf\u6570\u4ed3\u4e2d\uff0c\u666e\u901a\u7ef4\u5ea6\u8868\u662f\u901a\u8fc7\u4e3b\u7ef4\u8868\u548c\u76f8\u5173\u7ef4\u8868\u505a\u5173\u8054\u67e5\u8be2\u751f\u6210\u7684\u3002\u4e0e\u4e4b\u5bf9\u5e94\u7684\u4e1a\u52a1\u6570\u8868\u6570\u636e\u662f\u901a\u8fc7\u6bcf\u65e5\u4e00\u6b21\u5168\u91cf\u540c\u6b65\u5bfc\u5165\u5230 HDFS \u7684\uff0c\u53ea\u987b\u6bcf\u65e5\u505a\u4e00\u6b21\u5168\u91cf\u6570\u636e\u7684\u5173\u8054\u67e5\u8be2\u5373\u53ef\u3002\u800c\u5b9e\u65f6\u6570\u4ed3\u4e2d\uff0c\u7cfb\u7edf\u4e0a\u7ebf\u540e\u6211\u4eec\u91c7\u96c6\u7684\u662f\u6240\u6709\u8868\u7684\u53d8\u5316\u6570\u636e\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4e00\u65e6\u4e3b\u7ef4\u8868\u6216\u76f8\u5173\u7ef4\u8868\u4e2d\u7684\u67d0\u5f20\u8868\u6570\u636e\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u5c31\u9700\u8981\u548c\u5176\u5b83\u8868\u7684\u5386\u53f2\u6570\u636e\u505a\u5173\u8054\u3002\\n\u6b64\u65f6\u6211\u4eec\u4f1a\u9762\u4e34\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u83b7\u53d6\u5386\u53f2\u6570\u636e\uff1f\\n\\n\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u79cd\u601d\u8def\u662f\u5728\u67d0\u5f20\u4e0e\u7ef4\u5ea6\u8868\u76f8\u5173\u7684\u4e1a\u52a1\u8868\u6570\u636e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6267\u884c\u4e00\u6b21 maxwell-bootstrap \u547d\u4ee4\uff0c\u5c06\u76f8\u5173\u4e1a\u52a1\u8868\u7684\u6570\u636e\u5bfc\u5165 Kafka\u3002\u4f46\u662f\u8fd9\u6837\u505a\u53c8\u4f1a\u9762\u4e34\u4e09\u4e2a\u95ee\u9898\uff1a\\n\\na\uff09Kafka \u4e2d\u5b58\u50a8\u5197\u4f59\u6570\u636e\uff1b\\n\\nb\uff09maxwell-bootstrap \u547d\u4ee4\u4ea4\u7ed9\u8c01\u53bb\u6267\u884c\uff1f\u5fc5\u7136\u4f1a\u9762\u4e34\u8c01\u53bb\u8c03\u5ea6\u7684\u95ee\u9898\uff1b\\n\\nc\uff09\u5b9e\u65f6\u6570\u4ed3\u4e2d\u7684\u6570\u636e\u662f\u4ee5\u6d41\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u5982\u679c\u4e0d\u540c\u6d41\u4e2d\u6570\u636e\u8fdb\u5165\u7a0b\u5e8f\u7684\u673a\u5668\u65f6\u95f4\u5dee\u5f02\u8fc7\u5927\u5c31\u4f1a\u51fa\u73b0 join \u4e0d\u4e0a\u7684\u60c5\u51b5\u3002\\n\\n\u5982\u4f55\u4fdd\u8bc1\u5bfc\u5165\u7684\u5386\u53f2\u6570\u636e\u548c\u53d8\u5316\u6570\u636e\u53ef\u4ee5\u5173\u8054\u4e0a\uff1f\u52bf\u5fc5\u8981\u5c3d\u53ef\u80fd\u53ca\u65f6\u5730\u6267\u884c\u5386\u53f2\u6570\u636e\u5bfc\u5165\u547d\u4ee4\u4e14\u5728 Flink \u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u8db3\u591f\u7684\u5ef6\u8fdf\u3002\u800c\u524d\u8005\u96be\u4ee5\u4fdd\u8bc1\uff0c\u540e\u8005\u53c8\u4f1a\u5f71\u54cd\u6574\u4e2a\u5b9e\u65f6\u6570\u4ed3\u7684\u65f6\u6548\u6027\u3002\\n\u57fa\u4e8e\u4e0a\u8ff0\u5206\u6790\uff0c\u5bf9\u4e1a\u52a1\u8868\u505a join \u5f62\u6210\u7ef4\u5ea6\u8868\u7684\u65b9\u5f0f\u5e76\u4e0d\u9002\u7528\u4e8e\u5b9e\u65f6\u6570\u4ed3\u3002\\n\\n\u56e0\u6b64\uff0c\u5728\u5b9e\u65f6\u6570\u4ed3\u4e2d\uff0c\u6211\u4eec\u4e0d\u518d\u5bf9\u4e1a\u52a1\u6570\u636e\u5e93\u4e2d\u7684\u7ef4\u5ea6\u8868\u8fdb\u884c\u5408\u5e76\uff0c\u4ec5\u5bf9\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\uff0c\u7136\u540e\u5c06\u7ef4\u5ea6\u6570\u636e\u5199\u5165 HBase \u7684\u7ef4\u5ea6\u8868\u4e2d\uff0c\u4e1a\u52a1\u6570\u636e\u5e93\u7684\u7ef4\u5ea6\u8868\u548c HBase \u7684\u7ef4\u5ea6\u8868\u662f\u4e00\u4e00\u5bf9\u5e94\u7684\u3002\\n\u5199\u5165\u7ef4\u5ea6\u6570\u636e\u4f7f\u7528 HBase \u7684 Phoenix \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684 upsert \u8bed\u6cd5\uff0c\u5b9e\u73b0\u5e42\u7b49\u5199\u5165\u3002\u5f53\u7ef4\u5ea6\u6570\u636e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u7528\u53d8\u5316\u540e\u7684\u65b0\u6570\u636e\u8986\u76d6 Phoenix \u7ef4\u8868\u4e2d\u76f8\u540c\u4e3b\u952e\u7684\u65e7\u6570\u636e\u3002\u4ece\u800c\u4fdd\u8bc1 Phoenix \u8868\u4e2d\u4fdd\u5b58\u7684\u662f\u4e00\u4efd\u5168\u91cf\u6700\u65b0\u7684\u7ef4\u5ea6\u6570\u636e\u3002\\n\\n\u8fd9\u6837\u505a\u4f1a\u4ea7\u751f\u4e00\u4e2a\u95ee\u9898\uff1a\u5b9e\u65f6\u6570\u4ed3\u6ca1\u6709\u4fdd\u5b58\u5386\u53f2\u7ef4\u5ea6\u6570\u636e\uff0c\u4e0e\u6570\u4ed3\u7279\u5f81\uff08\u4fdd\u5b58\u5386\u53f2\u6570\u636e\uff09\u76f8\u6096\u3002\u90a3\u4e48\uff0c\u7ef4\u5ea6\u8868\u53ef\u4ee5\u6309\u7167\u4e0a\u8ff0\u601d\u8def\u8bbe\u8ba1\u5417\uff1f\\n\\n\u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u786e\uff1a\u6570\u4ed3\u4e4b\u6240\u4ee5\u8981\u4fdd\u5b58\u5386\u53f2\u6570\u636e\uff0c\u662f\u4e3a\u4e86\u8fd0\u7528\u5386\u53f2\u6570\u636e\u505a\u4e00\u4e9b\u76f8\u5173\u6307\u6807\u7684\u8ba1\u7b97\uff0c\u800c\u5b9e\u65f6\u6570\u4ed3\u672c\u5c31\u662f\u5bf9\u6700\u65b0\u7684\u4e1a\u52a1\u6570\u636e\u505a\u5206\u6790\u8ba1\u7b97\uff0c\u4e0d\u6d89\u53ca\u5386\u53f2\u6570\u636e\uff0c\u56e0\u6b64\u65e0\u987b\u4fdd\u5b58\u5386\u53f2\u6570\u636e\u3002\\n\\n\u6b64\u5916\uff0c\u751f\u4ea7\u73af\u5883\u4e2d\u5b9e\u65f6\u6570\u4ed3\u7684\u4e0a\u7ebf\u901a\u5e38\u4e0d\u4f1a\u65e9\u4e8e\u79bb\u7ebf\u6570\u4ed3\uff0c\u5982\u679c\u6709\u6d89\u53ca\u5230\u5386\u53f2\u6570\u636e\u7684\u6307\u6807\uff0c\u5728\u79bb\u7ebf\u6570\u4ed3\u4e2d\u8ba1\u7b97\u5373\u53ef\u3002\u56e0\u6b64\uff0c\u5b9e\u65f6\u6570\u4ed3\u4e2d\u53ea\u9700\u8981\u4fdd\u7559\u4e00\u4efd\u6700\u65b0\u7684\u7ef4\u5ea6\u6570\u636e\uff0c\u4e0a\u8ff0\u65b9\u6848\u662f\u5207\u5b9e\u53ef\u884c\u7684\u3002\\n\\n\u7279\u522b\u5730\uff0c\u5bf9\u4e8e\u5b57\u5178\u8868\uff0c\u6211\u4eec\u81f3\u591a\u53ea\u4f1a\u7528\u5230 dic_code\uff0cdic_name \u548c parent_code \u4e09\u4e2a\u5b57\u6bb5\uff0c\u5efa\u7acb\u5355\u72ec\u7684\u7ef4\u5ea6\u8868\u610f\u4e49\u4e0d\u5927\uff0c\u9009\u62e9\u5c06\u7ef4\u5ea6\u5b57\u6bb5\u9000\u5316\u5230\u4e8b\u5b9e\u8868\u4e2d\u3002\\n\\n## \u6570\u636e\u4ed3\u5e93\u8bbe\u8ba1\\n\\n### \u6570\u636e\u4ed3\u5e93\u5206\u5c42\u89c4\u5212\\n\\n\u4f18\u79c0\u53ef\u9760\u7684\u6570\u4ed3\u4f53\u7cfb\uff0c\u9700\u8981\u826f\u597d\u7684\u6570\u636e\u5206\u5c42\u7ed3\u6784\u3002\u5408\u7406\u7684\u5206\u5c42\uff0c\u80fd\u591f\u4f7f\u6570\u636e\u4f53\u7cfb\u66f4\u52a0\u6e05\u6670\uff0c\u4f7f\u590d\u6742\u95ee\u9898\u5f97\u4ee5\u7b80\u5316\u3002\u4ee5\u4e0b\u662f\u8be5\u9879\u76ee\u7684\u5206\u5c42\u89c4\u5212\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154067-ad7ffff4-3213-4a06-8c97-50815d18204c.png)\\n\\n### \u6570\u636e\u4ed3\u5e93\u6784\u5efa\u6d41\u7a0b\\n\\n\u4ee5\u4e0b\u662f\u6784\u5efa\u6570\u636e\u4ed3\u5e93\u7684\u5b8c\u6574\u6d41\u7a0b\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154106-daec46b5-4a4b-43ed-896e-80cdd6363d57.png)\\n\\n#### \u6570\u636e\u8c03\u7814\\n\u6570\u636e\u8c03\u7814\u91cd\u70b9\u8981\u505a\u4e24\u9879\u5de5\u4f5c\uff0c\u5206\u522b\u662f\u4e1a\u52a1\u8c03\u7814\u548c\u9700\u6c42\u5206\u6790\u3002\u8fd9\u4e24\u9879\u5de5\u4f5c\u505a\u7684\u662f\u5426\u5145\u5206\uff0c\u76f4\u63a5\u5f71\u54cd\u7740\u6570\u636e\u4ed3\u5e93\u7684\u8d28\u91cf\u3002\\n\\n1\uff09\u4e1a\u52a1\u8c03\u7814\\n\u4e1a\u52a1\u8c03\u7814\u7684\u4e3b\u8981\u76ee\u6807\u662f\u719f\u6089\u4e1a\u52a1\u6d41\u7a0b\u3001\u719f\u6089\u4e1a\u52a1\u6570\u636e\u3002\\n\\n\u719f\u6089\u4e1a\u52a1\u6d41\u7a0b\u8981\u6c42\u505a\u5230\uff0c\u660e\u786e\u6bcf\u4e2a\u4e1a\u52a1\u7684\u5177\u4f53\u6d41\u7a0b\uff0c\u9700\u8981\u5c06\u8be5\u4e1a\u52a1\u6240\u5305\u542b\u7684\u6bcf\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u4e00\u4e00\u5217\u4e3e\u51fa\u6765\u3002\\n\\n\u719f\u6089\u4e1a\u52a1\u6570\u636e\u8981\u6c42\u505a\u5230\uff0c\u5c06\u6570\u636e\uff08\u5305\u62ec\u57cb\u70b9\u65e5\u5fd7\u548c\u4e1a\u52a1\u6570\u636e\u8868\uff09\u4e0e\u4e1a\u52a1\u8fc7\u7a0b\u5bf9\u5e94\u8d77\u6765\uff0c\u660e\u786e\u6bcf\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u4f1a\u5bf9\u54ea\u4e9b\u8868\u7684\u6570\u636e\u4ea7\u751f\u5f71\u54cd\uff0c\u4ee5\u53ca\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\u3002\u4ea7\u751f\u7684\u5f71\u54cd\uff0c\u9700\u8981\u5177\u4f53\u5230\uff0c\u662f\u65b0\u589e\u4e00\u6761\u6570\u636e\uff0c\u8fd8\u662f\u4fee\u6539\u4e00\u6761\u6570\u636e\uff0c\u5e76\u4e14\u9700\u8981\u660e\u786e\u65b0\u589e\u7684\u5185\u5bb9\u6216\u8005\u662f\u4fee\u6539\u7684\u903b\u8f91\u3002\\n\\n\u4e0b\u9762\u4e1a\u52a1\u7535\u5546\u4e2d\u7684\u4ea4\u6613\u4e3a\u4f8b\u8fdb\u884c\u6f14\u793a\uff0c\u4ea4\u6613\u4e1a\u52a1\u6d89\u53ca\u5230\u7684\u4e1a\u52a1\u8fc7\u7a0b\u6709\u4e70\u5bb6\u4e0b\u5355\u3001\u4e70\u5bb6\u652f\u4ed8\u3001\u5356\u5bb6\u53d1\u8d27\uff0c\u4e70\u5bb6\u6536\u8d27\uff0c\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154147-9bde9ec9-9b9d-4a24-a5cc-263a15d68ef6.png)\\n\\n2\uff09\u9700\u6c42\u5206\u6790\\n\u5178\u578b\u7684\u9700\u6c42\u6307\u6807\u5982\uff0c\u6700\u8fd1\u4e00\u5929\u5404\u7701\u4efd\u624b\u673a\u54c1\u7c7b\u8ba2\u5355\u603b\u989d\u3002\\n\\n\u5206\u6790\u9700\u6c42\u65f6\uff0c\u9700\u8981\u660e\u786e\u9700\u6c42\u6240\u9700\u7684\u4e1a\u52a1\u8fc7\u7a0b\u53ca\u7ef4\u5ea6\uff0c\u4f8b\u5982\u8be5\u9700\u6c42\u6240\u9700\u7684\u4e1a\u52a1\u8fc7\u7a0b\u5c31\u662f\u4e70\u5bb6\u4e0b\u5355\uff0c\u6240\u9700\u7684\u7ef4\u5ea6\u6709\u65e5\u671f\uff0c\u7701\u4efd\uff0c\u5546\u54c1\u54c1\u7c7b\u3002\\n\\n3\uff09\u603b\u7ed3\\n\\n\u505a\u5b8c\u4e1a\u52a1\u5206\u6790\u548c\u9700\u6c42\u5206\u6790\u4e4b\u540e\uff0c\u8981\u4fdd\u8bc1\u6bcf\u4e2a\u9700\u6c42\u90fd\u80fd\u627e\u5230\u4e0e\u4e4b\u5bf9\u5e94\u7684\u4e1a\u52a1\u8fc7\u7a0b\u53ca\u7ef4\u5ea6\u3002\u82e5\u73b0\u6709\u6570\u636e\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u5219\u9700\u8981\u548c\u4e1a\u52a1\u65b9\u8fdb\u884c\u6c9f\u901a\uff0c\u4f8b\u5982\u67d0\u4e2a\u9875\u9762\u9700\u8981\u65b0\u589e\u67d0\u4e2a\u884c\u4e3a\u7684\u57cb\u70b9\u3002\\n\\n#### \u660e\u786e\u6570\u636e\u57df\\n\\n\u6570\u636e\u4ed3\u5e93\u6a21\u578b\u8bbe\u8ba1\u9664\u6a2a\u5411\u7684\u5206\u5c42\u5916\uff0c\u901a\u5e38\u4e5f\u9700\u8981\u6839\u636e\u4e1a\u52a1\u60c5\u51b5\u8fdb\u884c\u7eb5\u5411\u5212\u5206\u6570\u636e\u57df\u3002\\n\\n\u5212\u5206\u6570\u636e\u57df\u7684\u610f\u4e49\u662f\u4fbf\u4e8e\u6570\u636e\u7684\u7ba1\u7406\u548c\u5e94\u7528\u3002\\n\\n\u901a\u5e38\u53ef\u4ee5\u6839\u636e\u4e1a\u52a1\u8fc7\u7a0b\u6216\u8005\u90e8\u95e8\u8fdb\u884c\u5212\u5206\uff0c\u672c\u9879\u76ee\u6839\u636e\u4e1a\u52a1\u8fc7\u7a0b\u8fdb\u884c\u5212\u5206\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e00\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u53ea\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u6570\u636e\u57df\u3002\\n\\n\u4e0b\u9762\u662f\u672c\u6570\u4ed3\u9879\u76ee\u6240\u9700\u7684\u6240\u6709\u4e1a\u52a1\u8fc7\u7a0b\u53ca\u6570\u636e\u57df\u5212\u5206\u8be6\u60c5\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154195-f9be05e5-dc11-41f0-893b-f85a5b4b04a2.png)\\n\\n#### \u6784\u5efa\u4e1a\u52a1\u603b\u7ebf\u77e9\u9635\\n\\n\u4e1a\u52a1\u603b\u7ebf\u77e9\u9635\u4e2d\u5305\u542b\u7ef4\u5ea6\u6a21\u578b\u6240\u9700\u7684\u6240\u6709\u4e8b\u5b9e\uff08\u4e1a\u52a1\u8fc7\u7a0b\uff09\u4ee5\u53ca\u7ef4\u5ea6\uff0c\u4ee5\u53ca\u5404\u4e1a\u52a1\u8fc7\u7a0b\u4e0e\u5404\u7ef4\u5ea6\u7684\u5173\u7cfb\u3002\u77e9\u9635\u7684\u884c\u662f\u4e00\u4e2a\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\uff0c\u77e9\u9635\u7684\u5217\u662f\u4e00\u4e2a\u4e2a\u7684\u7ef4\u5ea6\uff0c\u884c\u5217\u7684\u4ea4\u70b9\u8868\u793a\u4e1a\u52a1\u8fc7\u7a0b\u4e0e\u7ef4\u5ea6\u7684\u5173\u7cfb\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154224-b030d3f7-ce3d-4709-9509-788662abd7f5.png)\\n\\n\u4e00\u4e2a\u4e1a\u52a1\u8fc7\u7a0b\u5bf9\u5e94\u7ef4\u5ea6\u6a21\u578b\u4e2d\u4e00\u5f20\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\uff0c\u4e00\u4e2a\u7ef4\u5ea6\u5219\u5bf9\u5e94\u7ef4\u5ea6\u6a21\u578b\u4e2d\u7684\u4e00\u5f20\u7ef4\u5ea6\u8868\u3002\u6240\u4ee5\u6784\u5efa\u4e1a\u52a1\u603b\u7ebf\u77e9\u9635\u7684\u8fc7\u7a0b\u5c31\u662f\u8bbe\u8ba1\u7ef4\u5ea6\u6a21\u578b\u7684\u8fc7\u7a0b\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u603b\u7ebf\u77e9\u9635\u4e2d\u901a\u5e38\u53ea\u5305\u542b\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\uff0c\u53e6\u5916\u4e24\u79cd\u7c7b\u578b\u7684\u4e8b\u5b9e\u8868\u9700\u5355\u72ec\u8bbe\u8ba1\u3002\\n\\n\u6309\u7167\u4e8b\u52a1\u578b\u4e8b\u5b9e\u8868\u7684\u8bbe\u8ba1\u6d41\u7a0b\uff0c\u9009\u62e9\u4e1a\u52a1\u8fc7\u7a0b -> \u58f0\u660e\u7c92\u5ea6 -> \u786e\u8ba4\u7ef4\u5ea6 -> \u786e\u8ba4\u4e8b\u5b9e\uff0c\u5f97\u5230\u7684\u6700\u7ec8\u7684\u4e1a\u52a1\u603b\u7ebf\u77e9\u9635\u89c1\u4ee5\u4e0b\u8868\u683c\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154270-1bb0f57b-b5ff-4052-8539-00ee54a4c9de.png)\\n\\n\u540e\u7eed\u7684DWD\u5c42\u4ee5\u53caDIM\u5c42\u7684\u642d\u5efa\u9700\u53c2\u8003\u4e1a\u52a1\u603b\u7ebf\u77e9\u9635\u3002\\n\\n#### \u660e\u786e\u7edf\u8ba1\u6307\u6807\\n\\n\u660e\u786e\u7edf\u8ba1\u6307\u6807\u5177\u4f53\u7684\u5de5\u4f5c\u662f\uff0c\u6df1\u5165\u5206\u6790\u9700\u6c42\uff0c\u6784\u5efa\u6307\u6807\u4f53\u7cfb\u3002\u6784\u5efa\u6307\u6807\u4f53\u7cfb\u7684\u4e3b\u8981\u610f\u4e49\u5c31\u662f\u6307\u6807\u5b9a\u4e49\u6807\u51c6\u5316\u3002\u6240\u6709\u6307\u6807\u7684\u5b9a\u4e49\uff0c\u90fd\u5fc5\u987b\u9075\u5faa\u540c\u4e00\u5957\u6807\u51c6\uff0c\u8fd9\u6837\u80fd\u6709\u6548\u7684\u907f\u514d\u6307\u6807\u5b9a\u4e49\u5b58\u5728\u6b67\u4e49\uff0c\u6307\u6807\u5b9a\u4e49\u91cd\u590d\u7b49\u95ee\u9898\u3002\\n\\n1\uff09\u6307\u6807\u4f53\u7cfb\u76f8\u5173\u6982\u5ff5\\n\\n\uff081\uff09\u539f\u5b50\u6307\u6807\\n\u539f\u5b50\u6307\u6807\u57fa\u4e8e\u67d0\u4e00\u4e1a\u52a1\u8fc7\u7a0b\u7684\u5ea6\u91cf\u503c\uff0c\u662f\u4e1a\u52a1\u5b9a\u4e49\u4e2d\u4e0d\u53ef\u518d\u62c6\u89e3\u7684\u6307\u6807\uff0c\u539f\u5b50\u6307\u6807\u7684\u6838\u5fc3\u529f\u80fd\u5c31\u662f\u5bf9\u6307\u6807\u7684\u805a\u5408\u903b\u8f91\u8fdb\u884c\u4e86\u5b9a\u4e49\u3002\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0c\u539f\u5b50\u6307\u6807\u5305\u542b\u4e09\u8981\u7d20\uff0c\u5206\u522b\u662f\u4e1a\u52a1\u8fc7\u7a0b\u3001\u5ea6\u91cf\u503c\u548c\u805a\u5408\u903b\u8f91\u3002\\n\\n\u4f8b\u5982\u8ba2\u5355\u603b\u989d\u5c31\u662f\u4e00\u4e2a\u5178\u578b\u7684\u539f\u5b50\u6307\u6807\uff0c\u5176\u4e2d\u7684\u4e1a\u52a1\u8fc7\u7a0b\u4e3a\u7528\u6237\u4e0b\u5355\u3001\u5ea6\u91cf\u503c\u4e3a\u8ba2\u5355\u91d1\u989d\uff0c\u805a\u5408\u903b\u8f91\u4e3asum()\u6c42\u548c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u539f\u5b50\u6307\u6807\u53ea\u662f\u7528\u6765\u8f85\u52a9\u5b9a\u4e49\u6307\u6807\u4e00\u4e2a\u6982\u5ff5\uff0c\u901a\u5e38\u4e0d\u4f1a\u5bf9\u5e94\u6709\u5b9e\u9645\u7edf\u8ba1\u9700\u6c42\u4e0e\u4e4b\u5bf9\u5e94\u3002\\n\\n\uff082\uff09\u6d3e\u751f\u6307\u6807\\n\u6d3e\u751f\u6307\u6807\u57fa\u4e8e\u539f\u5b50\u6307\u6807\uff0c\u5176\u4e0e\u539f\u5b50\u6307\u6807\u7684\u5173\u7cfb\u5982\u4e0b\u56fe\u6240\u793a\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154319-60edb2e6-43f9-4765-a280-9987ecbab8b1.png)\\n\\n\u4e0e\u539f\u5b50\u6307\u6807\u4e0d\u540c\uff0c\u6d3e\u751f\u6307\u6807\u901a\u5e38\u4f1a\u5bf9\u5e94\u5b9e\u9645\u7684\u7edf\u8ba1\u9700\u6c42\u3002\u8bf7\u4ece\u56fe\u4e2d\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f53\u4f1a\u6307\u6807\u5b9a\u4e49\u6807\u51c6\u5316\u7684\u542b\u4e49\u3002\\n\\n\uff083\uff09\u884d\u751f\u6307\u6807\\n\\n\u884d\u751f\u6307\u6807\u662f\u5728\u4e00\u4e2a\u6216\u591a\u4e2a\u6d3e\u751f\u6307\u6807\u7684\u57fa\u7840\u4e0a\uff0c\u901a\u8fc7\u5404\u79cd\u903b\u8f91\u8fd0\u7b97\u590d\u5408\u800c\u6210\u7684\u3002\u4f8b\u5982\u6bd4\u7387\u3001\u6bd4\u4f8b\u7b49\u7c7b\u578b\u7684\u6307\u6807\u3002\u884d\u751f\u6307\u6807\u4e5f\u4f1a\u5bf9\u5e94\u5b9e\u9645\u7684\u7edf\u8ba1\u9700\u6c42\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154343-e131d5b0-4257-4e48-a9c7-257928db5d82.png)\\n\\n2\uff09\u6307\u6807\u4f53\u7cfb\u5bf9\u4e8e\u6570\u4ed3\u5efa\u6a21\u7684\u610f\u4e49\\n\\n\u901a\u8fc7\u4e0a\u8ff0\u4e24\u4e2a\u5177\u4f53\u7684\u6848\u4f8b\u53ef\u4ee5\u770b\u51fa\uff0c\u7edd\u5927\u591a\u6570\u7684\u7edf\u8ba1\u9700\u6c42\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528\u539f\u5b50\u6307\u6807\u3001\u6d3e\u751f\u6307\u6807\u4ee5\u53ca\u884d\u751f\u6307\u6807\u8fd9\u5957\u6807\u51c6\u53bb\u5b9a\u4e49\u3002\u540c\u65f6\u80fd\u591f\u53d1\u73b0\u8fd9\u4e9b\u7edf\u8ba1\u9700\u6c42\u90fd\u76f4\u63a5\u7684\u6216\u95f4\u63a5\u7684\u5bf9\u5e94\u4e00\u4e2a\u6216\u8005\u662f\u591a\u4e2a\u6d3e\u751f\u6307\u6807\u3002\\n\\n\u5f53\u7edf\u8ba1\u9700\u6c42\u8db3\u591f\u591a\u65f6\uff0c\u5fc5\u7136\u4f1a\u51fa\u73b0\u90e8\u5206\u7edf\u8ba1\u9700\u6c42\u5bf9\u5e94\u7684\u6d3e\u751f\u6307\u6807\u76f8\u540c\u7684\u60c5\u51b5\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8003\u8651\u5c06\u8fd9\u4e9b\u516c\u5171\u7684\u6d3e\u751f\u6307\u6807\u4fdd\u5b58\u4e0b\u6765\uff0c\u8fd9\u6837\u505a\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff0c\u63d0\u9ad8\u6570\u636e\u7684\u590d\u7528\u6027\u3002\\n\\n\u8fd9\u4e9b\u516c\u5171\u7684\u6d3e\u751f\u6307\u6807\u7edf\u4e00\u4fdd\u5b58\u5728\u6570\u636e\u4ed3\u5e93\u7684DWS\u5c42\u3002\u56e0\u6b64DWS\u5c42\u8bbe\u8ba1\uff0c\u5c31\u53ef\u4ee5\u53c2\u8003\u6211\u4eec\u6839\u636e\u73b0\u6709\u7684\u7edf\u8ba1\u9700\u6c42\u6574\u7406\u51fa\u7684\u6d3e\u751f\u6307\u6807\u3002\\n\\n\u4ece\u4e0a\u8ff0\u6307\u6807\u4f53\u7cfb\u4e2d\u62bd\u53d6\u51fa\u6765\u7684\u6240\u6709\u6d3e\u751f\u6307\u6807\u89c1\u5982\u4e0b\u8868\u683c\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154478-0a00e798-4fc0-4692-bf54-28d20f39f277.png)\\n\\n![img](https://user-images.githubusercontent.com/34996528/166154433-e3ad4e78-1b9d-4fde-be6c-b60a52e78dda.png)\\n\\n#### \u7ef4\u5ea6\u6a21\u578b\u8bbe\u8ba1\\n\\n\u7ef4\u5ea6\u6a21\u578b\u7684\u8bbe\u8ba1\u53c2\u7167\u4e0a\u8ff0\u5f97\u5230\u7684\u4e1a\u52a1\u603b\u7ebf\u77e9\u9635\u5373\u53ef\u3002\u4e8b\u5b9e\u8868\u5b58\u50a8\u5728DWD\u5c42\uff0c\u7ef4\u5ea6\u8868\u5b58\u50a8\u5728DIM\u5c42\u3002\\n\\n#### \u6c47\u603b\u6a21\u578b\u8bbe\u8ba1\\n\u6c47\u603b\u6a21\u578b\u7684\u8bbe\u8ba1\u53c2\u8003\u4e0a\u8ff0\u6574\u7406\u51fa\u7684\u6307\u6807\u4f53\u7cfb\uff08\u4e3b\u8981\u662f\u6d3e\u751f\u6307\u6807\uff09\u5373\u53ef\u3002\\n\\n\u6c47\u603b\u8868\u4e0e\u6d3e\u751f\u6307\u6807\u7684\u5bf9\u5e94\u5173\u7cfb\u662f\uff0c\u4e00\u5f20\u6c47\u603b\u8868\u901a\u5e38\u5305\u542b\u4e1a\u52a1\u8fc7\u7a0b\u76f8\u540c\u3001\u7edf\u8ba1\u5468\u671f\u76f8\u540c\u3001\u7edf\u8ba1\u7c92\u5ea6\u76f8\u540c\u7684\u591a\u4e2a\u6d3e\u751f\u6307\u6807\u3002\\n\\n\u8bf7\u601d\u8003\uff1a\u6c47\u603b\u8868\u4e0e\u4e8b\u5b9e\u8868\u7684\u5bf9\u5e94\u5173\u7cfb\u662f\uff1f"},{"id":"/\u6570\u4ed3\u67b6\u6784\u4f53\u7cfb","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/\u6570\u4ed3\u67b6\u6784\u4f53\u7cfb","source":"@site/i18n/en/docusaurus-plugin-content-blog/\u6570\u4ed3\u67b6\u6784\u4f53\u7cfb.md","title":"Digital warehouse architecture","description":"\u5206\u5c42\u5b9a\u4e49","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"data warehouse","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-warehouse"}],"readingTime":19.27,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["data warehouse"]},"prevItem":{"title":"Fundamentals of Realtime Digital Warehouse Theory","permalink":"/Bigdata_Blog_Website/en/blog/\u5b9e\u65f6\u6570\u4ed3\u7406\u8bba\u57fa\u7840"},"nextItem":{"title":"Offline digital Warehouse, real-time digital Warehouse and DataLakeHouse","permalink":"/Bigdata_Blog_Website/en/blog/\u79bb\u7ebf\u6570\u4ed3\u3001\u5b9e\u65f6\u6570\u4ed3\u4e0e Data Lakehouse"}},"content":"##  \u5206\u5c42\u5b9a\u4e49\\n\\n###  \u4e3a\u4ec0\u4e48\u8981\u5206\u5c42\uff1f\\n\\n- \u6e05\u6670\u6570\u636e\u7ed3\u6784\\n- \u6570\u636e\u8840\u7f18\u8ffd\u8e2a\\n- \u51cf\u5c11\u91cd\u590d\u5f00\u53d1\\n- \u628a\u590d\u6742\u95ee\u9898\u7b80\u5355\u5316\\n- \u5c4f\u853d\u539f\u59cb\u6570\u636e\u7684\u5f02\u5e38\\n- \u5c4f\u853d\u4e1a\u52a1\u7684\u5f71\u54cd\\n\\n\x3c!--truncate--\x3e\\n###  \u5c42\u7ea7\u5212\u5206\\n\\n#### ODS \u6570\u636e\u6765\u6e90\u5c42\\n\u6570\u636e\u6765\u6e90\u5c42\uff0c\u4e3b\u8981\u5305\u542b\u4e1a\u52a1\u6570\u636e\u5e93\u5feb\u7167\u6570\u636e\uff08db\uff09\u3001\u57cb\u70b9\u6570\u636e(data)\u3001\u5176\u4ed6\u4e1a\u52a1\u7b49\u6570\u636e\u3002\\n\\n####  \u6570\u4ed3\u6a21\u578b\u5c42\uff1a\\n\\nTMP\uff1a\u4e34\u65f6\u5c42\uff0c \u6570\u636e\u5904\u7406\u7684\u8f85\u52a9\u5904\u7406\u5c42\uff0c\u670d\u52a1\u4e8eDW\u3001DM\u5c42\uff0c\u4e3b\u8981\u662f\u4e00\u4e9b\u4e34\u65f6\u5b58\u50a8\u7684\u6570\u636e,\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u9009\u62e9\u521b\u5efa\u4e0e\u4e0d\u521b\u5efa\uff0c\u5305\u62ec\uff1a\u8ba1\u7b97\u4efb\u52a1\u7684\u4e2d\u95f4\u7ed3\u679c\u6570\u636e\u3001RAW\u5c42\u6bcf\u65e5\u589e\u91cf\u6570\u636e\u62bd\u53d6\u4e34\u65f6\u843d\u5730\u7b49\uff0c\u4e00\u822c\u6700\u591a\u4fdd\u5b581-2\u5929\u5373\u53ef\u6e05\u7406\u3002\\n\\nDIM\uff1a\u7ef4\u5ea6\u6570\u636e\u5c42\uff0c\u4e3b\u8981\u5305\u542b\u4e00\u4e9b\u5b57\u5178\u8868\u3001\u7ef4\u5ea6\u6570\u636e\u3002\u5b9e\u4f8b\uff1a\u54c1\u7c7b\u5b57\u5178\u8868\u3001\u57ce\u5e02\u5b57\u5178\u8868\u3001\u6e20\u9053\u5b57\u5178\u8868\u3001\u7ec8\u7aef\u7c7b\u578b\u8868\u3001\u652f\u4ed8\u72b6\u6001\u8868\u3001\u5708\u5b50\u5217\u8868\\n\\nDW\uff1adata warehouse\uff0c\u5b58\u50a8\u7ecf\u8fc7\u6807\u51c6\u89c4\u8303\u5316\u5904\u7406\uff08\u5373\u6570\u636e\u6e05\u6d17\uff09\u540e\u7684\u8fd0\u8425\u6570\u636e\uff0c\u662f\u57fa\u7840\u4e8b\u5b9e\u6570\u636e\u660e\u7ec6\u5c42\u3002\u5b9e\u4f8b\uff1a\u540e\u7aef\u65e5\u5fd7\u660e\u7ec6\u8868\u3001\u524d\u7aef\u57cb\u70b9\u65e5\u5fd7\u660e\u7ec6\u8868\u3001mysql\u5404\u4e1a\u52a1\u6570\u636e\u7ecf\u8fc7ETL\u5904\u7406\u540e\u7684\u8868\u3002\\n\\nDWS\uff1a\u8f7b\u5ea6\u6c47\u603b\u5c42\uff0c\u57fa\u4e8e\u5355\u4e8b\u5b9e\u8868\u8fdb\u884c\u6307\u6807\u8f7b\u5ea6\u52a0\u5de5\u3002\\n\\nDM\uff1adata market(\u4e5f\u53ebDWS\uff1adata warehouse service)\uff0c\u6570\u636e\u4e3b\u9898\u5c42\u6216\u8005\u5bbd\u8868\u5c42\uff0c\u6309\u90e8\u95e8\u6309\u4e13\u9898\u8fdb\u884c\u5212\u5206\uff0c\u652f\u6301OLAP\u5206\u6790\u3001\u6570\u636e\u5206\u53d1\u7b49\uff0c\u5176\u4fe1\u606f\u4e3b\u8981\u6765\u6e90\u4e8eDW \u6216TMP\u5c42\u6c47\u603b\u6570\u636e\u3002\u5b9e\u4f8b\uff1a\u65b0\u6fc0\u6d3b\u7528\u6237\u4e1a\u52a1\u5206\u6790\u8868\u3001\u65e5\u6d3b\u7528\u6237\u4e1a\u52a1\u5206\u6790\u8868\u3001\u5386\u53f2\u6fc0\u6d3b\u7528\u6237\u4e1a\u52a1\u5206\u6790\u8868\u3001\u7528\u6237\u884c\u4e3a\u8f68\u8ff9\u8868\u3001\u7ea2\u5305\u4e1a\u52a1\u8868\u3001\u4ea4\u6613\u54c1\u7c7b\u6765\u6e90\u591a\u7ef4\u8868\u3001\u5546\u4e1a\u5e7f\u544a\u591a\u7ef4\u5206\u6790\u62a5\u8868\\n\\n####  \u5e94\u7528\u6570\u636e\u5c42\\n\\nADS\uff1aapplication database service,\u5e94\u7528\u6570\u636e\u5c42, \u9762\u5411\u5177\u4f53\u5e94\u7528\u7684\u8868\uff0c\u8981\u521b\u5efa\u5728\u8fd9\u5c42\uff0c\u53ef\u5bfc\u5165hbase\u6216mysql\u7b49\u4f7f\u7528\u3002\u5b9e\u4f8b\uff1a\u6309\u5929\u3001\u5c0f\u65f6\u30015\u5206\u949f\u7c92\u5ea6\u8ba1\u7b97\u6c47\u603b\u7684\u7ed3\u679c\u5b58\u5165mysql\u3001hbase\u7684\u62a5\u8868\\n\\n## \u6570\u636e\u6d41\u5411\\n- \u6570\u636e\u5355\u5411\u52a0\u5de5\u4e0d\u53ef\u9006\\n- \u9664\u56fe\u91cc\u6807\u6ce8\u7684\u6d41\u5411\u5916\u6570\u636e\u4e0d\u53ef\u8de8\u5c42\u8c03\u7528\\n\\n![image](https://user-images.githubusercontent.com/34996528/160243905-4ceb72ea-ca09-4807-95c5-4b371c0bccfd.png)\\n\\n## \u6570\u4ed3\u642d\u5efa\u601d\u8def\\n- \u6240\u6709\u6570\u636e\u7684\u8d34\u6e90\u5c42\u8868\u90fd\u5b58\u653e\u5728 \u4e1a\u52a1global \u5373\u53ef\uff0c\u4e1a\u52a1\u7ebf\u4e0d\u9700\u8981\u5355\u72ec\u7ef4\u62a4\u4e1a\u52a1\u7ebf\u81ea\u5df1\u7684\u8d34\u6e90\u5c42\u3002\\n- \u6240\u6709\u6570\u636e\u6e90\u8fdb\u6570\u4ed3\u9996\u8981\u8981\u843d\u5730\u5230ods\u5c42\uff0c\u4e0d\u53ef\u8df3\u8fc7\u8d34\u6e90\u5c42\u5728\u5176\u4ed6\u5c42\u76f4\u63a5\u843d\u5730\u548c\u4f7f\u7528(\u624b\u5de5\u914d\u7f6e\u8868\u9664\u5916) \u3002\\n- \u6240\u6709\u4ece\u6570\u4ed3\u51fa\u53bb\u7684\u8868\u5fc5\u987b\u5728ads\u9996\u5148\u843d\u5730\uff0c\u624d\u80fd\u5bf9\u5916\u8f93\u51fa\u3002\\n- \u5168\u5c40\u57fa\u7840\u6570\u636e\u653e\u5728 global\uff08\u5982\u8ba2\u5355\u3001\u5546\u54c1\u3001\u7528\u6237\u6a21\u578b\u8868\u7b49\uff09\u4e0b\uff0c\u529f\u80fd\u5305\u62ec\uff1a\u5168\u5c40\u6570\u636e\u3001\u6e05\u6d17\u810f\u6570\u636e\u7b49\\n- \u6839\u636e\u5b9e\u9645\u4e1a\u52a1\u60c5\u51b5\uff0c\u4e1a\u52a1\u7ebf\u6570\u636e\u5e93\u91cd\u65b0\u5b9a\u4e49B2C/B2B/C2C/C2B 4\u6761\uff0c\u6570\u636e\u4ed3\u5e93\u7684\u5e93\u5355\u72ec\u7ef4\u62a4\uff0c\u5373 dw_b2c/b2b/c2c/c2b\uff0c\u5176\u4ed6\u4e1a\u52a1\u7ebf\u653e\u5728GLOBAL\u4e0b\u5373\u53ef\uff08\u641c\u7d22\u63a8\u8350\u3001\u5546\u4e1a\u7b49\u6709\u81ea\u4e3b\u642d\u5efa\u6570\u4ed3\u80fd\u529b\u7684\u4ecd\u7136\u662f\u81ea\u5df1\u7ef4\u62a4\uff0c\u6682\u65f6\u4e0d\u505a\u7ba1\u63a7\uff09\\n- \u5168\u5c40/\u4e1a\u52a1\u7ebf\u7684\u6c89\u6dc0\u5927\u5bbd\u8868\u3001\u4e13\u9898\u8868\u3001\u6307\u6807\u8868\u653e\u5728 dm_global/b2c/b2b/c2b/c2c\\n- dm_global\u4e0d\u53ef\u7528\u4e0d\u540c\u4e1a\u52a1\u7ebf\u7684\u6570\u636e\u7684dm\u5c42\uff0c\u9700global\u81ea\u5df1\u52a0\u5de5\uff08\u76ee\u7684\u662f\u4e3a\u4e86\u8ba9\u5168\u5c40\u6709\u4e1a\u52a1\u6c89\u6dc0\uff0c\u6709\u81ea\u4e3b\u6570\u636e\u52a0\u5de5\u80fd\u529b\uff09\\n- \u5206\u6790\u7ed3\u679c\u8868\u653e\u5728 ads_global/b2c/b2b/c2b/c2c\\n- ads_global\u53ef\u7ec4\u5408\u4e0d\u540c\u4e1a\u52a1\u7ebf\u7684\u6570\u636e\u7684dm,ads\u5c42\uff08\u4e3a\u7684\u662f\u5feb\u901f\u54cd\u5e94\u4e1a\u52a1\u9700\u6c42\uff0c\u540c\u65f6\u4e2a\u6027\u5316\u4e1a\u52a1\u9700\u6c42\u6ca1\u5fc5\u8981\u5728\u5168\u5c40\u5c42\u9762\u4fdd\u7559\uff09\\n- \u6ce8\u610f\uff1a\u5bf9\u4e8e\u5df2\u56fa\u5316\u7684\u4e1a\u52a1\uff1a\u5148\u653e\u5728global,\u4e1a\u52a1\u7ebf\u4eceglobal\u83b7\u53d6\u6570\u636e\uff1b\u5bf9\u4e8e\u65b0\u4e1a\u52a1\u6216\u63a2\u7d22\u6027\u4e1a\u52a1\uff1a\u5148\u5728\u4e1a\u52a1\u7ebf\u6570\u4ed3\u6ee1\u8db3\u8bc9\u6c42\u6216\u642d\u5efa\u6a21\u578b\uff0c\u5f85\u4e1a\u52a1\u7a33\u5b9a\u540e\u518d\u5b8c\u5584global\uff09\\n\\n# \u4e1a\u52a1\u677f\u5757\u5212\u5206\\n\\n## \u4e1a\u52a1\u5206\u5168\u5c40\u4e1a\u52a1\u548c\u5404\u4e1a\u52a1\u7ebf\\n\\n- \u5efa\u8bbe\u8981\u6c42 \u4f18\u5148\u5efa\u8bbe\u5168\u5c40\u4e1a\u52a1\u677f\u5757\uff0c\u7279\u6b8a\u573a\u666f\u4e0b\u53ef\u4ee5\u6309\u4e1a\u52a1\u7ebf\u5efa\u8bbe\u5177\u4f53\u7684\u4e1a\u52a1\u7ebf\u677f\u5757\\n\\n- \u547d\u540d\u89c4\u5219\\n\\n\u5168\u5c40\u4e3a global\\n\\n\u5404\u4e1a\u52a1\u7ebf b2b c2c\u7b49\\n\\n\u5177\u4f53\u5982\u4e0b\uff1a\\n\\nodsdb_global  \u4ece\u516c\u53f8\u5404\u4e1a\u52a1mysql\u8868\u4ee5\u53ca\u5176\u4ed6\u6570\u636e\u6e90 \u540c\u6b65\u7684\u5feb\u7167\u4fe1\u606f\uff1b\u4ece\u65e5\u5fd7\u8bfb\u53d6\u7684\u539f\u59cb\u65e5\u5fd7\u6570\u636e\\ndw_global     \u5305\u542b\u516c\u53f8\u5404\u4e1a\u52a1\u7ecf\u8fc7ETL\u540e\u7684\u57fa\u7840\u4e8b\u5b9e\u660e\u7ec6\u8868\u548c\u8f7b\u5ea6\u6c47\u603b\u8868\\ndim_global    \u5305\u542b\u516c\u53f8\u6240\u6709\u7684\u5b57\u5178\u4fe1\u606f\u548c\u7ef4\u5ea6\u8868\\ndm_global   \u9762\u5411\u516c\u53f8\u7684\u4e0d\u540c\u4e3b\u9898\u4e1a\u52a1\u7684\u516c\u5171\u5206\u6790\u6570\u636e\uff08\u65e5\u6d3b\u3001\u4ea4\u6613\u3001\u7528\u6237\u6807\u7b7e\u7b49\uff09\\nads_global\\t\u9762\u5411\u516c\u53f8\u7684\u4e0d\u540c\u4e3b\u9898\u4e1a\u52a1\u7684\u7ed3\u679c\u5206\u6790\u6570\u636e\uff0c\u53ef\u7528\u4e8eBI\u5c55\u793a\u3001\u63a8\u9001\u3001\u5206\u6790\u7b49\u4f7f\u7528\\ntmp_global  \u5305\u542b\u57fa\u4e8e\u516c\u53f8\u5c42\u9762\u5206\u6790\u4ea7\u751f\u7684\u4e00\u4e9b\u4e34\u65f6\u8868\\n\\n\u5404\u4e1a\u52a1\u7ebf\u7c7b\u4f3c\\n\\n## \u603b\u7ebf\u77e9\u9635\u5212\u5206\u89c4\u5219(DW)\\n\\n- \u603b\u7ebf\u77e9\u9635\uff1a\u5728\u4f01\u4e1a\u8303\u56f4\u5185\u5177\u6709\u7edf\u4e00\u89e3\u91ca\u7684\u6807\u51c6\u5316\u7ef4\u5ea6\u4e0e\u4e8b\u5b9e\u7684\u4e00\u6574\u5957\u6570\u636e\u4f53\u7cfb\uff0c\u6240\u6709\u4e1a\u52a1\u521b\u5efa\u7684\u7ef4\u5ea6\u6a21\u578b\u5171\u4eab\u4e00\u7ec4\u5177\u6709\u4e00\u81f4\u6027\u7684\u5171\u7528\u7efc\u5408\u7ef4\u5ea6\u3002\\n- \u4e00\u81f4\u6027\u7ef4\u5ea6\uff1a\u7ef4\u5ea6\u540c\u4e00\uff0c\u5177\u6709\u4e00\u81f4\u7684\u7ef4\u5ea6\u5173\u952e\u5b57\u3001\u4e00\u81f4\u7684\u5c5e\u6027\u5217\u540d\u5b57\u3001\u4e00\u81f4\u7684\u5c5e\u6027\u5b9a\u4e49\u4ee5\u53ca\u4e00\u81f4\u7684\u5c5e\u6027\u503c\u3002\\n- \u6570\u636e\u57df\uff1a\u5c06\u6240\u6709\u7684\u4e1a\u52a1\u8fc7\u7a0b\u8fdb\u884c\u805a\u7c7b\uff0c\u9ad8\u5ea6\u62bd\u8c61\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u5206\u6790\u4e3b\u9898\u3002\u4e3b\u8981\u53c2\u80032\u4e2a\u539f\u52191\u4e2a\u601d\u60f3\u8bbe\u8ba1\uff1a\\n- \u7b2c\u4e00\u539f\u5219\uff1a\u9ad8\u5185\u805a\u4f4e\u8026\u5408\uff0c\u5c06\u6982\u5ff5\u63a5\u8fd1\uff0c\u5173\u8054\u5ea6\u9ad8\u7684\u653e\u5728\u4e00\u7c7b\u3002\\n- \u7b2c\u4e8c\u539f\u5219\uff1a\u4fdd\u8bc1\u62bd\u8c61\u903b\u8f91\u7684\u4e00\u81f4\u6027\uff0c\u5f62\u6210\u6700\u7ec8\u7684\u6570\u636e\u57df\u548c\u76f8\u5173\u4e1a\u52a1\u8fc7\u7a0b\u3002\\n- \u4e00\u4e2a\u601d\u60f3\uff1a\u87ba\u65cb\u9012\u8fdb\uff0c\u6570\u636e\u57df\u7684\u5212\u5206\u6ca1\u6709\u5b8c\u7f8e\u7684\u72b6\u6001\uff0c\u53ea\u6709\u63a5\u8fd1\u5b8c\u7f8e\uff0c\u5728\u5b9e\u8df5\u8fc7\u7a0b\u4e2d\u4ee5\u87ba\u65cb\u9012\u8fdb\u7684\u65b9\u5f0f\u8fed\u4ee3\u4f18\u5316\u3002\\n\u5e38\u89c1\u7684\u62bd\u8c61\u65b9\u6cd5\uff1a\\n- \u6309\u4e1a\u52a1\u6216\u4e1a\u52a1\u8fc7\u7a0b\u5212\u5206\uff1a\u6bd4\u5982\u9500\u552e\u3001\u56de\u6536\u3001\u79df\u8d41\u3002\\n- \u6309\u9700\u6c42\u65b9\u5212\u5206\uff1a\u6bd4\u5982\u9700\u6c42\u65b9\u4e3a\u8d22\u52a1\u90e8\uff0c\u5c31\u53ef\u4ee5\u8bbe\u5b9a\u5bf9\u5e94\u7684\u8d22\u52a1\u4e3b\u9898\u57df\uff0c\u800c\u8d22\u52a1\u4e3b\u9898\u57df\u91cc\u9762\u53ef\u80fd\u5c31\u4f1a\u6709\u5458\u5de5\u5de5\u8d44\u5206\u6790\uff0c\u6295\u8d44\u56de\u62a5\u6bd4\u5206\u6790\u7b49\u4e3b\u9898\uff1b\\n- \u6309\u529f\u80fd\u6216\u5e94\u7528\u5212\u5206\uff1a\u6bd4\u5982\u5c65\u7ea6\u80fd\u529b\u3001\u8425\u9500\u6d3b\u52a8\u7b49\\n- \u6309\u90e8\u95e8\u5212\u5206\uff1a\u6bd4\u5982\u5546\u4e1a\u5e7f\u544a\u3001\u98ce\u63a7\\n\\n\u4e00\u81f4\u6027\u7ef4\u5ea6 \uff1a \u65e5\u671f \u5e73\u53f0 \u7ec8\u7aef \u7ec8\u7aef\u7248\u672c\u53f7 \u6e20\u9053 \u4e1a\u52a1\u7ebf \u54c1\u7c7b \u54c1\u724c \u578b\u53f7 \u57ce\u5e02 \u8bbe\u5907id \u7528\u6237id \u5546\u54c1id \u9500\u552eid \u7b49\\n\\n\u6570\u636e\u57df(\u4e00\u7ea7\u5b50\u57df\uff08\u4e8c\u7ea7\u5b50\u57df\uff09) \uff1a \\n\\n\u4ea4\u6613 (\u4ea4\u6613( \u7ebf\u4e0a\uff0c\u7ebf\u4e0b )) \\n\u5c65\u7ea6 (\u5ba2\u670d( \u4f1a\u8bdd\uff0c\u5916\u547c\uff0c\u76f4\u64ad ))\\n\u5546\u54c1 (\u4f9b\u7ed9( \u7ebf\u4e0b))\\n\u8425\u9500 (\u79c1\u57df\uff0c\u65b0\u5a92\u4f53\uff0c\u7ea2\u5305)\\n\\n\u4e1a\u52a1\u8fc7\u7a0b\u4e3e\u4f8b \\n\\n\u5ba2\u670d --- \u4f1a\u8bdd ---- \u7528\u6237\u8fdb\u7ebf\uff0c\u673a\u5668\u4eba\u63a5\u5f85\uff0c\u7528\u6237\u8f6c\u4eba\u5de5\uff0c\u7528\u6237\u8bc4\u4ef7\uff0c\u5ba2\u670d\u521b\u5efa\u5de5\u5355\uff0c\u5904\u7406\u5de5\u5355\\n\\n\\n## \u6570\u636e\u4e3b\u9898\u57df\u5212\u5206\u89c4\u5219(DM)\\n\\nDM\u5c42\u7528\u4e8e\u5efa\u8bbe\u8de8\u4e3b\u9898\u5bbd\u8868\u3001\u8de8\u4e3b\u9898\u6c47\u603b\u8868\u3001\u9879\u76ee\u6216\u4e13\u9898\u7ea7\u57fa\u7840\u8868\\n\\nDM\u6570\u636e\u4e3b\u9898\u57df\u662f\u6839\u636e\u4e1a\u52a1\u770b\u6570\u636e\u7684\u65b9\u5f0f\u5236\u5b9a\uff0c\u5982\u9700\u65b0\u589e\u8054\u7cfb\u5bf9\u5e94\u8d1f\u8d23\u4eba\\n\\n\u4e00\u7ea7\u4e3b\u9898\\n\\nchannel \u6e20\u9053  \\tfinance\\t\u8d22\u52a1  price\\t\u4ef7\u683c\u7cfb\u7edf  user\\t\u7528\u6237  scm\\t\u4f9b\u5e94\u94fe  recommend\\t\u641c\u7d22\u63a8\u8350  \\tafs\\t\u552e\u540e  \\tspam\\t\u98ce\u63a7\\n\\n\\n## \u5e94\u7528\u4e3b\u9898\u57df\u5212\u5206\u89c4\u5219(ADS)\\n\\nADS\u5c42\u662f\u5e94\u7528\u5c42\uff0c\u57fa\u4e8e\u5e94\u7528\u5c42\u7684\u591a\u6837\u5316\uff0c\u6b64\u5904\u5236\u5b9aADS\u5c42\u7684\u5e94\u7528\u4e3b\u9898\u547d\u540d\u89c4\u8303\uff0c\u4fbf\u4e8e\u5feb\u901f\u8bc6\u522b\u6570\u636e\u7684\u4f7f\u7528\u5f62\u5f0f\u3002\\n\\nbi\\t\u5206\u6790\u62a5\u8868\u4f7f\u7528  ads_bi_ei_type_pur_online_sum_inc_1d  \u201cbi\u201d\u5360\u636e\u7b2c\u4e8c\u4f4d\uff0c\u5982\u6709\u6570\u636e\u57df\uff0c\u6570\u636e\u57df\u653e\u5728\u7b2c\u4e09\u4f4d\\n\\nana\\t\u5206\u6790\u5e08\u81ea\u4e3b\u5206\u6790\u4e13\u7528\\n\\napp\\t\\napp\u5ba2\u6237\u7aef\u63a8\u9001\u4f7f\u7528\uff0c\u5176\u4ed6\u4e1a\u52a1\u90e8\u95e8\u6570\u636e\u5e93\u63a8\u9001\u4f7f\u7528\u3002\\n\\n# \u5f00\u53d1\u6d41\u7a0b\u89c4\u8303\\n\\n\u5f00\u53d1\u6d41\u7a0b\u9700\u9075\u5faa \u5f00\u53d1\u6d41\u7a0b\u89c4\u8303\uff0c\u65b0\u5efa\u8868\u89c4\u8303\uff0c\u8868\u6743\u9650\u89c4\u8303\uff0c\u811a\u672c\u89c4\u8303\uff0c\u8c03\u5ea6\u89c4\u8303\uff0c\u76d1\u63a7\u89c4\u8303\uff0c\u62a5\u8868\u4e0b\u7ebf\u89c4\u8303\uff0c\u751f\u547d\u5468\u671f\u7ba1\u7406\u89c4\u8303\\n\\n\u603b\u4f53\u6d41\u7a0b\u4e3a\\n\\n\u4e1a\u52a1\u8c03\u7814 -> \u6a21\u578b\u8bbe\u8ba1 -> \u6a21\u578b\u8bc4\u5ba1 -> \u6a21\u578b\u5f00\u53d1 -> \u6a21\u578b\u81ea\u6d4b -> \u4e0a\u7ebf\u5ba1\u6838\\n\\n\\n\u4e1a\u52a1\u8c03\u7814\uff1a \u4e1a\u52a1\u8c03\u7814\u91cd\u70b9\u5728\u4e8e\u641e\u6e05\u695a\u6d89\u53ca\u5230\u7684\u4e1a\u52a1\u677f\u5757\u3001\u6570\u636e\u57df\u3001\u4e1a\u52a1\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u68b3\u7406\u9700\u8981\u770b\u6570\u636e\u7684\u7ef4\u5ea6\u548c\u91cd\u70b9\u5173\u6ce8\u7684\u6307\u6807\u3002\u4e3a\u540e\u7eed\u6a21\u578b\u8bbe\u8ba1\u63d0\u4f9b\u53c2\u8003\u3002\u53ef\u914c\u60c5\u4ea7\u51famrd\u6587\u6863\u3001prd\u6587\u6863\uff0c\u6682\u4e0d\u505a\u5f3a\u5236\u8981\u6c42\u3002\\n\\n\u6a21\u578b\u8bbe\u8ba1\uff1a \u6a21\u578b\u8bbe\u8ba1\u5e94\u9075\u5faa\u6570\u4ed3\u67b6\u6784\u4f53\u7cfb\u4e2d\u5bf9\u6570\u636e\u52a0\u5de5\u6d41\u5411\uff0c\u7ed3\u5408\u4e1a\u52a1\u8c03\u7814\u7684\u7ed3\u679c\u548c\u603b\u7ebf\u77e9\u9635\u7684\u89c4\u5212\uff0c\u4f18\u5148\u8fdb\u884cDW\u5c42\u7684\u4e8b\u5b9e\u8868\u548cDIM\u7ef4\u8868\u8bbe\u8ba1\uff0c\u5176\u6b21\u8fdb\u884cDM\u5c42\u6a21\u578b\u8bbe\u8ba1\u3002\\n\\n![image](https://user-images.githubusercontent.com/34996528/160246308-4f0422f7-b80d-488a-b7ea-8d5ad86dbcb1.png)\\n\\n\\n\u6a21\u578b\u8bc4\u5ba1\uff1a\\n\u91cd\u70b9\u5bf9\u89c4\u8303\u6267\u884c\u60c5\u51b5\u3001\u662f\u5426\u91cd\u590d\u5efa\u8bbe\u3001\u8bbe\u8ba1\u662f\u5426\u5168\u9762\u5bcc\u6709\u524d\u77bb\u6027\u3001\u7ef4\u5ea6\u8bbe\u8ba1\u662f\u5426\u5408\u7406\u8fdb\u884c\u8bc4\u5ba1\uff0c\u662f\u6a21\u578b\u5f00\u53d1\u524d\u7684\u7b2c\u4e00\u9053\u628a\u63a7\u3002\\n\\n![image](https://user-images.githubusercontent.com/34996528/160246346-0c8dd841-863b-4bb8-b2ae-7efdc9aa53c4.png)\\n\\n\u6a21\u578b\u5f00\u53d1\uff1a\\n\u6a21\u578b\u5f00\u53d1\u5e94\u9075\u5faa\u5efa\u8868\u89c4\u8303\u3001\u8868\u6743\u9650\u89c4\u8303\u3001\u811a\u672c\u89c4\u8303\u3001\u8c03\u5ea6\u89c4\u8303\u3001\u76d1\u63a7\u89c4\u8303\u3001\u62a5\u8868\u4e0b\u7ebf\u89c4\u8303\u3001\u751f\u547d\u5468\u671f\u7ba1\u7406\u89c4\u8303\u7b49\u89c4\u8303\u3002\\n\\n![image](https://user-images.githubusercontent.com/34996528/160246371-c4f27e8e-4c9f-4637-880a-f9691d899854.png)\\n\\n\u6a21\u578b\u81ea\u6d4b\uff1a\\n\u6a21\u578b\u81ea\u6d4b\u662f\u4e0a\u7ebf\u524d\u5bf9\u6a21\u578b\u7684\u6570\u636e\u8d28\u91cf\u3001\u7c92\u5ea6\u7b49\u8fdb\u884c\u68c0\u9a8c\uff0c\u662f\u5fc5\u987b\u6267\u884c\u7684\u4e00\u4e2a\u73af\u8282\uff0c\u81ea\u6d4b\u6587\u6863\u6682\u4e0d\u505a\u5f3a\u5236\u8981\u6c42\uff0c\u4e8c\u671f\u518d\u8865\u5145\u5b8c\u5584\u3002\\n\\n![image](https://user-images.githubusercontent.com/34996528/160246401-7fa25ad5-3a5c-420f-a0ab-0526b98e74e0.png)\\n\\n\\n\u6a21\u578b\u4e0a\u7ebf\uff1a\\n\u6a21\u578b\u4e0a\u7ebf\u9700\u8981\u5728\u6570\u4ed3\u5730\u56fe\u8fdb\u884c\u6ce8\u518c\uff0c\u6ce8\u518c\u9700\u7ef4\u62a4\u6a21\u578b\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5982\u6240\u5c5e\u4e1a\u52a1\u677f\u5757\u3001\u6570\u636e\u57df\u3001\u4e1a\u52a1\u8fc7\u7a0b\u3001\u7c92\u5ea6\u3001\u4e8b\u5b9e\u5c5e\u6027\u3001\u7ef4\u5ea6\u3001\u5ea6\u91cf\u3001\u4f7f\u7528\u8bf4\u660e\u7b49\u7b49\u3002\u6570\u4ed3\u5730\u56fe\u4f5c\u4e3a\u6a21\u578b\u5bf9\u5916\u7684\u51fa\u53e3\uff0c\u89e3\u51b3\u627e\u8868\u96be\u95ee\u9898\u7684\u540c\u65f6\uff0c\u6ce8\u518c\u5ba1\u6838\u901a\u8fc7\u65b9\u80fd\u4e0a\u7ebf\u7684\u673a\u5236\uff0c\u4e5f\u662f\u6570\u4ed3\u89c4\u8303\u843d\u5730\u60c5\u51b5\u7684\u6700\u540e\u4e00\u9053\u5c4f\u969c\u3002\\n\\n\u8be6\u7ec6\u6a21\u578b\u6ce8\u518c\u89c4\u8303\u53ef\u67e5\u770b \u6570\u4ed3\u5730\u56fe\u6a21\u578b\u6ce8\u518c\u89c4\u8303\u3002\\n\\n![image](https://user-images.githubusercontent.com/34996528/160246438-717448bf-6b7f-4859-81e9-0b2e98c6e342.png)\\n\\n\\n## \u8bbe\u8ba1\u6587\u6863\u6a21\u677f\\n\\n### DW\u4e8b\u5b9e\u8868\u793a\u4f8b\u8bf4\u660e\\n\\n\u6a21\u578b\u8868 \\n\u8868\u4e2d\u6587\u540d\\n\u4e1a\u52a1\u677f\u5757\\n\u6570\u636e\u57df\\n\u4e1a\u52a1\u8fc7\u7a0b\\n\u6a21\u578b\u8868\u6ce8\u91ca\\n\u8868\u4e3b\u952e/\u7c92\u5ea6\\n\u751f\u547d\u5468\u671f\\n\u4f7f\u7528\u8bf4\u660e\\n\u8dd1\u6570\u65b9\u5f0f\\n\u4e3b\u8981\u6765\u6e90\u8868    \u8868\u540d   \u522b\u540d   \u5173\u8054\u6761\u4ef6 \u5907\u6ce8\\n\\n\\n\\n- \u6bcf\u4e2a\u5b57\u6bb5\u8bf4\u660e\u5982\u4e0b\uff1a\\n\\n\u5e8f\u53f7\\t\u5206\u7c7b\\t\u76ee\u6807\u5b57\u6bb5\\t\u5b57\u6bb5\u7c7b\u578b\\t\u5b57\u6bb5\u6ce8\u91ca\\t\u6570\u636e\u903b\u8f91\\n\\n### DW\u7ef4\u5ea6\u8868\u793a\u4f8b\u8bf4\u660e\u5982\u4e0a\\n\\n### DM\u96c6\u5e02\u8868\u540c\u4e0a\\n\\n## \u65b0\u5efa\u8868\u89c4\u8303\\n\\n\\n\u6bcf\u5c42\u662f\u4e00\u4e2a\u5355\u72ec\u5e93\\n\\n### \u5206\u5c42\u5e93\u5e93\u540d\uff1axxxx\\n\\n### \u5404\u5c42\u5b58\u50a8\u5f62\u5f0f\uff1a\\n\\n\u6570\u4ed3\u5c42\u7ea7\\t\u8868\u7c7b\u578b\\t\u5b58\u50a8\u683c\u5f0f\\nods\\t\u9ed8\u8ba4\uff08\u7ba1\u7406\u8868\uff09\\t\u9ed8\u8ba4\uff08TEXTFILE\uff09\\ndim\\t\u5916\u90e8\u8868\\tPARQUET\\ndw\\t\u5916\u90e8\u8868\\tPARQUET\\ndm\\t\u5916\u90e8\u8868\\tPARQUET\\ntmp\\t\u9ed8\u8ba4\uff08\u7ba1\u7406\u8868\uff09\\t\u9ed8\u8ba4\uff08TEXTFILE\uff09\\nads\\t\u9ed8\u8ba4\uff08\u7ba1\u7406\u8868\uff09\\t\u9ed8\u8ba4\uff08TEXTFILE\uff09\\n\\n\\n### \u8d34\u6e90\u5c42\u8868\u547d\u540d\u89c4\u8303\\n\\n1 \u6570\u636e\u6e90\u662fmysql\uff0c\u4f7f\u7528sqoop\u79bb\u7ebf\u62bd\u6570\u7684\uff1a\\n\\n\u8868\u547d\u540d\u89c4\u5219\uff1aods_mysql_{\u6e90\u6570\u636e\u5e93\u540d}_{\u6e90\u6570\u636e\u5e93\u8868\u540d}_{\u589e\u5168\u91cf}_{\u8c03\u5ea6\u9891\u7387} \u3002\u547d\u540d\u5206\u4e3a\u56db\u90e8\u5206\uff1a\\n\\n\u7b2c\u4e00\u90e8\u5206\u4e3a\u6570\u636e\u4ed3\u5e93\u5206\u5c42\u7684\u533a\u5206\uff0c\u6570\u636e\u51c6\u5907\u533a\u547d\u540d\u4e3araw\uff1b\\n\\n\u7b2c\u4e8c\u90e8\u5206\u4e3a\u6570\u636e\u6e90\u7c7b\u578b\uff1b\\n\\n\u7b2c\u4e09\u90e8\u5206{\u6e90\u6570\u636e\u5e93\u540d}\u4e3a\u6e90\u6570\u636e\u5e93\u540d\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u6570\u636e\u51c6\u5907\u533a\u5e93\u7684\u76f8\u5bf9\u7a33\u5b9a\uff0c\u5efa\u7acb\u4e0e\u6e90\u5e93\u5e93\u540d\u5bf9\u5e94\u5173\u7cfb\u3002\u6b64\u9879\u907f\u514d\u4e0d\u540c\u6e90\u6570\u636e\u5e93\u5b58\u5728\u76f8\u540c\u8868\u540d\u60c5\u51b5\\n\\n\u7b2c\u56db\u90e8\u5206{\u6e90\u6570\u636e\u5e93\u8868\u540d}\u4e3a\u6e90\u6570\u636e\u5e93\u8868\u540d\uff0c\u6240\u6709\u8868\u8868\u540d\u4e0e\u6e90\u8868\u8868\u540d\u4fdd\u6301\u4e00\u81f4\\n\\n\u7b2c\u4e94\u90e8\u5206\u5bf9\u5e94\u8868\u540d\u540e\u7f00\u89c4\u5219\uff0c\u89c1 \u5efa\u8868\u89c4\u8303\u3002\\n\\n\u6bd4\u5982panda\u5e93pdi_product\u8868\u5bf9\u5e94ods\u5e93\u547d\u540d\u4e3a\uff1aods_mysql_panda_pdi_product_full_1d \u3002\\n\\n\\n\\n2 \u6570\u636e\u6e90\u662fmysql\uff0c\u4f7f\u7528\u5b9e\u65f6\u5e73\u53f0\u62bd\u53d6\u7684\uff1a\\n\\nhdfs\u5143\u6570\u636e\u5168\u90e8\u5b58\u653e\u5728 odsdb_global.ods_cdc_binlog_ori_inc_1h \uff0c\u9700\u8981\u4ece\u8be5\u8868\u62bd\u53d6\u89e3\u6790\u51fa\u5355\u8868\u7684\u5c0f\u65f6\u5206\u533a\u6570\u636e\uff0c\u5982\u9700\u8981\uff0c\u518d\u6b21\u52a0\u5de5\u4e3a\u5168\u91cf\u8868\u3002\\n\\n\u8868\u547d\u540d\u89c4\u5219\uff1araw_mysql_{\u6e90\u6570\u636e\u5e93\u540d}_{\u6e90\u6570\u636e\u5e93\u8868\u540d}_{\u589e\u5168\u91cf}_{\u8c03\u5ea6\u9891\u7387} \u3002\\n\\n\u6bd4\u5982 odsdb_global.ods_cdc_binlog_ori_inc_1h \u2192 ods_mysql_panda_pdi_product_inc_1h (dt=\'yyyy-MM-dd\')(\u5f53\u5929\u6570\u636e\u505amerge)\u2192 ods_mysql_panda_pdi_product_full_1h  (dt=\'yyyy-MM-dd\')(\u5f53\u5929\u6570\u636e\u548c\u5386\u53f2\u6240\u6709\u6570\u636e\u505amerge)\u3002\\n\\n\\n\\n3 \u6570\u636e\u6e90\u662fTidb\u5e93\uff1a\\n\\n\u8868\u547d\u540d\u89c4\u5219\uff1aods_tidb_{\u6e90\u6570\u636e\u5e93\u540d}_{\u6e90\u6570\u636e\u5e93\u8868\u540d}_{\u589e\u5168\u91cf}_{\u8c03\u5ea6\u9891\u7387} \u3002\\n\\n\u6bd4\u5982: ods_tidb_tdb_zzinfoarchived_t_info_ext_archived_full_1d \u3002\\n\\n\\n\\n4 \u6570\u636e\u6e90\u662f\u65e5\u5fd7\uff1a\\n\\n\u8868\u547d\u540d\u89c4\u5219\uff1aods_log_\u65e5\u5fd7\u5e73\u53f0\u6216\u6765\u6e90_{\u81ea\u5b9a\u4e49\u8868\u540d}_{\u589e\u5168\u91cf}_{\u8c03\u5ea6\u9891\u7387} \u3002\\n\\n\u6bd4\u5982 ods_log_sensors_bury_cold_inc_1d \u3002\\n\\n\\n\\n5 \u6570\u636e\u6e90\u662fes/mongo/redis/hbase/mq\uff1a\\n\\n\u8868\u547d\u540d\u89c4\u5219\uff1aods_es/mongo/redis/hbase/mq_{\u81ea\u5b9a\u4e49\u8868\u540d}_{\u589e\u5168\u91cf}_{\u8c03\u5ea6\u9891\u7387} \u3002\\n\\n\u6bd4\u5982 ods_es_pdi_product_full_1d \u3002\\n\\n\\n\\n6 \u6570\u636e\u6e90\u662f\u5916\u90e8\u7684\uff08\u5982excel\uff09\uff1a\\n\\n\u8868\u547d\u540d\u89c4\u5219\uff1aods_outside_{\u81ea\u5b9a\u4e49\u8868\u540d}_{\u589e\u5168\u91cf}_{\u8c03\u5ea6\u9891\u7387} \u3002\\n\\n\u6bd4\u5982 ods_outside_pdi_product_full_1d \u3002\\n\\n\\n\\n4 \u6570\u4ed3\u8868\u547d\u540d\u89c4\u8303\uff1a\\n\\n1 \u5206\u5c42\u57df\u547d\u540d\u89c4\u8303\uff1a\\n\\ndw_global/b2c/b2b/c2b/c2c . dw|dws_{\u4e00\u7ea7\u6570\u636e\u57df}_{\u4e8c\u7ea7\u6570\u636e\u57df}_{\u4e1a\u52a1\u8fc7\u7a0b}_XXXXX_{\u589e\u5168\u91cf}_{\u8dd1\u6570\u9891\u7387}   \\n\\ndim_global/b2c/b2b/c2b/c2c . dim_({\u4e00\u7ea7\u6570\u636e\u57df}_{\u4e8c\u7ea7\u6570\u636e\u57df})_XXXXX_{\u589e\u5168\u91cf}_{\u8dd1\u6570\u9891\u7387}\\n\\ndm_global/b2c/b2b/c2b/c2c . dm_{\u6570\u636e\u4e3b\u9898\u57df}_XXXXX_{\u589e\u5168\u91cf}_{\u8dd1\u6570\u9891\u7387}\\n\\nads_global/b2c/b2b/c2b/c2c/afs/media/core. ads_{\u5e94\u7528\u4e3b\u9898\u57df}_XXXXX_{\u589e\u5168\u91cf}_{\u8dd1\u6570\u9891\u7387}\\n\\ntmp_global/b2c/b2b/c2b/c2c . tmp_\u76ee\u6807\u8868\u540d_oa\u8d26\u53f7_[01...99]_yyyyMMdd\\n\\n           \u4e34\u65f6\u8868\u4f7f\u7528\uff1a\u6309\u60c5\u51b5\u7075\u6d3b\u8003\u8651\uff0c\u5efa\u8bae\u4f18\u5148\u4f7f\u7528with as\u8bed\u6cd5\uff08\u5982\u679c\u7ed3\u679c\u4e0d\u5360\u7528\u592a\u5927\u5185\u5b58\u60c5\u51b5\u4e0b\uff09\u4ee3\u66ff\u4e34\u65f6\u8868\\n           \u4e34\u65f6\u8868\u6e05\u7406\uff1a\u4efb\u52a1\u4e2d\u9ed8\u8ba4\u6e05\u74062\u5929\u524d\u521b\u5efa\u4e34\u65f6\u8868\\n           \u4e34\u65f6\u8868\u6ce8\u610f\u70b9\uff1a\u4efb\u52a1\u4e2d\u4f7f\u7528\u4e34\u65f6\u8868\u5982\u679c\u6ca1\u6709\u6e05\u7406\u673a\u5236\uff0c\u53d1\u73b0\u4e00\u6b21\uff0c\u503c\u73ed\u4e00\u6b21\\n\\n\\n\\n***\u4e1a\u52a1\u4e3b\u9898\u57df \u4e1a\u52a1\u4e3b\u9898\u57df\u5212\u5206\u89c4\u5219(DW)\u2019\\n\\n***\u6570\u636e\u4e3b\u9898\u57df  \u6570\u636e\u4e3b\u9898\u57df\u5212\u5206\u89c4\u5219(DM)\u2019\\n\\n***\u5e94\u7528\u4e3b\u9898\u57df  \u5e94\u7528\u4e3b\u9898\u57df\u5212\u5206\u89c4\u5219(ADS)\u2019\\n\\n\\n\\n2 \u589e\u5168\u91cf\u66f4\u65b0\u65b9\u5f0f\u547d\u540d\u89c4\u8303\uff1a\\n\\n\u589e\u91cf\uff1ainc\\n\u5168\u91cf\uff1afull\\n\u2026\u2026\\n3 \u5206\u533a\u8868\u8c03\u5ea6\u9891\u7387\u547d\u540d\u89c4\u8303\uff1a\\n\\n\u79d2\u3001\u5206\u949f\uff1a1s\\n\u5c0f\u65f6(hour)\uff1a1h\\n\u5929(day)\uff1a1d\\n\u5468(week)\uff1a1w\\n\u6708(month)\uff1a1m\\n\u5b63\u5ea6(quarter)\uff1a1q\\n\u5e74(year)\uff1a1y\\n ......\\n\u6ce8\u610f\uff1a\u5355\u5f20\u8868\u7684\u5206\u533a\u6bcf\u65e5\u65b0\u589e\u4e0d\u5b9c\u8d85\u8fc7200\u4e2a\uff0c\u5206\u533a\u592a\u591a\u5bfc\u81f4\u6587\u4ef6\u5206\u5e03\u592a\u7ec6\uff0c\u5bf9\u96c6\u7fa4namenode\u538b\u529b\u8fc7\u5927\\n\\n4 \u975e\u5206\u533a\u8868\u8868\u540d\u65f6\u95f4\u7c92\u5ea6\u540e\u9762\u52a0\uff1a\u7edf\u4e00\u4e3a\u201d_0p\u201d\\n\\n\u793a\u4f8b\\n\\n\u5206\u533a\u8868\\n\\n\u589e\u91cf&\u5c0f\u65f6 \u66f4\u65b0\\txxx_inc_1h\\tdt=yyyy-MM-dd-HH\\n\\n\u5168\u91cf&\u5c0f\u65f6 \u66f4\u65b0\\txxx_full_1h\\t dt=yyyy-MM-dd\\n\\n\\n\u589e\u91cf&\u5929 \u66f4\u65b0\\txxx_inc_1d\\tdt=yyyy-MM-dd\\n\\n\u5168\u91cf&\u5929 \u66f4\u65b0\\txxx_full_1d\\tdt=yyyy-MM-dd\\n\\n\u589e\u91cf&\u5468 \u66f4\u65b0\\txxx_inc_1w\\tdt=yyyy-MM-dd\\n\\n\u5168\u91cf&\u5468 \u66f4\u65b0\\txxx_full_1w\\tdt=yyyy-MM-dd\\n\\n5 \u5206\u533a\u5b57\u6bb5\\n\\nods \u3001dw\u3001dm\u3001dim\u3001ads \u53ef\u89c6\u60c5\u51b5\u5efa\u5206\u533a\u8868\uff0c\u5206\u533a\u5b57\u6bb5\u7edf\u4e00\u4e3adt  \u3002\\n\\nods \u53ef\u89c6\u60c5\u51b5\u5efa\u5206\u533a\u8868\uff0c\u975e\u5206\u533a\u8868\u65e0\u9700\u4fdd\u7559dt\u5b57\u6bb5\u3002\\n\\ndim\u4e0d\u5efa\u8bae\u4f7f\u7528\u5206\u533a\u8868\uff0c\u4fdd\u7559\u4e00\u4efd\u6700\u65b0\u6570\u636e\u5373\u53ef\u3002\\n\\ndw\u3001dm\u5efa\u8bae\u4f7f\u7528\u5206\u533a\u8868\uff0c\u4e0d\u662f\u5206\u533a\u8868\u7684\uff0c\u8868\u4e2d\u4ecd\u7136\u9700\u8981\u4fdd\u7559dt\u5b57\u6bb5\uff0c\u4f5c\u7528\u548c\u5206\u533a\u5b57\u6bb5dt\u540c\u7406\uff0c\u683c\u5f0f\u4e5f\u540cdt\u3002\\n\\nads \u662f\u5426\u4f7f\u7528\u5206\u533a\u8868\u53d6\u51b3\u4e8e\u6bcf\u5929\u7684\u8ba1\u7b97\u7ed3\u679c\u91cf\uff0c \u6bcf\u5929\u8dd1\u6279\u8ba1\u7b97\u7ed3\u679c\u6570\u636e\u91cf\u5343\u6761\u4ee5\u5185\u7684\uff0cads\u4e0d\u4f7f\u7528\u5206\u533a\uff0c\u5176\u4ed6\u53ef\u8003\u8651\u5206\u533a\u3002\\n\\nads \u4e0d\u7ba1\u662f\u4e0d\u662f\u5206\u533a \u90fd\u9700\u8981\u52a0 stat_date \uff0c\u4f5c\u7528\u548c\u5206\u533a\u5b57\u6bb5dt\u540c\u7406\uff0c\u683c\u5f0f\u4e5f\u540cdt\u3002\uff08\u4e3b\u8981\u662f\u4e3a\u4e86\u548c\u56de\u5bfcmysql\u89c4\u8303\u4e00\u81f4\uff09\\n\\n\u5efa\u8868\u8bed\u53e5\u793a\u4f8b\uff1a\\n\\npartitioned by (dt string comment \'\u65f6\u95f4\u5206\u533a\u5b57\u6bb5\uff0c\u5f62\u5f0fyyyy-MM-dd\')\\n\\npartitioned by (dt string comment \'\u65f6\u95f4\u5206\u533a\u5b57\u6bb5\uff0c\u5f62\u5f0fyyyy-MM-dd-HH\')\\n\\npartitioned by (dt string comment \'\u65f6\u95f4\u5206\u533a\u5b57\u6bb5\uff0c\u5f62\u5f0fyyyy-MM\')\\n\\npartitioned by (dt string comment \'\u65f6\u95f4\u5206\u533a\u5b57\u6bb5\uff0c\u5f62\u5f0fyyyy\')\\n\\n\\n6 \u8868\u6ce8\u91ca\u89c4\u8303\\n\\n1\u3001\u6240\u6709\u8868(\u4e0d\u533a\u5206hive\u8868\u6216ysql\u8868)\u548c\u5b57\u6bb5\u7684\u6ce8\u91ca\u90fd\u5fc5\u987b\u4f7f\u7528comment\u8bed\u53e5\u589e\u52a0\u6ce8\u91ca,\u539f\u5219\u662f\u7b80\u5355\u660e\u4e86\u4e14\u5b8c\u6574\uff0c\u80fd\u53cd\u6620\u771f\u5b9e\u6570\u636e\u7684\u3002\\n\\n2\u3001\u5b57\u6bb5\u5355\u4f4d\u6ce8\u91ca\u89c4\u8303\uff0c\u5982\uff1a\\n\\n\u91d1\u989d\u4e3e\u4f8b \uff1a\u9500\u552e\u989d(\u5143)\\n\u4ef7\u683c\u4e3e\u4f8b\uff1a\u56de\u6536\u4ef7(\u5206) \\n\u91cd\u91cf\u4e3e\u4f8b\uff1a\u5305\u88f9\u91cd\u91cf(kg)\\n\u65f6\u95f4\u4e3e\u4f8b\uff1a\u53d1\u8d27\u65f6\u957f(\u6beb\u79d2)\\n\\n7 \u5b57\u6bb5\u9ed8\u8ba4\u503c\u89c4\u8303\\n\\n\u6570\u4ed3\u5185\u90e8\u7684\u5b57\u6bb5\u8981\u6c42\u5168\u90e8\u6e05\u6d17\uff0c\u6e05\u6d17\u4ee5\u540e\u9664\u6709\u610f\u4e49\u503c\u4ee5\u5916\uff0c\u5168\u90e8\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002\\n\\n\u5ea6\u91cf\u6570\u503c\u7c7b\u578b\u9ed8\u8ba4\u503c\uff1a0\\n\\n\u5176\u4ed6\u6570\u503c\u7c7b\u578b\u9ed8\u8ba4\u503c\uff1a-9\\n\\n\u5b57\u7b26\u4e32\u7c7b\u578b\u5b57\u6bb5\u9ed8\u8ba4\u503c\uff1a\'\'"},{"id":"/\u79bb\u7ebf\u6570\u4ed3\u3001\u5b9e\u65f6\u6570\u4ed3\u4e0e Data Lakehouse","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/\u79bb\u7ebf\u6570\u4ed3\u3001\u5b9e\u65f6\u6570\u4ed3\u4e0e Data Lakehouse","source":"@site/i18n/en/docusaurus-plugin-content-blog/\u79bb\u7ebf\u6570\u4ed3\u3001\u5b9e\u65f6\u6570\u4ed3\u4e0e Data Lakehouse.md","title":"Offline digital Warehouse, real-time digital Warehouse and DataLakeHouse","description":"\u4ec0\u4e48\u662f\u6570\u636e\u4ed3\u5e93","date":"2022-12-11T05:06:40.000Z","formattedDate":"December 11, 2022","tags":[{"label":"data warehouse","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-warehouse"},{"label":"Data Lake","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-lake"}],"readingTime":10.9,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"tags":["data warehouse","Data Lake"]},"prevItem":{"title":"Digital warehouse architecture","permalink":"/Bigdata_Blog_Website/en/blog/\u6570\u4ed3\u67b6\u6784\u4f53\u7cfb"},"nextItem":{"title":"Mac M1 Datasophon install","permalink":"/Bigdata_Blog_Website/en/blog/Mac M1 Datasophon \u5b89\u88c5"}},"content":"## \u4ec0\u4e48\u662f\u6570\u636e\u4ed3\u5e93\\n\\n\u6570\u636e\u4ed3\u5e93\u662f\u4e00\u4e2a\u4e3a\u6570\u636e\u5206\u6790\u800c\u8bbe\u8ba1\u7684\u4f01\u4e1a\u7ea7\u6570\u636e\u7ba1\u7406\u7cfb\u7edf\u3002\\n\\n> \u6570\u636e\u4ed3\u5e93\u53ef\u96c6\u4e2d\u3001\u6574\u5408\u591a\u4e2a\u4fe1\u606f\u6e90\u7684\u5927\u91cf\u6570\u636e\uff0c\u501f\u52a9\u6570\u636e\u4ed3\u5e93\u7684\u5206\u6790\u80fd\u529b\uff0c\u4f01\u4e1a\u53ef\u4ece\u6570\u636e\u4e2d\u83b7\u5f97\u5b9d\u8d35\u7684\u4fe1\u606f\u8fdb\u800c\u6539\u8fdb\u51b3\u7b56\u3002\\n\\n\u540c\u65f6\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6570\u636e\u4ed3\u5e93\u4e2d\u79ef\u7d2f\u7684\u5927\u91cf\u5386\u53f2\u6570\u636e\u5bf9\u4e8e\u6570\u636e\u79d1\u5b66\u5bb6\u548c\u4e1a\u52a1\u5206\u6790\u5e08\u4e5f\u662f\u5341\u5206\u5b9d\u8d35\u7684\u3002\\n\\n## \u4ec0\u4e48\u662f\u6570\u636e\u6e56\\n\\n\u6570\u636e\u6e56\uff08Data Lake\uff09\u548c\u6570\u636e\u5e93\u3001\u6570\u636e\u4ed3\u5e93\u4e00\u6837\uff0c\u90fd\u662f\u6570\u636e\u5b58\u50a8\u7684\u8bbe\u8ba1\u6a21\u5f0f\u3002\\n\x3c!--truncate--\x3e\\n> \u6570\u636e\u5e93\u548c\u6570\u636e\u4ed3\u5e93\u4f1a\u4ee5\u5173\u7cfb\u578b\u7684\u65b9\u5f0f\u6765\u8bbe\u8ba1\u5b58\u50a8\u3001\u5904\u7406\u6570\u636e\u3002\u4f46\u6570\u636e\u6e56\u7684\u8bbe\u8ba1\u7406\u5ff5\u662f\u76f8\u53cd\u7684\uff0c\u6570\u636e\u4ed3\u5e93\u662f\u4e3a\u4e86\u4fdd\u969c\u6570\u636e\u7684\u8d28\u91cf\u3001\u6570\u636e\u7684\u4e00\u81f4\u6027\u3001\u6570\u636e\u7684\u91cd\u7528\u6027\u7b49\u5bf9\u6570\u636e\u8fdb\u884c\u7ed3\u6784\u5316\u5904\u7406\u3002\\n\\n\u6570\u636e\u6e56\u662f\u4e00\u4e2a\u6570\u636e\u5b58\u50a8\u5e93\uff0c\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u6e56\u6765\u5b58\u50a8\u5927\u91cf\u7684\u539f\u59cb\u6570\u636e\u3002\\n\\n> \u73b0\u5728\u4f01\u4e1a\u7684\u6570\u636e\u4ed3\u5e93\u90fd\u4f1a\u901a\u8fc7\u5206\u5c42\u7684\u65b9\u5f0f\u5c06\u6570\u636e\u5b58\u50a8\u5728\u6587\u4ef6\u5939\u3001\u6587\u4ef6\u4e2d\uff0c\u800c\u6570\u636e\u6e56\u4f7f\u7528\u7684\u662f\u5e73\u9762\u67b6\u6784\u6765\u5b58\u50a8\u6570\u636e\u3002\\n\\n\u6211\u4eec\u9700\u8981\u505a\u7684\u53ea\u662f\u7ed9\u6bcf\u4e2a\u6570\u636e\u5143\u7d20\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u5e76\u901a\u8fc7\u5143\u6570\u636e\u6807\u7b7e\u6765\u8fdb\u884c\u6807\u6ce8\u3002\\n\\n> \u5f53\u4f01\u4e1a\u4e2d\u51fa\u73b0\u4e1a\u52a1\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u4ece\u6570\u636e\u6e56\u4e2d\u67e5\u8be2\u6570\u636e\uff0c\u7136\u540e\u5206\u6790\u4e1a\u52a1\u5bf9\u5e94\u7684\u90a3\u4e00\u5c0f\u90e8\u5206\u6570\u636e\u96c6\u6765\u89e3\u51b3\u4e1a\u52a1\u95ee\u9898\u3002\\n\\n\u4e86\u89e3\u8fc7 Hadoop \u7684\u540c\u5b66\u77e5\u9053\uff0c\u57fa\u4e8e Hadoop \u53ef\u4ee5\u5b58\u50a8\u4efb\u610f\u5f62\u5f0f\u7684\u6570\u636e\u3002\\n\\n> \u6240\u4ee5\uff0c\u5f88\u591a\u65f6\u5019\u6570\u636e\u6e56\u4f1a\u548c Hadoop \u5173\u8054\u5230\u4e00\u8d77\u3002\\n\\n\u4f8b\u5982\uff1a\u628a\u6570\u636e\u52a0\u8f7d Hadoop \u4e2d\uff0c\u7136\u540e\u5c06\u6570\u636e\u5206\u6790\u3001\u548c\u6570\u636e\u6316\u6398\u7684\u5de5\u5177\u57fa\u4e8e Hadoop \u8fdb\u884c\u5904\u7406\u3002\\n\\n> \u6570\u636e\u6e56\u8d8a\u6765\u8d8a\u591a\u7684\u7528\u4e8e\u63cf\u8ff0\u4efb\u4f55\u7684\u5927\u578b\u6570\u636e\u6c60\uff0c\u6570\u636e\u90fd\u662f\u4ee5\u539f\u59cb\u6570\u636e\u65b9\u5f0f\u5b58\u50a8\uff0c\u77e5\u9053\u9700\u8981\u67e5\u8be2\u5e94\u7528\u6570\u636e\u7684\u65f6\u5019\u624d\u4f1a\u5f00\u59cb\u5206\u6790\u6570\u636e\u9700\u6c42\u548c\u5e94\u7528\u67b6\u6784\u3002\\n>\\n> \u6570\u636e\u6e56\u662f\u63cf\u8ff0\u6570\u636e\u5b58\u50a8\u7b56\u7565\u7684\u65b9\u5f0f\uff0c\u5e76\u4e0d\u4e0e\u5177\u4f53\u7684\u67d0\u4e2a\u6280\u672f\u6846\u67b6\u5173\u8054\u3002\u6570\u636e\u5e93\u3001\u6570\u636e\u4ed3\u5e93\u4e5f\u4e00\u6837\u3002\u5b83\u4eec\u90fd\u662f\u6570\u636e\u7684\u7ba1\u7406\u7b56\u7565\u3002\\n>\\n> \u6570\u636e\u6e56\u662f\u4e13\u6ce8\u4e8e\u539f\u59cb\u6570\u636e\u4fdd\u771f\u4ee5\u53ca\u4f4e\u6210\u672c\u957f\u671f\u5b58\u50a8\u7684\u5b58\u50a8\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u5b83\u76f8\u5f53\u4e8e\u662f\u5bf9\u6570\u636e\u4ed3\u5e93\u7684\u8865\u5145\u3002\\n>\\n> \u6570\u636e\u6e56\u662f\u7528\u4e8e\u957f\u671f\u5b58\u50a8\u6570\u636e\u5bb9\u5668\u7684\u96c6\u5408\uff0c\u901a\u8fc7\u6570\u636e\u6e56\u53ef\u4ee5\u5927\u89c4\u6a21\u7684\u6355\u83b7\u3001\u52a0\u5de5\u3001\u63a2\u7d22\u4efb\u4f55\u5f62\u5f0f\u7684\u539f\u59cb\u6570\u636e\u3002\\n>\\n> \u901a\u8fc7\u4f7f\u7528\u4e00\u4e9b\u4f4e\u6210\u672c\u7684\u6280\u672f\uff0c\u53ef\u4ee5\u8ba9\u4e0b\u6e38\u8bbe\u65bd\u53ef\u4ee5\u66f4\u597d\u5730\u5229\u7528\uff0c\u4e0b\u6e38\u8bbe\u65bd\u5305\u62ec\u50cf\u6570\u636e\u96c6\u5e02\u3001\u6570\u636e\u4ed3\u5e93\u6216\u8005\u662f\u673a\u5668\u5b66\u4e60\u6a21\u578b\u3002\\n\\n## \u6570\u636e\u6e56\u7684\u4f18\u70b9\\n\\n\uff081\uff09\u63d0\u4f9b\u4e0d\u9650\u6570\u636e\u7c7b\u578b\u7684\u5b58\u50a8\u3002\\n\\n\uff082\uff09\u5f00\u53d1\u4eba\u5458\u548c\u6570\u636e\u79d1\u5b66\u5bb6\u53ef\u4ee5\u5feb\u901f\u52a8\u6001\u5efa\u7acb\u6570\u636e\u6a21\u578b\u3001\u6784\u5efa\u5e94\u7528\u3001\u67e5\u8be2\u6570\u636e\uff0c\u975e\u5e38\u7075\u6d3b\u3002\\n\\n\uff083\uff09\u56e0\u4e3a\u6570\u636e\u6e56\u6ca1\u6709\u56fa\u5b9a\u7684\u7ed3\u6784\uff0c\u6240\u4ee5\u66f4\u6613\u4e8e\u8bbf\u95ee\u3002\\n\\n\uff084\uff09\u957f\u671f\u5b58\u50a8\u6570\u636e\u7684\u6210\u672c\u4f4e\u5ec9\uff0c\u6570\u636e\u6e56\u53ef\u4ee5\u5b89\u88c5\u5728\u4f4e\u6210\u672c\u7684\u786c\u4ef6\u5728\uff0c\u4f8b\u5982\uff1a\u5728\u4e00\u822c\u7684 X86 \u673a\u5668\u4e0a\u90e8\u7f72 Hadoop\u3002\\n\\n\uff085\uff09\u56e0\u4e3a\u6570\u636e\u6e56\u662f\u975e\u5e38\u7075\u6d3b\u7684\uff0c\u5b83\u5141\u8bb8\u4f7f\u7528\u591a\u79cd\u4e0d\u540c\u7684\u5904\u7406\u3001\u5206\u6790\u65b9\u5f0f\u6765\u8ba9\u6570\u636e\u53d1\u6325\u4ef7\u503c\uff0c\u4f8b\u5982\uff1a\u6570\u636e\u5206\u6790\u3001\u5b9e\u65f6\u5206\u6790\u3001\u673a\u5668\u5b66\u4e60\u4ee5\u53ca SQL \u67e5\u8be2\u90fd\u53ef\u4ee5\u3002\\n\\n## \u6570\u636e\u6e56\u4e0e\u6570\u636e\u4ed3\u5e93\u5bf9\u6bd4\\n\\n\u6570\u636e\u6e56\u548c\u6570\u636e\u4ed3\u5e93\u662f\u7528\u4e8e\u5b58\u50a8\u5927\u6570\u636e\u7684\u4e24\u79cd\u4e0d\u540c\u7b56\u7565\uff0c\u6700\u5927\u533a\u522b\u662f\uff1a\u6570\u636e\u4ed3\u5e93\u662f\u63d0\u524d\u8bbe\u8ba1\u597d\u6a21\u5f0f\uff08schema\uff09\u7684\uff0c\u56e0\u4e3a\u6570\u636e\u4ed3\u5e93\u4e2d\u5b58\u50a8\u7684\u90fd\u662f\u7ed3\u6784\u5316\u6570\u636e\u3002\\n\\n\u800c\u5728\u6570\u636e\u6e56\u4e2d\uff0c\u4e0d\u4e00\u5b9a\u662f\u8fd9\u6837\u7684\u3002\u6570\u636e\u6e56\u4e2d\u53ef\u4ee5\u5b58\u50a8\u7ed3\u6784\u5316\u548c\u975e\u7ed3\u6784\u5316\u7684\u6570\u636e\uff0c\u662f\u65e0\u6cd5\u9884\u5148\u5b9a\u4e49\u597d\u7ed3\u6784\u7684\u3002\\n\\n\u6211\u4eec\u6765\u8fdb\u4e00\u6b65\u8fdb\u884c\u5bf9\u6bd4\uff1a\\n\\n\uff081\uff09\u6570\u636e\u7684\u5b58\u50a8\u4f4d\u7f6e\u4e0d\u540c\\n\\n> \u6570\u636e\u4ed3\u5e93\u56e0\u4e3a\u662f\u8981\u6709\u7ed3\u6784\u7684\uff0c\u5728\u4f01\u4e1a\u4e2d\u5f88\u591a\u90fd\u662f\u57fa\u4e8e\u5173\u7cfb\u578b\u6a21\u578b\u3002\u800c\u6570\u636e\u6e56\u901a\u5e38\u4f4d\u4e8e\u5206\u5e03\u5f0f\u5b58\u50a8\u4f8b\u5982 Hadoop \u6216\u8005\u7c7b\u4f3c\u7684\u5927\u6570\u636e\u5b58\u50a8\u4e2d\u3002\\n\\n\uff082\uff09\u6570\u636e\u6e90\u4e0d\u540c\\n\\n> \u6570\u636e\u4ed3\u5e93\u7684\u6570\u636e\u6765\u6e90\u5f88\u591a\u65f6\u5019\u6765\u81ea\u4e8e OLTP \u5e94\u7528\u7684\u7ed3\u6784\u5316\u6570\u636e\u5e93\u4e2d\u63d0\u53d6\u7684\uff0c\u7528\u4e8e\u652f\u6301\u5185\u90e8\u7684\u4e1a\u52a1\u90e8\u95e8\uff08\u4f8b\u5982\uff1a\u9500\u552e\u3001\u5e02\u573a\u3001\u8fd0\u8425\u7b49\u90e8\u95e8\uff09\u8fdb\u884c\u4e1a\u52a1\u5206\u6790\u3002\\n>\\n> \u800c\u6570\u636e\u6e56\u7684\u6570\u636e\u6765\u6e90\u53ef\u4ee5\u662f\u7ed3\u6784\u5316\u7684\u3001\u4e5f\u53ef\u4ee5\u662f\u975e\u7ed3\u6784\u5316\u7684\uff0c\u4f8b\u5982\uff1a\u4e1a\u52a1\u7cfb\u7edf\u6570\u636e\u5e93\u3001IOT \u8bbe\u5907\u3001\u793e\u4ea4\u5a92\u4f53\u3001\u79fb\u52a8 APP \u7b49\u3002\\n\\n\uff083\uff09\u7528\u6237\u4e0d\u540c\\n\\n> \u6570\u636e\u4ed3\u5e93\u4e3b\u8981\u662f\u4e1a\u52a1\u7cfb\u7edf\u7684\u5927\u91cf\u4e1a\u52a1\u6570\u636e\u8fdb\u884c\u7edf\u8ba1\u5206\u6790\uff0c\u6240\u4ee5\u4f1a\u5e94\u7528\u6570\u636e\u5206\u6790\u7684\u90e8\u95e8\u662f\u6570\u636e\u4ed3\u5e93\u7684\u4e3b\u8981\u7528\u6237\uff0c\u4f8b\u5982\uff1a\u9500\u552e\u90e8\u3001\u5e02\u573a\u90e8\u3001\u8fd0\u8425\u90e8\u3001\u603b\u88c1\u529e\u7b49\u7b49\u3002\\n>\\n> \u800c\u5f53\u9700\u8981\u4e00\u4e2a\u5927\u578b\u7684\u5b58\u50a8\uff0c\u800c\u5f53\u524d\u6ca1\u6709\u660e\u786e\u7684\u6570\u636e\u5e94\u7528\u7528\u6237\u6216\u8005\u662f\u76ee\u6807\uff0c\u5c06\u6765\u60f3\u8981\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u7684\u4eba\u53ef\u4ee5\u5728\u4f7f\u7528\u65f6\u5f00\u59cb\u8bbe\u8ba1\u67b6\u6784\uff0c\u6b64\u65f6\uff0c\u6570\u636e\u6e56\u66f4\u9002\u5408\u3002\\n>\\n> \u4f46\u6570\u636e\u6e56\u4e2d\u7684\u6570\u636e\u90fd\u662f\u539f\u59cb\u6570\u636e\uff0c\u662f\u672a\u7ecf\u6574\u7406\u7684\uff0c\u8fd9\u5bf9\u4e8e\u666e\u901a\u7684\u7528\u6237\u51e0\u4e4e\u662f\u4e0d\u53ef\u7528\u7684\u3002\\n>\\n> \u6570\u636e\u6e56\u66f4\u9002\u5408\u6570\u636e\u79d1\u5b66\u5bb6\uff0c\u56e0\u4e3a\u6570\u636e\u79d1\u5b66\u5bb6\u53ef\u4ee5\u5e94\u7528\u6a21\u578b\u3001\u6280\u672f\u53d1\u89c9\u6570\u636e\u4e2d\u7684\u4ef7\u503c\uff0c\u53bb\u89e3\u51b3\u4f01\u4e1a\u4e2d\u7684\u4e1a\u52a1\u95ee\u9898\u3002\\n\\n\uff084\uff09\u6570\u636e\u8d28\u91cf\\n\\n> \u6570\u636e\u4ed3\u5e93\u662f\u975e\u5e38\u91cd\u6570\u636e\u8d28\u91cf\u7684\uff0c\u5927\u5bb6\u73b0\u5728\u7ecf\u5e38\u542c\u8bf4\u7684\u6570\u636e\u4e2d\u53f0\uff0c\u5176\u4e2d\u6709\u4e00\u5927\u5757\u662f\u6570\u636e\u8d28\u91cf\u7ba1\u7406\u3001\u6570\u636e\u8d44\u4ea7\u7ba1\u7406\u7b49\u3002\\n>\\n> \u6570\u636e\u4ed3\u5e93\u4e2d\u7684\u6570\u636e\u90fd\u662f\u7ecf\u8fc7\u5904\u7406\u7684\u3002\\n>\\n> \u800c\u6570\u636e\u6e56\u4e2d\u7684\u6570\u636e\u53ef\u9760\u6027\u662f\u8f83\u5dee\u7684\uff0c\u8fd9\u4e9b\u6570\u636e\u53ef\u80fd\u662f\u4efb\u610f\u72b6\u6001\u3001\u5f62\u6001\u7684\u6570\u636e\u3002\\n\\n\uff085\uff09\u6570\u636e\u6a21\u5f0f\\n\\n> \u6570\u636e\u4ed3\u5e93\u5728\u6570\u636e\u5199\u5165\u4e4b\u524d\u5c31\u8981\u5b9a\u4e49\u597d\u6a21\u5f0f\uff08schema\uff09\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u4f1a\u5148\u5efa\u7acb\u6a21\u578b\u3001\u5efa\u7acb\u8868\u7ed3\u6784\uff0c\u7136\u540e\u5bfc\u5165\u6570\u636e\u3002\\n>\\n> \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u79f0\u4e4b\u4e3a write-schema\u3002\\n>\\n> \u800c\u6570\u636e\u6e56\u4e2d\u7684\u6570\u636e\u662f\u6ca1\u6709\u6a21\u5f0f\u7684\uff0c\u76f4\u5230\u6709\u7528\u6237\u8981\u8bbf\u95ee\u6570\u636e\u3001\u4f7f\u7528\u6570\u636e\u624d\u4f1a\u5efa\u7acb schema\u3002\\n>\\n> \u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u79f0\u4e4b\u4e3a read-schema\u3002\\n\\n\uff086\uff09\u654f\u6377\u6269\u5c55\u6027\\n\\n> \u6570\u636e\u4ed3\u5e93\u7684\u6a21\u5f0f\u4e00\u65e6\u5efa\u7acb\uff0c\u8981\u91cd\u65b0\u8c03\u6574\u6a21\u5f0f\uff0c\u5f80\u5f80\u4ee3\u4ef7\u5f88\u5927\uff0c\u7275\u4e00\u53d1\u800c\u52a8\u5168\u8eab\uff0c\u6240\u6709\u76f8\u5173\u7684 ETL \u7a0b\u5e8f\u53ef\u80fd\u90fd\u9700\u8981\u8c03\u6574\u3002\\n>\\n> \u800c\u6570\u636e\u6e56\u662f\u975e\u5e38\u7075\u6d3b\u7684\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u8981\u91cd\u65b0\u914d\u7f6e\u7ed3\u6784\u6216\u8005\u6a21\u5f0f\u3002\\n>\\n> \u57fa\u4e8e\u4e0a\u8ff0\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u4e86\u89e3\u5230\uff0c\u6570\u636e\u6e56\u548c\u6570\u636e\u4ed3\u5e93\u7684\u5e94\u7528\u70b9\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4ed6\u4eec\u662f\u4e24\u79cd\u76f8\u5bf9\u72ec\u7acb\u7684\u6570\u636e\u8bbe\u8ba1\u6a21\u5f0f\u3002\\n>\\n> \u5728\u4e00\u4e9b\u4f01\u4e1a\u4e2d\uff0c\u53ef\u80fd\u4f1a\u65e2\u6709\u6570\u636e\u6e56\u3001\u53c8\u6709\u6570\u636e\u4ed3\u5e93\u3002\u6570\u636e\u6e56\u5e76\u4e0d\u662f\u8981\u66ff\u4ee3\u6570\u636e\u4ed3\u5e93\uff0c\u800c\u662f\u5bf9\u4f01\u4e1a\u7684\u6570\u636e\u7ba1\u7406\u6a21\u5f0f\u8fdb\u884c\u8865\u5145\u3002\\n\\n\uff087\uff09\u5e94\u7528\\n\\n> \u6570\u636e\u4ed3\u5e93\u4e00\u822c\u7528\u4e8e\u505a\u6279\u5904\u7406\u62a5\u544a\u3001BI\u3001\u53ef\u89c6\u5316\u3002\\n>\\n> \u800c\u6570\u636e\u6e56\u4e3b\u8981\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u3001\u9884\u6d4b\u5206\u6790\u3001\u6570\u636e\u63a2\u7d22\u548c\u5206\u6790\u3002\\n\\n## \u6570\u636e\u6e56\u5e94\u7528\\n\\n\u6570\u636e\u6e56\u662f\u7528\u4e8e\u6570\u636e\u5b58\u50a8\u7684\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u4f46\u6700\u7ec8\u6570\u636e\u80af\u5b9a\u662f\u9700\u8981\u4e00\u79cd\u4ecb\u8d28\u5b58\u50a8\u4e0b\u6765\u7684\u3002\\n\\n> \u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u6765\u9009\u62e9\u6570\u636e\u6e56\u7684\u7269\u7406\u5b58\u50a8\u5f15\u64ce\u3002\\n\\n\u4f8b\u5982\uff1a\u4f7f\u7528 Hadoop \u4f5c\u4e3a\u6570\u636e\u6e56\u7684\u7269\u7406\u5b58\u50a8\u5f15\u64ce\u3001\u6216\u8005\u4f7f\u7528 AWS \u7684 S3 \u4f5c\u4e3a\u5b58\u50a8\u5f15\u64ce\u7b49\u3002\\n\\n> \u4f46\u67b6\u6784\u6570\u636e\u6e56\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u51e0\u70b9\u539f\u5219\uff0c\u8fd9\u51e0\u70b9\u539f\u5219\u4e5f\u5c06\u548c\u5176\u4ed6\u6570\u636e\u5b58\u50a8\u65b9\u6cd5\u533a\u522b\u5f00\u6765\u3002\\n\\n\u53ef\u4ee5\u52a0\u8f7d\u5404\u79cd\u6e90\u7cfb\u7edf\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u5b58\u50a8\u3002\\n\\n> \u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u90fd\u53ef\u4ee5\u5b58\u50a8\u3002\\n\\n\u6570\u636e\u662f\u4ee5\u539f\u59cb\u72b6\u6001\u4fdd\u5b58\u5728\u6570\u636e\u6e56\u4e2d\u7684\uff0c\u662f\u51e0\u4e4e\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u8f6c\u6362\u7684\u3002\\n\\n> \u6570\u636e\u53ef\u4ee5\u6839\u636e\u5e94\u7528\u3001\u5206\u6790\u7684\u8981\u6c42\uff0c\u8fdb\u884c\u8f6c\u6362\u6210\u9002\u5408\u5206\u6790\u7684\u6a21\u5f0f\\n\\n\u6784\u5efa\u6570\u636e\u6e56\u65f6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u7684\u7ba1\u7406\u3002\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e9b\u7ba1\u7406\u529e\u6cd5\uff0c\u4f8b\u5982\uff1a\\n\\n> \u5c06\u6570\u636e\u8fdb\u884c\u5408\u7406\u5206\u7c7b\uff0c\u4f8b\u5982\uff1a\u6309\u7167\u6570\u636e\u7c7b\u578b\u5206\u7c7b\u3001\u6309\u7167\u4e1a\u52a1\u5185\u5bb9\u5206\u7c7b\u3001\u6309\u7167\u5e94\u7528\u573a\u666f\u5206\u7c7b\u6216\u8005\u6309\u7167\u53ef\u80fd\u7684\u7528\u6237\u6765\u5206\u7c7b\u3002\\n\\n\u4e3a\u4e86\u65b9\u4fbf\u6570\u636e\u6e56\u7684\u6570\u636e\u5b58\u53d6\uff0c\u8981\u63d0\u524d\u5b9a\u4e49\u597d\u547d\u540d\u89c4\u5219\u548c\u56fa\u5b9a\u7684\u6587\u4ef6\u76ee\u5f55\u7ed3\u6784\u3002\\n\\n> \u5982\u679c\u51fa\u73b0\u6570\u636e\u8d28\u91cf\u95ee\u9898\u4e5f\u53ef\u4ee5\u89e3\u51b3\u6389\u3002\\n\\n\u5efa\u7acb\u6570\u636e\u8bbf\u95ee\u6807\u51c6\uff0c\u53ef\u4ee5\u8ffd\u8e2a\u5230\u54ea\u4e9b\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u6570\u636e\u3002\\n\\n> \u8ba9\u6570\u636e\u76ee\u5f55\u53ef\u4ee5\u88ab\u68c0\u7d22\u5230\u3002\\n\\n\u63d0\u4f9b\u4e00\u4e9b\u52a0\u5bc6\u3001\u76d1\u63a7\u3001\u6388\u6743\u3001\u8b66\u62a5\u7b49\u529f\u80fd\u3002"},{"id":"/Mac M1 Datasophon \u5b89\u88c5","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/Mac M1 Datasophon \u5b89\u88c5","source":"@site/i18n/en/docusaurus-plugin-content-blog/Mac M1 Datasophon \u5b89\u88c5.md","title":"Mac M1 Datasophon install","description":"\u56fd\u4ea7\u5927\u6570\u636e\u8fd0\u7ef4\u90e8\u7f72\u7cfb\u7edf","date":"2022-11-21T18:41:11.000Z","formattedDate":"November 21, 2022","tags":[{"label":"Management platform","permalink":"/Bigdata_Blog_Website/en/blog/tags/management-platform"}],"readingTime":5.83,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"title":"Mac M1 Datasophon install","date":"2022-11-21T18:41:11.000Z","tags":["Management platform"],"keywords":["Datasophon"],"description":"\u56fd\u4ea7\u5927\u6570\u636e\u8fd0\u7ef4\u90e8\u7f72\u7cfb\u7edf","image":"https://user-images.githubusercontent.com/34996528/203275795-397bdfb2-5510-4764-8948-9655016e8449.png"},"prevItem":{"title":"Offline digital Warehouse, real-time digital Warehouse and DataLakeHouse","permalink":"/Bigdata_Blog_Website/en/blog/\u79bb\u7ebf\u6570\u4ed3\u3001\u5b9e\u65f6\u6570\u4ed3\u4e0e Data Lakehouse"},"nextItem":{"title":"Flink CDC 2.3.0 Announce","permalink":"/Bigdata_Blog_Website/en/blog/Flink CDC 2.3.0 Announce"}},"content":"## \u4ec0\u4e48\u662f Datasophon\\n\\nDataSophon \u662f\u81f4\u529b\u4e8e\u81ea\u52a8\u5316\u76d1\u63a7\u3001\u8fd0\u7ef4\u3001\u7ba1\u7406\u5927\u6570\u636e\u57fa\u7840\u7ec4\u4ef6\u548c\u8282\u70b9\u7684\uff0c\u5e2e\u52a9\u60a8\u5feb\u901f\u6784\u5efa\u8d77\u7a33\u5b9a\uff0c\u9ad8\u6548\u7684\u5927\u6570\u636e\u96c6\u7fa4\u670d\u52a1\u3002\\n\\n![img](https://user-images.githubusercontent.com/34996528/203275795-397bdfb2-5510-4764-8948-9655016e8449.png)\\n\\n\x3c!--truncate--\x3e\\n\\n### \u7f51\u7edc\u8981\u6c42\\n\\n\u8981\u6c42\u5404\u673a\u5668\u5404\u7ec4\u4ef6\u6b63\u5e38\u8fd0\u884c\u63d0\u4f9b\u5982\u4e0b\u7684\u7f51\u7edc\u7aef\u53e3\u914d\u7f6e\uff1a\\n\\n| **\u7ec4\u4ef6**                | **\u9ed8\u8ba4\u7aef\u53e3**     |                         **\u8bf4\u660e**                          |\\n| ----------------------- | ---------------- | :-------------------------------------------------------: |\\n| DDHApplicationServer    | 8081\u30012551\u30018586 |  8081 \u4e3ahttp server \u7aef\u53e3\uff0c2551 \u4e3arpc \u901a\u4fe1\u7aef\u53e3\uff0c8586 \u4e3a jmx \u7aef\u53e3  |\\n| WorkerApplicationServer | 2552\u30019100\u30018585 | 2552 rpc \u901a\u4fe1\u7aef\u53e3\uff0c8585 \u4e3a jmx \u7aef\u53e3\uff0c9100 \u4e3a\u4e3b\u673a\u6570\u636e\u91c7\u96c6\u5668\u7aef\u53e3 |\\n| nginx                   | 8888             |                    \u63d0\u4f9b UI \u7aef\u901a\u4fe1\u7aef\u53e3                     |\\n\\n### \u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u8981\u6c42\\n```\\n\u63a8\u8350 Chrome \u4ee5\u53ca\u4f7f\u7528 Chrome \u5185\u6838\u7684\u8f83\u65b0\u7248\u672c\u6d4f\u89c8\u5668\u8bbf\u95ee\u524d\u7aef\u53ef\u89c6\u5316\u64cd\u4f5c\u754c\u9762\u3002\\n```\\n### \u5173\u95ed\u9632\u706b\u5899\\n\\n\u5404\u4e3b\u673a\u9632\u706b\u5899\u9700\u5173\u95ed\u3002\\n\\n### \u914d\u7f6e\u4e3b\u673a host\\n\\n\u5927\u6570\u636e\u96c6\u7fa4\u6240\u6709\u673a\u5668\u9700\u914d\u7f6e\u4e3b\u673a host\u3002\\n\\n\u914d\u7f6e\u4e3b\u673a\u540d\uff1a hostnamectl set-hostname  \u4e3b\u673a\u540d\\n\\n\u914d\u7f6e /etc/hosts \u6587\u4ef6\\n\\n### \u514d\u5bc6\u767b\u5f55\u914d\u7f6e\\n\\n\u90e8\u7f72\u673a\u5668\u4e2d\uff0cDataSophon \u8282\u70b9\u4ee5\u53ca\u5927\u6570\u636e\u670d\u52a1\u4e3b\u8282\u70b9\u4e0e\u4ece\u8282\u70b9\u4e4b\u95f4\u9700\u514d\u5bc6\u767b\u5f55\u3002\\n\\n\u751f\u6210ssh \u79d8\u94a5\uff1a ssh-keygen -m PEM -t rsa \uff0c\u4e00\u8def\u56de\u8f66\u3002\\n\\n\u6267\u884c ssh-copy-id \u76ee\u6807\u4e3b\u673a\u3002\\n\\n### \u73af\u5883\u8981\u6c42\\n\\nJdk\u73af\u5883\u9700\u5b89\u88c5\u3002\u5efa\u8bae mysql \u7248\u672c\u4e3a 5.7.X\uff0c\u5e76\u5173\u95ed ssl\u3002\\n\\n(\u672c\u673a\u4e3a mysql 8)\\n\\n### \u7ec4\u4ef6\u4ecb\u7ecd\\n\\nDDHApplicationServer \u4e3a API \u63a5\u53e3\u5c42\u5373 web \u540e\u7aef\uff0c\u4e3b\u8981\u8d1f\u8d23\u5904\u7406\u524d\u7aef UI \u5c42\u7684\u8bf7\u6c42\u3002\u8be5\u670d\u52a1\u7edf\u4e00\u63d0\u4f9b RESTful api \u5411\u5916\u90e8\u63d0\u4f9b\u8bf7\u6c42\u670d\u52a1\u3002 \\n\\nWorkerApplicationServer \u8d1f\u8d23\u6267\u884c DDHApplicationServer \u53d1\u9001\u7684\u6307\u4ee4\uff0c\u5305\u62ec\u670d\u52a1\u5b89\u88c5\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u91cd\u542f\u7b49\u6307\u4ee4\u3002\\n\\n\\n## \u5feb\u901f\u90e8\u7f72\\n\\n### \u90e8\u7f72 mysql \\n\\nmac m1 \u9700\u5c3d\u53ef\u80fd\u5148\u914d\u7f6e\u56fd\u5185 yum \u6e90\u5426\u5219\u5bb9\u6613\u51fa\u9519\u4f8b\u5982\u914d\u7f6e\u534e\u4e3a\u4e91\uff0c\u505a\u597d\u7528\u6237 datasophon \u7528\u6237\u6388\u6743(\u8fdc\u7a0b\u8bbf\u95ee\u7b49\u6743\u9650)\\n\\n\u6ce8\u610f\u9700\u5173\u95ed mysql ssl \u529f\u80fd\u3002\u5728\u90e8\u7f72\u8fc7\u7a0b\u4e2d\uff0c\u90e8\u5206\u7ec4\u4ef6\u4f1a\u6267\u884c sql \u751f\u6210\u5e93\u8868\uff0c\u4e0d\u540c\u73af\u5883\u7684 mysql \u5728\u914d\u7f6e\u4e0a\u5b58\u5728\u5dee\u5f02\uff0c\u53ef\u6839\u636e sql \u6267\u884c\u60c5\u51b5\uff0c\u53d8\u66f4 mysql \u914d\u7f6e\u3002\\n\\n### \u6267\u884c\u6570\u636e\u811a\u672c\\n\\n> mysql 5.7\\n```sql\\nCREATE DATABASE IF NOT EXISTS datasophon DEFAULT CHARACTER SET utf8;\\ngrant all privileges on *.* to datasophon@\\"%\\" identified by \'datasophon\' with grant option;\\nGRANT ALL PRIVILEGES ON *.* TO \'datasophon\'@\'%\';\\nFLUSH PRIVILEGES;\\n```\\n> mysql 8\\n```sql\\ncreate user \'datasophon\'@\\"localhost\\" IDENTIFIED BY \'datasophon\';\\ngrant all on datasophon.* to \\"datasophon\\"@\\"localhost\\" with grant option;\\nFLUSH PRIVILEGES;\\n```\\n\\n\\n\u6267\u884c datasophon-manager \u5b89\u88c5\u76ee\u5f55 sql \u76ee\u5f55\u4e0b datasophon.sql\uff0c\u521b\u5efa\u6570\u636e\u8868\u3002\\n\\n```sql\\nuse datasophon;\\nsource /opt/datasophon-manager-1.0.0/sql/datasophon-1.0.0.sql\\n```\\n\\n## \u5b89\u88c5 nginx\\n\\n\u63d0\u4f9b nginx.conf \u7684 server \u914d\u7f6e\u3002\\n\\nvi /etc/nginx/nginx.conf \\n\\n```\\n server {\\n                listen 8888;# \u8bbf\u95ee\u7aef\u53e3(\u81ea\u884c\u4fee\u6539)\\n                server_name localhost;\\n                #charset koi8-r;\\n                #access_log /var/log/nginx/host.access.log main;\\n                location / {\\n                        root /usr/local/nginx/dist; # \u524d\u7aef\u89e3\u538b\u7684 dist \u76ee\u5f55\u5730\u5740(\u81ea\u884c\u4fee\u6539\uff0c\u6211\u8fd9\u91cc\u662f yum \u76f4\u63a5 install \u4e86\uff0c\u8fd9\u4e2a\u76ee\u5f55\u9700\u8981\u81ea\u5df1\u521b\u5efa)\\n                        index index.html index.html;\\n                }\\n                location /ddh {\\n                        proxy_pass http://hadoop102:8081; # \u63a5\u53e3\u5730\u5740(\u81ea\u884c\u4fee\u6539)\\n                        proxy_set_header Host $host;\\n                        proxy_set_header X-Real-IP $remote_addr;\\n                        proxy_set_header x_real_ipP $remote_addr;\\n                        proxy_set_header remote_addr $remote_addr;\\n                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n                        proxy_http_version 1.1;\\n                        proxy_connect_timeout 4s;\\n                        proxy_read_timeout 30s;\\n                        proxy_send_timeout 12s;\\n                        proxy_set_header Upgrade $http_upgrade;\\n                        proxy_set_header Connection \\"upgrade\\";\\n                }\\n\\n                #error_page 404 /404.html;\\n                # redirect server error pages to the static page /50x.html\\n                #\\n                error_page 500 502 503 504 /50x.html;\\n                location = /50x.html {\\n                        root /usr/share/nginx/html;\\n                }\\n        }\\n```\\n\\n\u5c06 dist.zip \u89e3\u538b\u5230 nginx \u76ee\u5f55\u4e0b\uff0c\u542f\u52a8 nginx (\u524d\u9762\u914d\u7f6e yum \u6e90\u4e4b\u540e\uff0c\u8fd9\u91cc\u5f88\u597d\u5b89\u88c5)\\n\\n## \u4e0b\u8f7dDDP\u90e8\u7f72\u5305\\n\\nDDP\u90e8\u7f72\u5305\u4e0b\u8f7d\u5730\u5740\uff1a\\n\\n\u94fe\u63a5: https://pan.baidu.com/s/1PMtFWOaYYR0X50X1E_618w?pwd=2t8h \u63d0\u53d6\u7801: 2t8h\\n\\n\u5728 /opt/datasophon \u76ee\u5f55\u4e0b\u521b\u5efa\u76ee\u5f55\\n\\n```\\nmkdir -p /opt/datasophon/DDP/packages\\n```\\n\\n\u5c06\u4e0b\u8f7d\u7684\u90e8\u7f72\u5305\u4e0a\u4f20\u5230 /opt/datasophon/DDP/packages \u76ee\u5f55\u4e0b\uff0c\u4f5c\u4e3a\u9879\u76ee\u90e8\u7f72\u5305\u4ed3\u5e93\u5730\u5740\u3002(\u6240\u6709\u5305\u90fd\u4e0a\u4f20\uff0c\u8f6f\u4ef6\u7684 arm \u5305\u5e76\u4e0d\u7279\u6307 arrch64\uff0cjdk \u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684<\u9700\u5728 /etc/profile \u914d\u7f6e java_home>\uff0c\u4e5f\u53ef\u4ee5\u7528\u5305\u5185\u7684)\\n\\n![img](https://user-images.githubusercontent.com/34996528/203034308-60047d40-663a-4850-8e02-3bb62895d98e.png)\\n\\n\\n## \u90e8\u7f72 DataSophon\\n\\n### 1 \u90e8\u7f72\u76ee\u5f55\u4ecb\u7ecd\\n\\n\u5728\u5b89\u88c5\u76ee\u5f55\u4e0b\u89e3\u538b datasophon-manager-{version}.tar.gz\uff0c\u89e3\u538b\u540e\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u5b89\u88c5\u76ee\u5f55\uff1a\\n\\n![img](https://user-images.githubusercontent.com/34996528/203034500-d2b91aed-80f3-4aa5-b340-d19fd977f77c.png) \\n\\nbin\uff1a\u542f\u52a8\u811a\u672c git\\n\\nconf\uff1a\u914d\u7f6e\u6587\u4ef6\\n\\nlib\uff1a\u9879\u76ee\u4f9d\u8d56\u7684 jar \u5305\\n\\nlogs: \u9879\u76ee\u65e5\u5fd7\u5b58\u653e\u76ee\u5f55\\n\\njmx\uff1ajmx \u63d2\u4ef6\\n\\n### 2 \u4fee\u6539\u914d\u7f6e\\n\\n\u4fee\u6539 conf \u76ee\u5f55\u4e0b\u7684 application.yml \u914d\u7f6e\u6587\u4ef6\u4e2d\u6570\u636e\u5e93\u94fe\u63a5\u914d\u7f6e\uff1a\\n\\n```\\n  datasource:\\n    type: com.alibaba.druid.pool.DruidDataSource\\n    url: jdbc:mysql://hadoop102:3306/datasophon?useUnicode=true&characterEncoding=utf-8&allowPublicKeyRetrieval=true\\n    username: datasophon\\n    password: datasophon\\n    driver-class-name: com.mysql.cj.jdbc.Driver\\n```\\n\u5c06 mysql 8 \u9a71\u52a8 cp \u81f3 /opt/datasophon/datasophon-manager-1.0.0/lib/\\n\\n### 3 \u542f\u52a8\u670d\u52a1\\n\\n```\\n\u542f\u52a8\uff1ash bin/datasophon-api.sh start api\\n\u505c\u6b62\uff1ash bin/datasophon-api.sh stop api\\n\u91cd\u542f\uff1ash bin/datasophon-api.sh restart api\\n```\\n\\n\u90e8\u7f72\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u65e5\u5fd7\u67e5\u770b\uff0c\u65e5\u5fd7\u7edf\u4e00\u5b58\u653e\u4e8e logs \u6587\u4ef6\u5939\u5185:\\n\\n logs/\\n\\n  \u251c\u2500\u2500 ddh-api.log\\n\\n  \u251c\u2500\u2500 ddh-api-error.log\\n\\n  |\u2014\u2014 api-{hostname}.out\\n\\n### \u8bbf\u95ee\u9875\u9762\\n\\n\u8bbf\u95ee\u524d\u7aef\u9875\u9762\u5730\u5740,\u63a5\u53e3 ip (\u81ea\u884c\u4fee\u6539) [http://172.16.69.202:8888](http://192.168.xx.xx:12345/dolphinscheduler) \u9ed8\u8ba4\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e3aadmin/admin123\\n\\n![img](https://user-images.githubusercontent.com/34996528/203197828-89280ea2-b4ed-4678-93c6-44537308d10a.png)\\n\\n### \u5b89\u88c5\u670d\u52a1\\n\\n\u521d\u59cb\u5316\u914d\u7f6e\u96c6\u7fa4\u5148\u9009\u62e9\u90e8\u7f72 AlertManager,Grafana \u548c Prometheus \u4e09\u4e2a\u7ec4\u4ef6\u3002DataSophon \u4f9d\u8d56\u6b64\u4e09\u4e2a\u7ec4\u4ef6\u5b9e\u73b0\u7cfb\u7edf\u76d1\u63a7\u544a\u8b66\u7ba1\u7406\u3002\\n\\n\u7136\u540e\u4f18\u5148\u5b89\u88c5 zk(\u9ad8\u53ef\u7528) \u518d\u5b89\u88c5\u5176\u4ed6\u670d\u52a1\\n\\n## \u76ee\u524d\u5b58\u5728\u7684\u95ee\u9898\\n\\n1. \u6587\u6863\u5c1a\u4e0d\u5b8c\u5584\\n2. log \u65e5\u5fd7\u4e0d\u7b97\u9f50\u5168\\n3. \u5de5\u4f5c\u8fdb\u7a0b\u5173\u95ed\u4e0d\u987a\u7545(\u6211\u8fd9\u8fb9\u6d4b\u8bd5\u5173\u95ed\u670d\u52a1\uff0c\u90e8\u5206\u670d\u52a1\u8282\u70b9\u8fd8\u5728\uff0c\u9700\u624b\u52a8 kill \u6389\u3002\u3002\u3002)"},{"id":"/Flink CDC 2.3.0 Announce","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/Flink CDC 2.3.0 Announce","source":"@site/i18n/en/docusaurus-plugin-content-blog/Flink CDC 2.3.0 Announce.md","title":"Flink CDC 2.3.0 Announce","description":"Flink CDC 2.3.0 Recently released","date":"2022-11-18T21:47:11.000Z","formattedDate":"November 18, 2022","tags":[{"label":"data Integration","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-integration"}],"readingTime":1.21,"hasTruncateMarker":true,"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"frontMatter":{"authors":[{"name":"skylines","url":"https://github.com/rookiegao"}],"title":"Flink CDC 2.3.0 Announce","date":"2022-11-18T21:47:11.000Z","tags":["data Integration"],"keywords":["Fink CDC","Flink"],"description":"Flink CDC 2.3.0 Recently released"},"prevItem":{"title":"Mac M1 Datasophon install","permalink":"/Bigdata_Blog_Website/en/blog/Mac M1 Datasophon \u5b89\u88c5"},"nextItem":{"title":"debezium to oracle 11g Realtime synchronization","permalink":"/Bigdata_Blog_Website/en/blog/debezium to oracle 11g \u5b9e\u65f6\u540c\u6b65"}},"content":"![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/4ac4fbb159234e04acd3b6fe865ce53f.png)\\n\\n\x3c!--truncate--\x3e\\n\\n# New connector\\n\\n2.3.0 New DB2 CDC connector\\n\\n# Incremental snapshots usher in new connector members\\n\\n2.3.0 MongoDB CDC and Oracle CDC both support incremental snapshots to achieve non lock read+concurrent read+breakpoint resume\\n\\n# optimization\\n\\nThe performance and stability of MySQL CDC connector in version 2.3.0 have been greatly improved\\n\\n# Flink support\\n\\nVersion 2.3.0 is compatible with Flink 1.13&1.14&1.15&1.16\\n\\n# More details\\n\\nMySQL CDC supports the startup of specified sites/specified timestamps/earliest sites\\n\\nMySQL CDC supports asynchronous sharding and sharding pauses during checkpoint\\n\\nMySQL CDC supports all character sets, tolerates default values, and automatically obtains the database time zone\\n\\nMySQL CDC JM memory and TM memory optimization, binlog reading performance optimization\\n\\nOceanBase CDC fixes the time zone problem and supports full type docking to Flink SQL\\n\\nMongoDB CDC supports more data types and optimizes the filtering process of capture tables\\n\\nTiDB CDC fixes the problem of data loss during full incremental switchover, and supports region switchover during read\\n\\nPostgres CDC supports more types and opens more configuration items\\n\\nSqlServer CDC supports more versions and improves the documentation\\n\\nMySQL CDC and OceanBase CDC provide Chinese documents, and OceanBase CDC provides video tutorials\\n\\nThe detailed release note is here. You can view all the issue details\\n\\nhttps://github.com/ververica/flink-cdc-connectors/releases\\n\\n\\nFlink cdc Dingding group\\n\\nGroup number\uff1a33121212\\n\\nQR code\uff1a\\n![Scan code to join](https://user-images.githubusercontent.com/9601882/158350201-a1de35e6-0399-4a91-b5b0-e2fd5d33e33c.png)\\n\\nRefer to the Flink cdc group announcement for content\\n\\nThanks to Leonard Xu"},{"id":"/debezium to oracle 11g \u5b9e\u65f6\u540c\u6b65","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/debezium to oracle 11g \u5b9e\u65f6\u540c\u6b65","source":"@site/i18n/en/docusaurus-plugin-content-blog/debezium to oracle 11g \u5b9e\u65f6\u540c\u6b65.md","title":"debezium to oracle 11g Realtime synchronization","description":"\u4f7f\u7528 debezium \u5bf9 oracle \u6570\u636e\u8fdb\u884c\u91c7\u96c6","date":"2021-11-21T09:24:31.000Z","formattedDate":"November 21, 2021","tags":[{"label":"data Integration","permalink":"/Bigdata_Blog_Website/en/blog/tags/data-integration"}],"readingTime":12.94,"hasTruncateMarker":true,"authors":[{"name":"\u9752\u6da9\u7684\u8292\u679c\u6c41","url":"https://blog.csdn.net/weixin_40898246/article/details/120880414?spm=1001.2014.3001.5501"}],"frontMatter":{"authors":[{"name":"\u9752\u6da9\u7684\u8292\u679c\u6c41","url":"https://blog.csdn.net/weixin_40898246/article/details/120880414?spm=1001.2014.3001.5501"}],"title":"debezium to oracle 11g Realtime synchronization","date":"2021-11-21T09:24:31.000Z","tags":["data Integration"],"keywords":["Debeziium"],"description":"\u4f7f\u7528 debezium \u5bf9 oracle \u6570\u636e\u8fdb\u884c\u91c7\u96c6"},"prevItem":{"title":"Flink CDC 2.3.0 Announce","permalink":"/Bigdata_Blog_Website/en/blog/Flink CDC 2.3.0 Announce"},"nextItem":{"title":"Ambari Introduction and installation","permalink":"/Bigdata_Blog_Website/en/blog/Ambari \u5165\u95e8\u53ca\u5b89\u88c5"}},"content":"## \u7b2c1\u7ae0 debezium\u6982\u8ff0\\n\\n### 1.1 debezium\u662f\u4ec0\u4e48\\n\\n Debezium \u662f\u4e00\u7ec4\u5206\u5e03\u5f0f\u670d\u52a1\uff0c\u7528\u4e8e\u6355\u83b7\u6570\u636e\u5e93\u4e2d\u7684\u66f4\u6539\uff0c\u4ee5\u4fbf\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e9b\u66f4\u6539\u5e76\u5bf9\u5176\u505a\u51fa\u54cd\u5e94\u3002 Debezium \u5728\u66f4\u6539\u4e8b\u4ef6\u6d41\u4e2d\u8bb0\u5f55\u6bcf\u4e2a\u6570\u636e\u5e93\u8868\u4e2d\u7684\u6240\u6709\u884c\u7ea7\u66f4\u6539\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ea\u9700\u8bfb\u53d6\u8fd9\u4e9b\u6d41\u4ee5\u67e5\u770b\u66f4\u6539\u4e8b\u4ef6\u53d1\u751f\u7684\u76f8\u540c\u987a\u5e8f\u3002\\n \\n\x3c!--truncate--\x3e\\n\\n### 1.2 debezium\u7684\u4f9d\u8d56\\nDebezium \u6784\u5efa\u5728 Apache Kafka \u4e4b\u4e0a\uff0c\u5e76\u63d0\u4f9b\u4e0e Kafka Connect \u517c\u5bb9\u7684\u8fde\u63a5\u5668\uff0c\u7528\u4e8e\u76d1\u63a7\u7279\u5b9a\u7684\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u3002 Debezium \u5728 Kafka \u65e5\u5fd7\u4e2d\u8bb0\u5f55\u6570\u636e\u66f4\u6539\u7684\u5386\u53f2\u8bb0\u5f55\uff0c\u4ece\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u5b83\u4eec\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8f7b\u677e\u6b63\u786e\u4e14\u5b8c\u6574\u5730\u4f7f\u7528\u6240\u6709\u4e8b\u4ef6\u3002 \u5373\u4f7f\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u610f\u5916\u505c\u6b62\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u9519\u8fc7\u4efb\u4f55\u5185\u5bb9\uff1a\u5f53\u5e94\u7528\u7a0b\u5e8f\u91cd\u65b0\u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u7ee7\u7eed\u4f7f\u7528\u5b83\u505c\u6b62\u7684\u4e8b\u4ef6\u3002\\n\\n## \u7b2c2\u7ae0 \u73af\u5883\u642d\u5efa\\n### 2.1 \u6240\u9700\u8f6f\u4ef6\u53ca\u6d4b\u8bd5\u7248\u672c\\n\\njdk-8u211-linux-x64.tar.gz\\n\\napache-zookeeper-3.5.7-bin.tar.gz\\n\\nkafka_2.11-2.4.0.tgz\\n\\ndebezium-connector-oracle-1.7.0.Final-plugin.tar.gz\\n\\ninstantclient-basic-linux.x64-21.3.0.0.0.zip (oracle\u5ba2\u6237\u7aef)\\n\\noracle 11g R2\\n\\n### 2.2 \u6570\u636e\u5e93\u51c6\u5907\\n\uff081\uff09\u8bbe\u7f6eOracle LogMiner\u6240\u9700\u7684\u914d\u7f6e\\n\\n```\\n[root@tDataAnalysis01 config]# su - oracle\\n[oracle@tDataAnalysis01 config]$ sqlplus / as sysdba\\nSQL> alter system set db_recovery_file_dest_size = 10G;\\nSQL> shutdown immediate;\\nSQL> startup mount;\\nSQL> alter database archivelog;\\nSQL> alter database open;\\n```\\n\uff082\uff09\u4fdd\u8bc1Database log mode\u663e\u793a\u4e3aArchive Mode\\n\\n```\\nSQL> archive log list\\n```\\n\\n\uff083\uff09\u542f\u7528\u8865\u5145\u65e5\u5fd7\u8bb0\u5f55,\uff08\u6240\u6709\u8868\u90fd\u5f97\u6267\u884c\uff0c\u8868\u91cc\u987b\u81f3\u5c11\u4e00\u6761\u6570\u636e\uff09\\n\\n```\\nSQL> ALTER DATABASE add SUPPLEMENTAL LOG DATA ;\\nSQL> ALTER TABLE \u5e93.\u8868 ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS;\\n```\\n\\nDebezium Oracle\u8fde\u63a5\u5668\u8981\u6c42\u4f7f\u7528\u7279\u5b9a\u6743\u9650\u8bbe\u7f6e\u7528\u6237\u8d26\u53f7\uff0c\u4ee5\u4fbf\u8fde\u63a5\u5668\u6355\u83b7\u66f4\u591a\u4e8b\u4ef6\u3002\\n\\n```\\nCREATE TABLESPACE logminer_tbs DATAFILE \'/opt/oracle/oradata/ORCLCDB/logminer_tbs.dbf\'\\nSIZE 25M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;\\n\\nCREATE USER debezium IDENTIFIED BY 123456\\n    DEFAULT TABLESPACE TEST0\\n    QUOTA UNLIMITED ON TEST0;\\n \\n  GRANT CREATE SESSION TO debezium ;\\n  GRANT SELECT ON V_$DATABASE to debezium ;\\n  GRANT FLASHBACK ANY TABLE TO debezium ;\\n  GRANT SELECT ANY TABLE TO debezium ;\\n  GRANT SELECT_CATALOG_ROLE TO debezium ;\\n  GRANT EXECUTE_CATALOG_ROLE TO debezium ;\\n  GRANT SELECT ANY TRANSACTION TO debezium ;\\n\\n  GRANT CREATE TABLE TO debezium ;\\n  GRANT LOCK ANY TABLE TO debezium ;\\n  GRANT ALTER ANY TABLE TO debezium ;\\n  GRANT CREATE SEQUENCE TO debezium ;\\n \\n  GRANT EXECUTE ON DBMS_LOGMNR TO debezium ;\\n  GRANT EXECUTE ON DBMS_LOGMNR_D TO debezium ;\\n \\n  GRANT SELECT ON V_$LOG TO debezium ;\\n  GRANT SELECT ON V_$LOG_HISTORY TO debezium ;\\n  GRANT SELECT ON V_$LOGMNR_LOGS TO debezium ;\\n  GRANT SELECT ON V_$LOGMNR_CONTENTS TO debezium ;\\n  GRANT SELECT ON V_$LOGMNR_PARAMETERS TO debezium ;\\n  GRANT SELECT ON V_$LOGFILE TO debezium ;\\n  GRANT SELECT ON V_$ARCHIVED_LOG TO debezium ;\\n  GRANT SELECT ON V_$ARCHIVE_DEST_STATUS TO debezium ;\\n \\n  exit;\\n```\\n\\n### 2.3\u90e8\u7f72\u8fde\u63a5\u5668\\n\uff081\uff09\u8fdb\u5165\u5230oracle\u5ba2\u6237\u7aef\u76ee\u5f55\u4e2d\uff0c\u5c06xstreams.jar\u548cojbc8.jar\u590d\u5236\u5230kafka lib\u4e0b\uff0c\u5e76\u5206\u53d1\u7ed902\uff0c03\u4e24\u53f0\u673a\u5668\u3002\\n\\n```\\n[root@tDataAnalysis01 ~]# cd /opt/oracle/ instantclient_21_3/\\n[root@tDataAnalysis01 instantclient_21_3]# cp xstreams.jar /opt/module/kafka_2.11-2.4.0/libs/\\n[root@tDataAnalysis01 instantclient_21_3]# cp ojdbc8.jar /opt/module/kafka_2.11-2.4.0/libs/\\n[root@tDataAnalysis01 instantclient_21_3]# scp xstreams.jar tDataAnalysis02:/opt/module/kafka_2.11-2.4.0/libs/\\n[root@tDataAnalysis01 instantclient_21_3]# scp ojdbc8.jar tDataAnalysis02:/opt/module/kafka_2.11-2.4.0/libs/\\n[root@tDataAnalysis01 instantclient_21_3]# scp xstreams.jar tDataAnalysis03:/opt/module/kafka_2.11-2.4.0/libs/\\n[root@tDataAnalysis01 instantclient_21_3]# scp ojdbc8.jar tDataAnalysis03:/opt/module/kafka_2.11-2.4.0/libs/\\n```\\n\\n\uff082\uff09\u589e\u52a0LD_LIBRARY_PATH\u73af\u5883\u53d8\u91cf\uff0c\u6307\u5411oracle client\u8def\u5f84(\u6bcf\u4e2a\u8282\u70b9\u90fd\u914d\u7f6e)\\n\\n```\\n[root@tDataAnalysis01 instantclient_21_3]# vim /etc/profile\\nexport LD_LIBRARY_PATH=/opt/oracle/instantclient_21_3\\n[root@tDataAnalysis01 instantclient_21_3]# source /etc/profile\\n```\\n\\n\uff083\uff09\u521b\u5efakafka plugins\u6587\u4ef6\u5939\\n\\n```\\n[root@tDataAnalysis01 software]# mkdir -p /usr/local/share/kafka/plugins/\\n```\\n\\n\uff084\uff09\u4e0a\u4f20debezium-connector-oracle-1.7.0.Final-plugin.tar.gz\\n\uff0c\u89e3\u538b\u5230kafka plugins\u76ee\u5f55\\n\\n```\\n[root@tDataAnalysis01 software]# tar -zxvf debezium-connector-oracle-1.7.0.Final-plugin.tar.gz -C /usr/local/share/kafka/plugins/\\n```\\n\\n\uff085\uff09\u518d\u6b21\u4fee\u6539kafka\u4e0b\u7684connect-distributed.properties\u6587\u4ef6\uff0c\u6dfb\u52a0plugins\u8def\u5f84\\n\\n```\\n[root@tDataAnalysis01 software]# cd /opt/module/kafka_2.11-2.4.0/config/\\n[root@tDataAnalysis01 config]# vim connect-distributed.properties \\nplugin.path=/usr/local/share/kafka/plugins/\\n```\\n\\n\uff086\uff09\u5206\u53d1plugins\u6587\u4ef6\u5939,\u5206\u53d1connect-distributed.properties\\n\\n```\\n[root@tDataAnalysis01 config]# scp -r /usr/local/share/kafka/  tDataAnalysis02:/usr/local/share/\\n[root@tDataAnalysis01 config]# scp -r /usr/local/share/kafka/  tDataAnalysis03:/usr/local/share/\\n[root@tDataAnalysis01 config]# scp connect-distributed.properties  tDataAnalysis02:/opt/module/kafka_2.11-2.4.0/config/\\n[root@tDataAnalysis01 config]# scp connect-distributed.properties  tDataAnalysis03:/opt/module/kafka_2.11-2.4.0/config/\\n```\\n\\n\uff087\uff09\u542f\u52a8kafka connector\\n\\n```\\n[root@tDataAnalysis01 kafka_2.11-2.4.0]# bin/connect-distributed.sh -daemon config/connect-distributed.properties\\n[root@tDataAnalysis02 kafka_2.11-2.4.0]# bin/connect-distributed.sh -daemon config/connect-distributed.properties\\n[root@tDataAnalysis03 kafka_2.11-2.4.0]# bin/connect-distributed.sh -daemon config/connect-distributed.properties\\n```\\n\\n\uff088\uff09\u67e5\u770b\u8fdb\u7a0b\\n\\n```\\n25010 Kafka\\n25555 ConnectDistributed\\n```\\n\\n\\n\\n## \u7b2c3\u7ae0\u542f\u52a8Debezium\\n\\n### 3.1 \u6d4b\u8bd5\u4efb\u52a1\u542f\u52a8\\n\\n```powershell\\ncurl -H \\"Content-Type: application/json\\" -X POST -d  \'{\\n       \\"name\\" : \\"oracle-connector\\",\\n       \\"config\\" : {\\n           \\"connector.class\\" : \\"io.debezium.connector.oracle.OracleConnector\\",\\n           \\"database.hostname\\" : \\"xxx.xxx.16.53\\",\\n           \\"database.port\\" : \\"1522\\",\\n           \\"database.user\\" : \\"debezium\\",\\n           \\"database.password\\" : \\"123456\\",\\n           \\"database.dbname\\": \\"ORCL\\",\\n           \\"database.server.name\\" : \\"orcl6\\",\\n           \\"database.history.kafka.topic\\" : \\"schema-changes.inventory5\\",\\n           \\"database.history.kafka.bootstrap.servers\\" : \\"tDataAnalysis01:9092,tDataAnalysis02:9092,tDataAnalysis03:9092\\",\\n           \\"snapshot.mode\\" : \\"initial\\",\\n           \\"schema.include.list\\" : \\"c##HAHA123\\",\\n           \\"table.include.list\\" : \\"c##HAHA123.CIRCLE\\",\\n           \\"database.oracle.version\\": \\"11\\", \\n           \\"database.tablename.case.insensitive\\": \\"false\\",\\n           \\"decimal.handling.mode\\" : \\"string\\"\\n }\\n}\' http://tDataAnalysis01:8083/connectors\\n```\\n\\n\\n**\u6d4b\u8bd5\u4efb\u52a1\u8fd9\u91cc\u6211\u4f7f\u7528\u4e86\u521d\u59cb\u5316\u5feb\u7167**\\n\\n\u67e5\u770bkafka topic\\n\\n```bash\\nbin/kafka-topics.sh --bootstrap-server tDataAnalysis01:9092 --list\\nFlinkError\\n__consumer_offsets\\nconnect-oracle-configs\\nconnect-oracle-offsets\\nconnect-oracle-status\\nflumeError\\nmyTest\\norcl6.C__HAHA123.CIRCLE\\nschema-changes.inventory5\\n```\\n\\n\u67e5\u770bconnect\u72b6\u6001\\n\\n```bash\\ncurl -H \\"Accept:application/json\\" tDataAnalysis01:8083/connectors/\\n[\\"oracle-connector\\"][root@tDataAnalysis02 kafka]#\\n```\\n\\n\u63d2\u5165\u6570\u636e\u540e\\n\\n\u6d88\u8d39topic\\n\\n```bash\\nbin/kafka-console-consumer.sh --bootstrap-server tDataAnalysis01:9092 --topic orcl6.C__HAHA123.CIRCLE --from-beginning\\n```\\n\\n\\n\\n\u6570\u636e\u683c\u5f0f\\n\\n```bash\\n{\\n    \\"schema\\": {\\n        \\"type\\": \\"struct\\", \\n        \\"fields\\": [\\n            {\\n                \\"type\\": \\"struct\\", \\n                \\"fields\\": [\\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"SERIALNO\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"FILEPATH\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"PARTID\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"STAFFNO\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"int64\\", \\n                        \\"optional\\": false, \\n                        \\"name\\": \\"io.debezium.time.Timestamp\\", \\n                        \\"version\\": 1, \\n                        \\"field\\": \\"RECORDTIME\\"\\n                    }\\n                ], \\n                \\"optional\\": true, \\n                \\"name\\": \\"orcl6.C__HAHA123.CIRCLE.Value\\", \\n                \\"field\\": \\"before\\"\\n            }, \\n            {\\n                \\"type\\": \\"struct\\", \\n                \\"fields\\": [\\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"SERIALNO\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"FILEPATH\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"PARTID\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"STAFFNO\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"int64\\", \\n                        \\"optional\\": false, \\n                        \\"name\\": \\"io.debezium.time.Timestamp\\", \\n                        \\"version\\": 1, \\n                        \\"field\\": \\"RECORDTIME\\"\\n                    }\\n                ], \\n                \\"optional\\": true, \\n                \\"name\\": \\"orcl6.C__HAHA123.CIRCLE.Value\\", \\n                \\"field\\": \\"after\\"\\n            }, \\n            {\\n                \\"type\\": \\"struct\\", \\n                \\"fields\\": [\\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"version\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"connector\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"name\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"int64\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"ts_ms\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": true, \\n                        \\"name\\": \\"io.debezium.data.Enum\\", \\n                        \\"version\\": 1, \\n                        \\"parameters\\": {\\n                            \\"allowed\\": \\"true,last,false\\"\\n                        }, \\n                        \\"default\\": \\"false\\", \\n                        \\"field\\": \\"snapshot\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"db\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": true, \\n                        \\"field\\": \\"sequence\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"schema\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"table\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": true, \\n                        \\"field\\": \\"txId\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": true, \\n                        \\"field\\": \\"scn\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": true, \\n                        \\"field\\": \\"commit_scn\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": true, \\n                        \\"field\\": \\"lcr_position\\"\\n                    }\\n                ], \\n                \\"optional\\": false, \\n                \\"name\\": \\"io.debezium.connector.oracle.Source\\", \\n                \\"field\\": \\"source\\"\\n            }, \\n            {\\n                \\"type\\": \\"string\\", \\n                \\"optional\\": false, \\n                \\"field\\": \\"op\\"\\n            }, \\n            {\\n                \\"type\\": \\"int64\\", \\n                \\"optional\\": true, \\n                \\"field\\": \\"ts_ms\\"\\n            }, \\n            {\\n                \\"type\\": \\"struct\\", \\n                \\"fields\\": [\\n                    {\\n                        \\"type\\": \\"string\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"id\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"int64\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"total_order\\"\\n                    }, \\n                    {\\n                        \\"type\\": \\"int64\\", \\n                        \\"optional\\": false, \\n                        \\"field\\": \\"data_collection_order\\"\\n                    }\\n                ], \\n                \\"optional\\": true, \\n                \\"field\\": \\"transaction\\"\\n            }\\n        ], \\n        \\"optional\\": false, \\n        \\"name\\": \\"orcl6.C__HAHA123.CIRCLE.Envelope\\"\\n    }, \\n    \\"payload\\": {\\n        \\"before\\": null, \\n        \\"after\\": {\\n            \\"SERIALNO\\": \\"1209\\", \\n            \\"FILEPATH\\": \\"vqrouj\\", \\n            \\"PARTID\\": \\"5606\\", \\n            \\"STAFFNO\\": \\"YTCZ060002\\", \\n            \\"RECORDTIME\\": 1329061915000\\n        }, \\n        \\"source\\": {\\n            \\"version\\": \\"1.7.0.Final\\", \\n            \\"connector\\": \\"oracle\\", \\n            \\"name\\": \\"orcl6\\", \\n            \\"ts_ms\\": 1634660571000, \\n            \\"snapshot\\": \\"false\\", \\n            \\"db\\": \\"ORCL\\", \\n            \\"sequence\\": null, \\n            \\"schema\\": \\"C##HAHA123\\", \\n            \\"table\\": \\"CIRCLE\\", \\n            \\"txId\\": \\"05000300282e0000\\", \\n            \\"scn\\": \\"19202446\\", \\n            \\"commit_scn\\": \\"19202478\\", \\n            \\"lcr_position\\": null\\n        }, \\n        \\"op\\": \\"c\\", \\n        \\"ts_ms\\": 1634631840937, \\n        \\"transaction\\": null\\n    }\\n}\\n```\\n\\n\\n\u5220\u9664connect \\n\\n```bash\\ncurl -v -X DELETE http://tDataAnalysis01:8083/connectors/oracle-connector\\n```\\n\\n\\n\u8bbf\u95ee 8083\u7aef\u53e3\u53ef\u67e5\u770b connect\u72b6\u6001\\n\\n```bash\\ntDataAnalysis03:8083/connectors/oracle-connector/status\\n```\\n\\n\\n### 3.2 Oracle\u5f52\u6863\u65e5\u5fd7\u8fc7\u591a\u89e3\u51b3(\u78c1\u76d8\u5f88\u5927\u53ef\u4ee5\u5ffd\u7565)\\n\\n\u6d4b\u8bd5\u4e2d\u56e0\u4e3a\u65e5\u5fd7\u5199\u5165\u8fc7\u5feb\u95ee\u9898\u5bfc\u81f4\u78c1\u76d8\u88ab\u5199\u6ee1\uff0c\u4f7f\u5f97Oracle\u6570\u636e\u5e93\u6781\u4e0d\u7a33\u5b9a\\n\\n\u65e5\u5fd7\u4e0d\u5141\u8bb8\u7269\u7406\u5220\u9664\uff0c\u5e94\u901a\u8fc7rman target /\\n\\n\u6267\u884c \\n\\n```bash\\ndelete noprompt archivelog until time \'sysdate-1/24\';\\n```\\n\\n\u811a\u672c\u5904\u7406\\n\\n```bash\\n# \u7531\u4e8e\u8fde\u63a5\u5668\u662f\u4f9d\u8d56\u4e8eOracle\u7684\u5f52\u6863\u65e5\u5fd7\u505a\u7684\u5b9e\u65f6\u540c\u6b65\\n# \u5b58\u5728\u5f52\u6863\u65e5\u5fd7\u6491\u7206\u78c1\u76d8\u7684\u95ee\u9898\\n#! /bin/bash\\nexec >> /xxx/oracle/oracle_log/del_arch`date +%F-%H`.log #\u8bb0\u5f55\u811a\u672c\u65e5\u5fd7\\n$ORACLE_HOME/bin/rman target / <<EOF\\n#\u68c0\u67e5\u5f52\u6863\u65e5\u5fd7\\ncrosscheck archivelog all;\\n#\u5220\u9664\u6240\u6709\u8fc7\u671f\u65e5\u5fd7\\ndelete noprompt expired archivelog all;\\n#\u5220\u9664\u4e00\u4e2a\u5c0f\u65f6\u524d\u7684\u5f52\u6863\u65e5\u5fd7\\ndelete noprompt archivelog until time \'sysdate-1/24\';\\nexit;\\nEOF\\n```\\n### 3.3 \u65b0\u589e\u8868\u95ee\u9898\\n\\n#### 3.3.1 \u7b2c\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\\n\\n\u7b2c\u4e00\u6b21\u5b89\u88c5Debezium,\u53ef\u4ee5\u76d1\u63a7\u5230\u6570\u636e\u5e93\u4e2d\u8868\u7684\u521d\u59cb\u8868\uff0c\u4f46\u662f\u540e\u7eed\u518d\u5efa\u8868\u5e76\u4e14\u589e\u52a0SUPPLEMENTAL LOG DATA\uff0cConnector\u662f\u65e0\u6cd5\u6355\u83b7\u5230\u7684\u3002\\n\u89e3\u51b3\u65b9\u6848\uff1a\\n\u518d\u63d0\u4ea4\u4e00\u4e2a\u65b0\u7684connecotr,\u7528\u6765\u76d1\u63a7\u540e\u7eed\u521b\u5efa\u7684\u8868\\n\\n```bash\\ncurl -H \\"Content-Type: application/json\\" -X POST -d  \'{\\n       \\"name\\" : \\"oracle-connector2\\",\\n       \\"config\\" : {\\n           \\"connector.class\\" : \\"io.debezium.connector.oracle.OracleConnector\\",\\n           \\"database.hostname\\" : \\"xxx.xxx.16.53\\",\\n           \\"database.port\\" : \\"1522\\",\\n           \\"database.user\\" : \\"debezium\\",\\n           \\"database.password\\" : \\"123456\\",\\n           \\"database.dbname\\": \\"ORCL\\",\\n           \\"database.server.name\\" : \\"orcl7\\",\\n           \\"database.history.kafka.topic\\" : \\"schema-changes.inventory6\\",\\n           \\"database.history.kafka.bootstrap.servers\\" : \\"tDataAnalysis01:9092,tDataAnalysis02:9092,tDataAnalysis03:9092\\",\\n           \\"snapshot.mode\\" : \\"initial\\",\\n           \\"schema.include.list\\" : \\"c##HAHA123\\",\\n           \\"table.include.list\\" : \\"c##HAHA123.CIRCLE2\\",\\n           \\"database.oracle.version\\": \\"11\\", \\n           \\"database.tablename.case.insensitive\\": \\"false\\",\\n           \\"decimal.handling.mode\\" : \\"string\\"\\n }\\n}\' http://tDataAnalysis01:8083/connectors\\n```\\n\\n\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570table.include.list\u6307\u5b9a\u6240\u9700\u7684\u76d1\u63a7\u7684\u8868\uff0c\u6216\u8005\u4f7f\u7528table.exclude.list\u6307\u5b9a\u4e0d\u9700\u8981\u76d1\u63a7\u7684\u8868\uff0c\u4e8c\u8005\u53ea\u80fd\u9009\u4e00\u4e2a\u4f7f\u7528(\u8fd9\u4e2a\u65b9\u6848\u5b9e\u6d4b\u901a\u8fc7\uff0c\u53ef\u4ee5\u6b63\u5e38\u6536\u6570\u636e)\\n\\n\u67e5\u770b\u8fde\u63a5\u5668\u72b6\u6001\uff1a\\n\\n```bash\\ncurl -H \\"Accept:application/json\\" tDataAnalysis01:8083/connectors/\\n[\\"oracle-connector2\\",\\"oracle-connector\\"][root@tDataAnalysis02 kafka]#\\n```\\n\\n#### 3.3.2\u7b2c\u4e8c\u79cd\u89e3\u51b3\u65b9\u6848\\n\\n*\u6700\u65b0\u6d4b\u8bd5 \u6839\u636e\u793e\u533a\u56de\u590d\\n\\n![\u5728\u8fd9\u91cc\u63d2\u5165\u56fe\u7247\u63cf\u8ff0](https://img-blog.csdnimg.cn/910a6a1d318d4c11b557b36d2a0a91b0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bifQ29kZXJz,size_20,color_FFFFFF,t_70,g_se,x_16)\\n**\u65b0\u8868\u53ef\u901a\u8fc7\u505c\u6b62\u539f\u6709\u4efb\u52a1\uff0c\u4fee\u6539\u914d\u7f6e\u53c2\u6570\uff0c\u91cd\u65b0\u542f\u52a8\u4efb\u52a1\uff0c\u65e7\u8868\u6570\u636e\u4e0d\u53d7\u5f71\u54cd\uff0c\u5e95\u5c42\u5b58\u6709\u504f\u79fb\u91cf\uff0c\u6570\u636e\u540c\u6b65\u53ef\u4ee5\u8ffd\u6eaf \u5feb\u7167\u65b9\u5f0f\u4e3a schema_only**\\n\\n\u5efa\u8bae\uff1a \u6211\u4eec\u7684oracle\u6570\u636e\u5e93\u672c\u8eab\u6570\u636e\u91cf\u5b58\u50a8\u91cf\u5e94\u8be5\u662f\u4e0d\u5c0f\u7684\uff0c\u6211\u5728\u6d4b\u8bd5\u4e2d\u4e3a\u65b9\u4fbf\u5feb\u7167\u4e3a\u521d\u59cb\u5316\uff0c\u751f\u4ea7\u4e2d\u5efa\u8baeschema_only \u4e3a\u589e\u91cf\u8bfb\u53d6\u4ee5\u907f\u514d\u4efb\u52a1\u957f\u65f6\u95f4\u8fd0\u884c\u9020\u6210\u5931\u8d25\u3002\\n\\n### 3.4 \u6ce8\u610f\u4e8b\u9879\\n\\n#### 3.4.1\u914d\u7f6e Debezium \u4e3b\u9898\\n\\nDebezium \u4f7f\u7528\uff08\u901a\u8fc7 Kafka Connect \u6216\u76f4\u63a5\uff09\u591a\u4e2a\u4e3b\u9898\u6765\u5b58\u50a8\u6570\u636e\u3002 \u8fd9\u4e9b\u4e3b\u9898\u5fc5\u987b\u7531\u7ba1\u7406\u5458\u6216 Kafka \u672c\u8eab\u901a\u8fc7\u542f\u7528\u4e3b\u9898\u7684\u81ea\u52a8\u521b\u5efa\u6765\u521b\u5efa\u3002 \\n\u6709\u4e00\u4e9b\u9002\u7528\u4e8e\u4e3b\u9898\u7684\u9650\u5236\u548c\u5efa\u8bae\uff1a\\n\\n\u6570\u636e\u5e93\u5386\u53f2\u4e3b\u9898\uff08\u9002\u7528\u4e8e MySQL \u548c SQL Server \u7684 Debezium \u8fde\u63a5\u5668\uff09\\n\u65e0\u9650\uff08\u6216\u975e\u5e38\u957f\uff09\u4fdd\u7559\uff08\u65e0\u538b\u7f29\uff01\uff09\\n\u751f\u4ea7\u7684\u590d\u5236\u56e0\u5b50\u81f3\u5c11\u4e3a 3\\n\u5355\u5206\u533a\\n\\n#### 3.4.2\u5176\u4ed6\u4e3b\u9898\\n\\n\u53ef\u9009\u5730\uff0c\u542f\u7528\u65e5\u5fd7\u538b\u7f29\uff08\u5982\u679c\u60a8\u5e0c\u671b\u53ea\u4fdd\u7559\u7ed9\u5b9a\u8bb0\u5f55\u7684\u6700\u540e\u4e00\u4e2a\u66f4\u6539\u4e8b\u4ef6\uff09\uff1b \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e94\u914d\u7f6e Apache Kafka \u4e2d\u7684 min.compaction.lag.ms \u548c delete.retention.ms \u4e3b\u9898\u7ea7\u522b\u8bbe\u7f6e\uff0c\u4ee5\u4fbf\u6d88\u8d39\u8005\u6709\u8db3\u591f\u7684\u65f6\u95f4\u63a5\u6536\u6240\u6709\u4e8b\u4ef6\u5e76\u5220\u9664\u6807\u8bb0\uff1b \u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e9b\u503c\u5e94\u5927\u4e8e\u60a8\u9884\u671f\u7684\u63a5\u6536\u5668\u8fde\u63a5\u5668\u7684\u6700\u5927\u505c\u673a\u65f6\u95f4\uff0c\u4f8b\u5982 \u66f4\u65b0\u5b83\u4eec\u65f6\\n\u5728\u751f\u4ea7\u4e2d\u590d\u5236\\n\\n#### 3.4.3\u5355\u5206\u533a\\n\\n\u60a8\u53ef\u4ee5\u653e\u5bbd\u5355\u5206\u533a\u89c4\u5219\uff0c\u4f46\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5904\u7406\u6570\u636e\u5e93\u4e2d\u4e0d\u540c\u884c\u7684\u4e71\u5e8f\u4e8b\u4ef6\uff08\u5355\u884c\u7684\u4e8b\u4ef6\u4ecd\u7136\u662f\u5b8c\u5168\u6709\u5e8f\u7684\uff09\u3002 \u5982\u679c\u4f7f\u7528\u591a\u4e2a\u5206\u533a\uff0cKafka\u9ed8\u8ba4\u4f1a\u901a\u8fc7\u5bf9key\u8fdb\u884chash\u6765\u786e\u5b9a\u5206\u533a\u3002 \u5176\u4ed6\u5206\u533a\u7b56\u7565\u9700\u8981\u4f7f\u7528 SMT \u4e3a\u6bcf\u4e2a\u8bb0\u5f55\u8bbe\u7f6e\u5206\u533a\u53f7\u3002\\n\u6709\u5173\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u9898\u81ea\u52a8\u521b\u5efa\uff08\u81ea Kafka Connect 2.6.0 \u8d77\u53ef\u7528\uff09\uff0c\u8bf7\u53c2\u9605\u81ea\u5b9a\u4e49\u4e3b\u9898\u81ea\u52a8\u521b\u5efa\\n\\n**\u5b98\u7f51\u5bf9\u4e8e\u6570\u636e\u5e93\u5386\u53f2\u4e3b\u9898\u867d\u53ea\u63d0\u5230MySQL\uff0cSQL server\uff0c\u4f46\u662f\u5b9e\u9645\u6d4b\u8bd5\u4e2d\u5982\u679cschema-changes.inventory5 \u4e3b\u9898\u88ab\u8bef\u5220\uff0cconnect\u5c06\u62a5\u9519\uff0c\u53ea\u6709\u5c06ddl\u8bed\u53e5\u91cd\u65b0\u63d2\u5165\u8fdb\u53bb\uff0c\u624d\u53ef\u4ee5\u6062\u590d\u6b63\u5e38\uff0c\u4e14oracle \u8fde\u63a5\u5668\u5feb\u7167\u76ee\u524d\u53ea\u652f\u6301schema_only\uff0cinitial \u3002\u4e34\u65f6\u5feb\u7167\u548c\u589e\u91cf\u5feb\u7167\u5c1a\u5728\u5b75\u5316\u4e2d**\\n\\n#### 3.4.4\u5173\u4e8e\u5bf9oracle \u6570\u636e\u5e93\u538b\u529b\u7684\u95ee\u9898\\n\\n\\n![\u793e\u533a\u5927\u4f6c\u7684\u56de\u590d](https://img-blog.csdnimg.cn/286d681d969542f88248bd3c5e622794.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I-c6bifQ29kZXJz,size_20,color_FFFFFF,t_70,g_se,x_16)\\n\\n### 3.5 \u9519\u8bef\u5904\u7406\\n\\n\u5982\u51fa\u73b0\u4e0d\u80fd\u8bc6\u522boracle\u7248\u672c\u6216\u5176\u4ed6\u9519\u8bef\uff0c\u8bf7\u524d\u5f80xx01(post\u8bf7\u6c42\u540e\u7f00\u4e3a01)\u8282\u70b9\u6240\u5728Kafka logs\u76ee\u5f55\\n\u6267\u884c\\n\\n```bash\\ntail -200 connectDistributed.out\\n```\\n\\n\\n\u67e5\u770b\u5177\u4f53\u65e5\u5fd7\\n\\n#### 3.5.1\u4e0d\u80fd\u8bc6\u522bjdbc\u9a71\u52a8\uff1f\\n\\n\u5148\u53bb\u770boracle\u914d\u7f6e\uff0c\u786e\u4fddhost\uff0cport\uff0csid\u7b49\u65e0\u8bef\uff0c\u53e6\u5916\u5224\u65adojdbc8.jar\u662f\u5426\u88ab\u8bc6\u522b\u5230\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u91cd\u542fKafka \u4ee5\u53caKafka connect \u6216\u76f4\u63a5\u65b0\u88c5\u4e00\u5957Kafka\u96c6\u7fa4\u8fdb\u884c\u9a8c\u8bc1\u3002\\n\\n#### 3.5.2 Kafka\u4ee5\u53caKafka connect\u91cd\u542f\u95ee\u9898\\n\\nKafka(\u66b4\u529b\u6740\u6b7b\uff0c\u91cd\u542f\u4f1a\u6709\u51b2\u7a81) \u4e0d\u5141\u8bb8kill -9 \u6740\u6389\u8fdb\u7a0b \u5e94\u4f7f\u7528\u547d\u4ee4\u505c\u6b62\uff0cKafka\u901a\u5e38\u5173\u95ed\u8f83\u6162\uff0c\u786e\u8ba4\u96c6\u7fa4Kafka\u5173\u95ed\u540e\u518d\u91cd\u542f \u5404\u4e2a\u8282\u70b9\u6267\u884c\u505c\u6b62\u6216\u91cd\u542f\uff0ccdh\u7248\u5728\u63a7\u5236\u53f0\u542f\u505c\u5373\u53ef\u3002\\n\\n```bash\\n/opt/module/kafka/bin/kafka-server-stop.sh -daemon /opt/module/kafka/config/server.properties\\n```\\n\\n\u5982\u9700\u91cd\u542f Kafka connect\u670d\u52a1\\nKafka connect kill -9 \u6740\u6389\u6240\u6709\u8282\u70b9\u5373\u53ef\\n\u542f\u52a8\u547d\u4ee4\\n\\n```bash\\n/opt/module/kafka/bin/connect-distributed.sh -daemon /opt/module/kafka/config/connect-distributed.properties \\n```\\n\\n\\n\\n## \u53c2\u8003\\n\\n[https://debezium.io/documentation/reference/1.7/connectors/oracle.html#oracle-overview](https://debezium.io/documentation/reference/1.7/connectors/oracle.html#oracle-overview%20%20%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BOracle%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88.doc%20%28debezium%20to%20oracle%2019%20c%29%20%20https://blog.51cto.com/tiany/1552783%20%20https://www.codeleading.com/article/64945986138/%20%20https://my.oschina.net/dacoolbaby/blog/4320036%20%20https://my.oschina.net/dacoolbaby/blog/3191882%20%20https://www.cnblogs.com/yaowentao/p/14944739.html)\\n\\n\u5c1a\u7845\u8c37\u5927\u6570\u636e\u6280\u672f\u4e4bOracle\u5b9e\u65f6\u540c\u6b65\u65b9\u6848.doc (debezium to oracle 19 c)\\n\\n[https://blog.51cto.com/tiany/1552783](https://blog.51cto.com/tiany/1552783)\\n\\n[https://www.codeleading.com/article/64945986138/](https://www.codeleading.com/article/64945986138/)\\n\\n[https://my.oschina.net/dacoolbaby/blog/4320036](https://my.oschina.net/dacoolbaby/blog/4320036)\\n\\n[https://my.oschina.net/dacoolbaby/blog/3191882](https://my.oschina.net/dacoolbaby/blog/3191882)\\n\\n[https://www.cnblogs.com/yaowentao/p/14944739.html](https://www.cnblogs.com/yaowentao/p/14944739.html)"},{"id":"/Ambari \u5165\u95e8\u53ca\u5b89\u88c5","metadata":{"permalink":"/Bigdata_Blog_Website/en/blog/Ambari \u5165\u95e8\u53ca\u5b89\u88c5","source":"@site/i18n/en/docusaurus-plugin-content-blog/Ambari \u5165\u95e8\u53ca\u5b89\u88c5.md","title":"Ambari Introduction and installation","description":"\u4f7f\u7528 Ambari \u5bf9 apache \u6846\u67b6\u8fdb\u884c\u7ba1\u7406","date":"2020-11-07T18:11:11.000Z","formattedDate":"November 7, 2020","tags":[{"label":"Management platform","permalink":"/Bigdata_Blog_Website/en/blog/tags/management-platform"}],"readingTime":17.495,"hasTruncateMarker":true,"authors":[{"name":"\u9752\u6da9\u7684\u8292\u679c\u6c41","url":"https://blog.csdn.net/weixin_40898246/article/details/109175222?spm=1001.2014.3001.5501"}],"frontMatter":{"authors":[{"name":"\u9752\u6da9\u7684\u8292\u679c\u6c41","url":"https://blog.csdn.net/weixin_40898246/article/details/109175222?spm=1001.2014.3001.5501"}],"title":"Ambari Introduction and installation","date":"2020-11-07T18:11:11.000Z","tags":["Management platform"],"keywords":["Ambari"],"description":"\u4f7f\u7528 Ambari \u5bf9 apache \u6846\u67b6\u8fdb\u884c\u7ba1\u7406"},"prevItem":{"title":"debezium to oracle 11g Realtime synchronization","permalink":"/Bigdata_Blog_Website/en/blog/debezium to oracle 11g \u5b9e\u65f6\u540c\u6b65"}},"content":"## \u4ec0\u4e48\u662f Ambari\\n\\nApache Ambari \u9879\u76ee\u65e8\u5728\u901a\u8fc7\u5f00\u53d1\u7528\u4e8e\u914d\u7f6e\uff0c\u7ba1\u7406\u548c\u76d1\u63a7 Apache Hadoop \u96c6\u7fa4\u7684\u8f6f\u4ef6\u6765\u7b80\u5316 Hadoop \u7ba1\u7406\u3002Ambari \u63d0\u4f9b\u4e86\u4e00\u4e2a\u76f4\u89c2\uff0c\u6613\u7528\u7684 Hadoop \u7ba1\u7406 Web UI\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## Ambari \u7684\u529f\u80fd\\n\\n\u63d0\u4f9b\u4e86\u8de8\u4efb\u610f\u6570\u91cf\u7684\u4e3b\u673a\u5b89\u88c5 Hadoop \u670d\u52a1\u7684\u5206\u6b65\u5411\u5bfc\u3002\\n\\n\u5904\u7406\u7fa4\u96c6\u7684 Hadoop \u670d\u52a1\u914d\u7f6e\u3002\\n\\n\u63d0\u4f9b\u96c6\u4e2d\u7ba1\u7406\uff0c\u7528\u4e8e\u5728\u6574\u4e2a\u96c6\u7fa4\u4e2d\u542f\u52a8\uff0c\u505c\u6b62\u548c\u91cd\u65b0\u914d\u7f6e Hadoop \u670d\u52a1\u3002\\n\\n\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4eea\u8868\u677f\uff0c\u7528\u4e8e\u76d1\u63a7 Hadoop \u96c6\u7fa4\u7684\u8fd0\u884c\u72b6\u51b5\u548c\u72b6\u6001\u3002\\n\\n\u5229\u7528 Ambari \u6307\u6807\u7cfb\u7edf\u8fdb\u884c\u6307\u6807\u6536\u96c6\u3002\\n\\n\u5229\u7528 Ambari Alert Framework \u8fdb\u884c\u7cfb\u7edf\u8b66\u62a5\uff0c\u5e76\u5728\u9700\u8981\u60a8\u6ce8\u610f\u65f6\u901a\u77e5\u60a8\uff08\u4f8b\u5982\uff0c\u8282\u70b9\u51fa\u73b0\u6545\u969c\uff0c\u5269\u4f59\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\u7b49\uff09\u3002\\n\\n# \u73af\u5883\u51c6\u5907\\n\\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u64cd\u4f5c\u4e09\u53f0\u673a\u5668\u90fd\u9700\u8981\u8fdb\u884c\\n\\n## \u865a\u62df\u673a\u51c6\u5907\\n\\n\\n\u514b\u9686\u4e09\u53f0\u865a\u62df\u673a\uff08hadoop102\u3001hadoop103\u3001hadoop104\uff09\uff0c\u914d\u7f6e\u597d\u5bf9\u5e94\u4e3b\u673a\u7684\u7f51\u7edc IP\u3001\u4e3b\u673a\u540d\u79f0\u3001\u5173\u95ed\u9632\u706b\u5899\u3002\\n\\n\\n```\\n[root@hadoop102 ~]# chkconfig iptables off\\n[root@hadoop102 ~]# service iptables stop\\n[root@hadoop102 ~]# chkconfig --list iptables\\niptables        0:\u5173\u95ed  1:\u5173\u95ed  2:\u5173\u95ed  3:\u5173\u95ed  4:\u5173\u95ed  5:\u5173\u95ed  6:\u5173\u95ed\\n\\n```\\n\\n## \u5173\u95ed SELINUX\\n```\\n[root@hadoop102 ~]# vim /etc/sysconfig/selinux\\n```\\n\u5c06 SELINUX=enforcing \u6539\u4e3a SELINUX=disabled\\n\u6267\u884c\u8be5\u547d\u4ee4\u540e\u91cd\u542f\u673a\u5668\u751f\u6548\\n\\n## \u5b89\u88c5 JDK\\n\\n1\uff09\u5728 hadoop102 \u7684 /opt \u76ee\u5f55\u4e0b\u521b\u5efa module \u548c software \u6587\u4ef6\u5939\\n\\n```\\n[root@hadoop102 opt]# mkdir module\\n[root@hadoop102 opt]# mkdir software\\n\\n```\\n2\uff09\u7528 SecureCRT \u5c06 jdk-8u144-linux-x64.tar.gz \u5bfc\u5165\u5230 hadoop102 \u7684 /opt/software \u76ee\u5f55\u4e0b\\n3\uff09\u5728 Linux \u7cfb\u7edf\u4e0b\u7684 opt \u76ee\u5f55\u4e2d\u67e5\u770b\u8f6f\u4ef6\u5305\u662f\u5426\u5bfc\u5165\u6210\u529f\\n\\n```\\n[root@hadoop102 software]$ ls\\njdk-8u144-linux-x64.tar.gz\\n\\n```\\n\\n4\uff09\u89e3\u538b JDK \u5230 /opt/module \u76ee\u5f55\u4e0b\\n\\n```\\n[root@hadoop102 software]$ tar -zxvf jdk-8u144-linux-x64.tar.gz -C /opt/module/\\n```\\n\\n5\uff09\u914d\u7f6e JDK \u73af\u5883\u53d8\u91cf\\n\\n\uff081\uff09\u5148\u83b7\u53d6 JDK \u8def\u5f84\\n\\n```\\n[root@hadoop102 jdk1.8.0_144]$ pwd\\n/opt/module/jdk1.8.0_144\\n\\n```\\n\uff082\uff09\u6253\u5f00 /etc/profile \u6587\u4ef6\\n```\\n[root@hadoop102 software]$ vi /etc/profile\\n```\\n\u5728 profile \u6587\u4ef6\u672b\u5c3e\u6dfb\u52a0JDK\u8def\u5f84\\n```\\n#JAVA_HOME\\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\\nexport PATH=$PATH:$JAVA_HOME/bin\\n```\\n\uff083\uff09\u4fdd\u5b58\u540e\u9000\u51fa\\n\\n```\\n:wq\\n```\\n\\n\uff084\uff09\u8ba9\u4fee\u6539\u540e\u7684\u6587\u4ef6\u751f\u6548\\n\\n```\\n[root@hadoop102 jdk1.8.0_144]$ source /etc/profile\\n```\\n\\n6\uff09\u6d4b\u8bd5 JDK \u662f\u5426\u5b89\u88c5\u6210\u529f\\n\\n```\\n[root@hadoop102 jdk1.8.0_144]# java -version\\njava version \\"1.8.0_144\\"\\n\\n```\\n\\n7\uff09\u5c06 hadoop102 \u4e2d\u7684 JDK \u548c\u73af\u5883\u53d8\u91cf\u5206\u53d1\u5230 hadoop103\u3001hadoop104 \u4e24\u53f0\u4e3b\u673a\\n\\n```\\n[root@hadoop102 opt]# xsync /opt/module/\\n[root@hadoop102 opt]# xsync /etc/profile\\n\\n\u5206\u522b\u5728hadoop103\u3001hadoop104\u4e0asource\u4e00\u4e0b\\n[root@hadoop103 ~]$ source /etc/profile\\n[root@hadoop104 ~]# source /etc/profile\\n\\n```\\n\\n## SSH\u514d\u5bc6\u767b\u5f55\\n\\n\u914d\u7f6e hadoop102 \u5bf9 hadoop102\u3001hadoop103\u3001hadoop104 \u4e09\u53f0\u4e3b\u673a\u7684\u514d\u5bc6\u767b\u9646\u3002\\n\\n1\uff09\u751f\u6210\u516c\u94a5\u548c\u79c1\u94a5\uff1a\\n\\n```\\n[root@hadoop102 .ssh]$ ssh-keygen -t rsa\\n```\\n\u7136\u540e\u6572\uff08\u4e09\u4e2a\u56de\u8f66\uff09\uff0c\u5c31\u4f1a\u751f\u6210\u4e24\u4e2a\u6587\u4ef6 id_rsa\uff08\u79c1\u94a5\uff09\u3001id_rsa.pub\uff08\u516c\u94a5\uff09\\n\\n2\uff09\u5c06\u516c\u94a5\u62f7\u8d1d\u5230\u8981\u514d\u5bc6\u767b\u5f55\u7684\u76ee\u6807\u673a\u5668\u4e0a\\n\\n```\\n[root@hadoop102 .ssh]$ ssh-copy-id hadoop102\\n[root@hadoop102 .ssh]$ ssh-copy-id hadoop103\\n[root@hadoop102 .ssh]$ ssh-copy-id hadoop104\\n\\n```\\n## \u4fee\u6539 yum \u6e90\u4e3a\u963f\u91cc\u4e91\u955c\u50cf\\n\\n```\\n[root@hadoop102 yum.repos.d]# mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bk\\n\\n[root@hadoop102 yum.repos.d]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo\\n\\n//\u628a\u670d\u52a1\u5668\u7684\u5305\u4e0b\u8f7d\u5230\u672c\u5730\u7f13\u5b58\\n[root@hadoop102 yum.repos.d]# yum makecache\\n\\n```\\n## \u5b89\u88c5 ntp\\n\\n```\\n[root@hadoop102 ~]# yum install -y ntp\\n[root@hadoop102 ~]# chkconfig --list ntpd\\n[root@hadoop102 ~]# chkconfig ntpd on\\n[root@hadoop102 ~]# service ntpd start\\n\\n```\\n## \u5173\u95ed Linux \u7684 THP \u670d\u52a1\\n\\n\u5982\u679c\u4e0d\u5173\u95ed transparent_hugepage\uff0cHDFS \u4f1a\u56e0\u4e3a\u8fd9\u4e2a\u6027\u80fd\u4e25\u91cd\u53d7\u5f71\u54cd\u3002\\n\u5173\u95ed transparent_hugepage \u65b9\u6cd5\u662f\uff1a\\n\\n```\\n[root@hadoop102 ~]# vim /etc/grub.conf \\n\u6dfb\u52a0 transparent_hugepage=never\\n\\n[root@hadoop102 ~]# \\tvim /etc/rc.local\\n\\n\u6dfb\u52a0\uff1a\\nif test -f /sys/kernel/mm/transparent_hugepage/defrag; then\\n  echo never > /sys/kernel/mm/transparent_hugepage/defrag\\nfi\\nif test -f /sys/kernel/mm/transparent_hugepage/enabled; then\\n  echo never > /sys/kernel/mm/transparent_hugepage/enabled\\nfi\\nexit 0\\n\\n```\\n\u91cd\u542f\u4e4b\u540e\uff0c\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u68c0\u67e5\uff1a\\n\\n```\\n[root@hadoop102 yum.repos.d]# \\ncat /sys/kernel/mm/redhat_transparent_hugepage/enabled\\n\\nalways madvise [never]\\n\\n```\\n\\n\u6709 [never] \u5219\u8868\u793a THP \u88ab\u7981\u7528\\n\\n## \u914d\u7f6e UMASK\\n\\n\u8bbe\u5b9a\u7528\u6237\u6240\u521b\u5efa\u76ee\u5f55\u7684\u521d\u59cb\u6743\u9650\\n\\n```\\n\\n[root@hadoop102 ~]# umask 0022\\n\\n```\\n\\n## \u7981\u6b62\u79bb\u7ebf\u66f4\u65b0\\n```\\nvim /etc/yum/pluginconf.d/refresh-packagekit.conf\\n```\\n\u4fee\u6539\uff1aenabled=0\\n\\n# \u5b89\u88c5 Ambari \u96c6\u7fa4\\n\\n\u6ce8\u610f\uff1a\u4ee5\u4e0b\u64cd\u4f5c\u4e3b\u8282\u70b9\u64cd\u4f5c\u5373\u53ef\\n\\n## \u5236\u4f5c\u672c\u5730\u6e90\\n\\n\u5236\u4f5c\u672c\u5730\u6e90\u662f\u56e0\u4e3a\u5728\u7ebf\u5b89\u88c5Ambari\u592a\u6162\u3002\u5236\u4f5c\u672c\u5730\u6e90\u53ea\u9700\u5728\u4e3b\u8282\u70b9\u4e0a\u8fdb\u884c\u3002\\n\\n###  \u914d\u7f6e HTTPD \u670d\u52a1\\n\\n\u914d\u7f6e HTTPD \u670d\u52a1\u5230\u7cfb\u7edf\u5c42\u4f7f\u5176\u968f\u7cfb\u7edf\u81ea\u52a8\u542f\u52a8\\n\\n```\\n[root@hadoop102 ~]# chkconfig httpd on\\n[root@hadoop102 ~]# service httpd start\\n\\n```\\n\\n### \u5b89\u88c5\u5de5\u5177\\n\\n\u5b89\u88c5\u672c\u5730\u6e90\u5236\u4f5c\u76f8\u5173\u5de5\u5177\\n\\n```\\n[root@hadoop102 ~]# yum install yum-utils createrepo yum-plugin-priorities -y\\n[root@hadoop102 ~]# vim /etc/yum/pluginconf.d/priorities.conf\\n\\n```\\n\u6dfb\u52a0 gpgcheck=0\\n\\n### \u5c06\u4e0b\u8f7d\u7684 3 \u4e2a tar\u5305 \u89e3\u538b\\n\\n```\\n[root@hadoop102 software]# tar -zxvf /opt/software/ambari-2.5.0.3-centos6.tar.gz -C /var/www/html/\\n\\n[root@hadoop102 software]mkdir /var/www/html/hdp\\n[root@hadoop102 software]# tar -zxvf /opt/software/HDP-2.6.0.3-centos6-rpm.tar.gz -C /var/www/html/hdp\\n\\n[root@hadoop102 software]# tar -zxvf /opt/software/HDP-UTILS-1.1.0.21-centos6.tar.gz -C /var/www/html/hdp\\n\\n```\\n### \u521b\u5efa\u672c\u5730\u6e90\\n\\n```\\n[root@hadoop102 software]# cd /var/www/html/\\n[root@hadoop102 html]# createrepo  ./\\n\\n```\\n### \u5c06 Ambari \u5b58\u50a8\u5e93\u6587\u4ef6\u4e0b\u8f7d\u5230\u5b89\u88c5\u4e3b\u673a\u4e0a\u7684\u76ee\u5f55\u4e2d\\n\\n```\\n[root@hadoop102 yum.repos.d]# wget -nv http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.6.1.5/ambari.repo -O /etc/yum.repos.d/ambari.repo\\n```\\n\\n###  \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\uff0c\u914d\u7f6e\u4e3a\u672c\u5730\u6e90\\n\\n\u4fee\u6539 ambari.repo\uff0c\u914d\u7f6e\u4e3a\u672c\u5730\u6e90\\n\\n```\\n[root@hadoop102 html]# vim /etc/yum.repos.d/ambari.repo\\n\\n#VERSION_NUMBER=2.6.1.5-3\\n[ambari-2.6.1.5]\\nname=ambari Version - ambari-2.6.1.5\\nbaseurl=http://hadoop102/ambari/centos6/\\ngpgcheck=0\\ngpgkey=http://hadoop102/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\\nenabled=1\\npriority=1\\n\\n```\\n\\n\u4fee\u6539 hdp-util.repo\uff0c\u914d\u7f6e\u4e3a\u672c\u5730\u6e90\\n\\n```\\n[root@hadoop102 hdp]# vim /var/www/html/hdp/hdp-util.repo\\n[HDP-UTILS-1.1.0.21]\\nname=Hortonworks Data Platform Version - HDP-UTILS-1.1.0.21\\nbaseurl=http://hadoop102/hdp/\\ngpgcheck=0\\nenabled=1\\npriority=1\\n\\n```\\n\u4fee\u6539 hdp.repo\uff0c\u914d\u7f6e\u4e3a\u672c\u5730\u6e90\\n\\n```\\n[root@hadoop102 centos6]# \\nvim /var/www/html/hdp/HDP/centos6/hdp.repo\\n\\n#VERSION_NUMBER=2.6.0.3-8\\n[HDP-2.6.0.3]\\nname=HDP Version - HDP-2.6.0.3\\nbaseurl=http://hadoop102/hdp/HDP/centos6/\\ngpgcheck=0\\ngpgkey=http://hadoop102/hdp/HDP/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\\nenabled=1\\npriority=1\\n\\n\\n[HDP-UTILS-1.1.0.21]\\nname=HDP-UTILS Version - HDP-UTILS-1.1.0.21\\nbaseurl=http://hadoop102/hdp/\\ngpgcheck=0\\ngpgkey=http://hadoop102/hdp/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins\\nenabled=1\\npriority=1\\n\\n[root@hadoop102 ~]# yum clean all\\n[root@hadoop102 ~]# yum makecache\\n\\n\u67e5\u770b\u662f\u5426\u6709 Ambari\\n[root@hadoop102 ~]# yum repolist\\n\\n```\\n\\n\u67e5\u770b Ambari \u4e0e HDP \u8d44\u6e90\u7684\u8d44\u6e90\u5e93\u3002\\n\u4e5f\u53ef\u4ee5\u6253\u5f00\u6d4f\u89c8\u5668\u67e5\u770b\u4e00\u4e0b\uff1a\\nhttp://hadoop102/ambari/centos6/\\nhttp://hadoop102/hdp/HDP/centos6/\\nhttp://hadoop102/hdp/\\n\\n## \u5b89\u88c5 MySQL\\n\\nAmbari\u4f7f\u7528\u7684\u9ed8\u8ba4\u6570\u636e\u5e93\u662fPostgreSQL\uff0c\u7528\u4e8e\u5b58\u50a8\u5b89\u88c5\u5143\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u5b89\u88c5MySQL\u6570\u636e\u5e93\u4f5c\u4e3aAmbari\u5143\u6570\u636e\u5e93\u3002\\n\u6ce8\u610f\uff1a\u4e00\u5b9a\u8981\u7528root\u7528\u6237\u64cd\u4f5c\u5982\u4e0b\u6b65\u9aa4\uff1b\u5148\u5378\u8f7dMySQL\u518d\u5b89\u88c5\\n\\n1\uff09\u5b89\u88c5\u5305\u51c6\u5907\\n\\t\uff081\uff09\u67e5\u770b MySQL \u662f\u5426\u5b89\u88c5\\n```\\n[root@hadoop102 \u684c\u9762]# rpm -qa|grep mysql\\nmysql-libs-5.1.73-7.el6.x86_64\\n\\n```\\n\uff082\uff09\u5982\u679c\u5b89\u88c5\u4e86 MySQL\uff0c\u5c31\u5148\u5378\u8f7d\\n```\\n[root@hadoop102 \u684c\u9762]# rpm -e --nodeps mysql-libs-5.1.73-7.el6.x86_64\\n```\\n\\n\uff083\uff09\u89e3\u538b mysql-libs.zip \u6587\u4ef6\u5230\u5f53\u524d\u76ee\u5f55\\n\\n```\\n[root@hadoop102 software]# unzip mysql-libs.zip\\n[root@hadoop102 software]# ls\\nmysql-libs.zip\\nmysql-libs\\n\\n```\\n\\n\uff084\uff09\u8fdb\u5165\u5230 mysql-libs \u6587\u4ef6\u5939\u4e0b\\n\\n```\\n [root@hadoop102 mysql-libs]# ll\\n\u603b\u7528\u91cf 76048\\n-rw-r--r--. 1 root root 18509960 3\u6708  26 2015 MySQL-client-5.6.24-1.el6.x86_64.rpm\\n-rw-r--r--. 1 root root  3575135 12\u6708  1 2013 mysql-connector-java-5.1.27.tar.gz\\n-rw-r--r--. 1 root root 55782196 3\u6708  26 2015 MySQL-server-5.6.24-1.el6.x86_64.rpm\\n\\n```\\n2\uff09\u5b89\u88c5 MySQL \u670d\u52a1\u5668\\n\\n\\n\uff081\uff09\u5b89\u88c5 MySQL \u670d\u52a1\u7aef\\n```\\n[root@hadoop102 mysql-libs]# rpm -ivh MySQL-server-5.6.24-1.el6.x86_64.rpm\\n```\\n\uff082\uff09\u67e5\u770b\u4ea7\u751f\u7684\u968f\u673a\u5bc6\u7801\\n```\\n[root@hadoop102 mysql-libs]# cat /root/.mysql_secret\\nXrBwJEENp2yhVe4O\\n```\\n\uff083\uff09\u67e5\u770b MySQL \u72b6\u6001\\n```\\n[root@hadoop102 mysql-libs]# service mysql status\\n```\\n\uff084\uff09\u542f\u52a8 MySQL\\n```\\n[root@hadoop102 mysql-libs]# service mysql start\\n```\\n3\uff09\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\\n\uff081\uff09\u5b89\u88c5 MySQL \u5ba2\u6237\u7aef\\n```\\n[root@hadoop102 mysql-libs]# rpm -ivh MySQL-client-5.6.24-1.el6.x86_64.rpm\\n```\\n\uff082\uff09\u94fe\u63a5 MySQL \\n```\\n[root@hadoop102 mysql-libs]# mysql -uroot -pXrBwJEENp2yhVe4O\\n```\\n\uff083\uff09\u4fee\u6539\u5bc6\u7801\\n```\\nmysql>SET PASSWORD=PASSWORD(\'000000\');\\n```\\n\uff084\uff09\u9000\u51fa MySQL\\n```\\nmysql>exit\\n```\\n4\uff09MySQL \u4e2d user \u8868\u4e2d\u4e3b\u673a\u914d\u7f6e\\n\\n\u914d\u7f6e\u53ea\u8981\u662froot\u7528\u6237+\u5bc6\u7801\uff0c\u5728\u4efb\u4f55\u4e3b\u673a\u4e0a\u90fd\u80fd\u767b\u5f55 MySQL \u6570\u636e\u5e93\u3002\\n\\n\uff081\uff09\u8fdb\u5165 MySQL\\n```\\n[root@hadoop102 mysql-libs]# mysql -uroot -p000000\\n```\\n\uff082\uff09\u663e\u793a\u6570\u636e\u5e93\\n```\\nmysql>show databases;\\n```\\n\uff083\uff09\u4f7f\u7528 MySQL \u6570\u636e\u5e93\\n```\\nmysql>use mysql;\\n```\\n\uff084\uff09\u5c55\u793a MySQL \u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868\\n```\\nmysql>show tables;\\n```\\n\uff085\uff09\u5c55\u793a user \u8868\u7684\u7ed3\u6784\\n```\\nmysql>desc user;\\n```\\n\uff086\uff09\u67e5\u8be2 user \u8868\\n```\\nmysql>select User, Host, Password from user;\\n```\\n\uff087\uff09\u4fee\u6539 user \u8868\uff0c\u628a Host \u8868\u5185\u5bb9\u4fee\u6539\u4e3a %\\n```\\nmysql>update user set host=\'%\' where host=\'localhost\';\\n```\\n\uff088\uff09\u5220\u9664 root \u7528\u6237\u7684\u5176\u4ed6 host\\n```\\nmysql>\\ndelete from user where Host=\'hadoop102\';\\ndelete from user where Host=\'127.0.0.1\';\\ndelete from user where Host=\'::1\';\\n```\\n\uff089\uff09\u5237\u65b0\\n```\\nmysql>flush privileges;\\n```\\n\uff0810\uff09\u9000\u51fa\\n```\\nmysql>quit;\\n```\\n\\n## \u5b89\u88c5 Ambari\\n\\n1\uff09\u5b89\u88c5 ambari-server\\n```\\n [root@hadoop102 hdp]# yum install ambari-server\\n```\\n2\uff09 \u62f7\u8d1d mysql \u9a71\u52a8\\n\u5c06 mysql-connector-java.jar \u590d\u5236\u5230 /usr/share/java \u76ee\u5f55\u4e0b\u5e76\u6539\u540d\u4e3a mysql-connector-java.jar\\n```\\n[root@hadoop102 hdp]# mkdir /usr/share/java\\n\\n[root@hadoop102 hdp]# cp /opt/software/mysql-libs/mysql-connector-java-5.1.27/mysql-connector-java-5.1.27-bin.jar /usr/share/java/mysql-connector-java.jar\\n```\\n\u5c06 mysql-connector-java.jar \u590d\u5236\u5230 /var/lib/ambari-server/resources \u76ee\u5f55\u4e0b\u5e76\u6539\u540d\u4e3a mysql-jdbc-driver.jar\\n```\\n[root@hadoop102 hdp]# cp /usr/share/java/mysql-connector-java.jar /var/lib/ambari-server/resources/mysql-jdbc-driver.jar\\n```\\n\u4fee\u6539 ambari.properties \u6587\u4ef6\\n```\\n[root@hadoop102 hdp]#\\nvim\\t /etc/ambari-server/conf/ambari.properties\\n```\\n\u6dfb\u52a0\\n```\\nserver.jdbc.driver.path=/usr/share/java/mysql-connector-java.jar\\n```\\n\\n## \u5728 MySQL\u4e2d \u521b\u5efa\u6570\u636e\u5e93\\n\\n1\uff09\u521b\u5efa ambari \u5e93\\n```\\n[root@hadoop102 hdp]# mysql -u root -p000000 \\nmysql >create database ambari; \\n```\\n2\uff09\u4f7f\u7528 Ambari \u81ea\u5e26\u811a\u672c\u521b\u5efa\u8868\\n```\\nmysql >use ambari; \\nmysql>source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql;\\n```\\n3\uff09\u8d4b\u4e88\u7528\u6237 root \u6743\u9650\uff1a\\n```\\nmysql> grant all privileges on *.* to \'root\'@\'%\' identified by \'000000\'; \\n```\\n4\uff09\u5237\u65b0\\n```\\nmysql> flush privileges;\\n```\\n\\n## \u914d\u7f6e Ambari\\n\\n\u6267\u884c\\n```\\n[root@hadoop102 hdp]# ambari-server setup\\n```\\n\u4e0b\u9762\u662f\u914d\u7f6e\u6267\u884c\u6d41\u7a0b\uff0c\u6309\u7167\u63d0\u793a\u64cd\u4f5c\\n1\uff09 \u63d0\u793a\u662f\u5426\u81ea\u5b9a\u4e49\u8bbe\u7f6e\u3002\u8f93\u5165\uff1ay\\n```\\nCustomize user account for ambari-server daemon [y/n] (n)? y\\n```\\n2\uff09ambari-server \u8d26\u53f7\u3002\\n```\\nEnter user account for ambari-server daemon (root):\\n```\\n\u5982\u679c\u76f4\u63a5\u56de\u8f66\u5c31\u662f\u9ed8\u8ba4\u9009\u62e9 root \u7528\u6237\\n3\uff09\u8bbe\u7f6e JDK \u3002\u8f93\u5165\uff1a3\\n```\\nChecking JDK...\\nDo you want to change Oracle JDK [y/n] (n)? y\\n[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8\\n[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7\\n[3] Custom JDK\\n==============================================================================\\nEnter choice (1): 3\\n```\\n\u5982\u679c\u4e0a\u9762\u9009\u62e9 3 \u81ea\u5b9a\u4e49 JDK ,\u5219\u9700\u8981\u8bbe\u7f6e JAVA_HOME \u3002\\n```\\n\u8f93\u5165\uff1a/opt/module/jdk1.8.0_144\\nWARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.\\nWARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.\\nPath to JAVA_HOME: /opt/module/jdk1.8.0_144\\nValidating JDK on Ambari Server...done.\\nCompleting setup...\\n```\\n4\uff09\u6570\u636e\u5e93\u914d\u7f6e\u3002\u9009\u62e9\uff1ay\\n```\\nConfiguring database...\\nEnter advanced database configuration [y/n] (n)? y\\n```\\n5\uff09\u9009\u62e9\u6570\u636e\u5e93\u7c7b\u578b\u3002\u8f93\u5165\uff1a3\\n```\\nConfiguring database...\\n==============================================================================\\nChoose one of the following options:\\n[1] - PostgreSQL (Embedded)\\n[2] - Oracle\\n[3] - MySQL\\n[4] - PostgreSQL\\n[5] - Microsoft SQL Server (Tech Preview)\\n[6] - SQL Anywhere\\n==============================================================================\\nEnter choice (3): 3\\n```\\n6\uff09\u8bbe\u7f6e\u6570\u636e\u5e93\u7684\u5177\u4f53\u914d\u7f6e\u4fe1\u606f\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8f93\u5165\uff0c\u5982\u679c\u548c\u62ec\u53f7\u5185\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u56de\u8f66\u3002\u5982\u679c\u60f3\u91cd\u547d\u540d\uff0c\u5c31\u8f93\u5165\u3002\\n```\\nHostname (localhost):hadoop102\\nPort (3306):\\nDatabase name (ambari):\\nUsername (ambari):root\\nEnter Database Password (bigdata):000000\uff08\u8fd9\u91cc\u4e0d\u663e\u793a\uff09\\nRe-Enter password:000000\\n```\\n7\uff09\u5c06 Ambari \u6570\u636e\u5e93\u811a\u672c\u5bfc\u5165\u5230\u6570\u636e\u5e93\\n```\\nWARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql \\nProceed with configuring remote database connection properties [y/n] (y)?\\n```\\n\u5982\u679c\u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684\u6570\u636e\u5e93\uff0c\u5fc5\u987b\u5728\u542f\u52a8 Ambari \u670d\u52a1\u4e4b\u524d\u5bfc\u5165 Ambari \u7684 sql \u811a\u672c\u3002\\n\\n## \u542f\u52a8 Ambari\\n\\n\\n\u542f\u52a8\u547d\u4ee4\u4e3a\uff1a\\n```\\nambari-server start\\n```\\n\u505c\u6b62\u547d\u4ee4\u4e3a\uff1a\\n```\\nambari-server stop\\n```\\n\\n# HDP \u96c6\u7fa4\u90e8\u7f72\\n\\n## \u96c6\u7fa4\u642d\u5efa\\n\\n### \u8fdb\u5165\u767b\u5f55\u9875\u9762\\n\\n\u6d4f\u89c8\u5668\u8f93\u5165 http://hadoop102:8080/\\n\u9ed8\u8ba4\u7ba1\u7406\u5458\u8d26\u76ee\u5bc6\u7801\uff1aadmin\\n\\n![image.png](https://img-blog.csdnimg.cn/img_convert/240b4f6c236314128f41bdefe1459a63.png)\\n\\n### \u70b9\u51fb Launch Install Wizard\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-T2Gjsyfm-1603158899563)(https://www.rookiegao.top/upload/2020/04/image-755fcfef2ae945aa87f6eb5051946bf3.png)]\\n\\n\\n### \u8bbe\u7f6e\u96c6\u7fa4\u540d\u79f0\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-W7azVECe-1603158899565)(https://www.rookiegao.top/upload/2020/04/image-7ab5ebc1fb864aec88b163cd5d59a10e.png)]\\n\\n### \u9009\u62e9\u7248\u672c\u548c\u5b58\u50a8\u5e93\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-pUT8O4ZW-1603158899568)(https://www.rookiegao.top/upload/2020/04/image-1aeff24eef1648b987b6b170639c2cbd.png)]\\n\\n### \u586b\u5199\u672c\u5730\u5e93\u5730\u5740\\n\\n\u5728 redhat6 \u540e\u9762\u5206\u522b\u586b\u5199\\nhttp://hadoop102/hdp/HDP/centos6/\\nhttp://hadoop102/hdp/\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-X1ZdLTrG-1603158899569)(https://www.rookiegao.top/upload/2020/04/image-b59b078b8651406dbacfb2124f474b93.png)]\\n\\n### \u586b\u5199\u4e3b\u673a\u5730\u5740\u4ee5\u53ca\u4e3b\u8282\u70b9\u7684 id.rsa \u6587\u4ef6\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-pNsOUyCZ-1603158899571)(https://www.rookiegao.top/upload/2020/04/image-b8ec2e89e4d248839987d9ab65883286.png)]\\n\\n### \u7b49\u5f85\u5b89\u88c5\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-8HHJly8I-1603158899572)(https://www.rookiegao.top/upload/2020/04/image-4266c2e0dd9442b991e485636348d702.png)]\\n\\n\\n### \u9009\u62e9\u670d\u52a1\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-SPrAYQ4O-1603158899573)(https://www.rookiegao.top/upload/2020/04/image-d6cea6871a304aa5b5d4d5facf894e8b.png)]\\n\\n### \u9009\u62e9\u6bcf\u53f0\u673a\u5668\u7684\u89d2\u8272\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-5yu1iE6v-1603158899574)(https://www.rookiegao.top/upload/2020/04/image-59468675b6634b5a8aa2183d1f04cdb5.png)]\\n\\n### \u8bbe\u7f6e\u4ece\u8282\u70b9\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-14ORKozf-1603158899574)(https://www.rookiegao.top/upload/2020/04/image-35e11c10abde44049645bbb96f46deba.png)]\\n\\n### \u8f93\u5165\u4e24\u6b21 admin\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-nPiUewb4-1603158899575)(https://www.rookiegao.top/upload/2020/04/image-eefe8bb08f6a4f479ba43aa6a43d6baf.png)]\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-1e640xEp-1603158899576)(https://www.rookiegao.top/upload/2020/04/image-6a5f1d33e4314507ba38ea21ac006da0.png)]\\n\\n### \u7ee7\u7eed\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-9F2GWUJX-1603158899577)(https://www.rookiegao.top/upload/2020/04/image-6113b07b522b4fb49cc5473cbedbef05.png)]\\n\\n### \u7b49\u5f85\u670d\u52a1\u5b89\u88c5\u548c\u542f\u52a8\\n\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-FhjfK6eQ-1603158899578)(https://www.rookiegao.top/upload/2020/04/image-6f3f5fbd64fc4bc7b773bbe5519bc53e.png)]\\n\\n## \u5b89\u88c5 Hive\\n\\n### \u5728 /path/to/mysql/ \u76ee\u5f55\u4e0b\u653e\u7f6e Mysql \u9a71\u52a8\uff0c\u5e76\u91cd\u547d\u540d\u4e3a\uff1amysql-connector-java.jar\\n\\n```\\n[root@hadoop102 software]# mkdir -p /path/to/mysql/\\n[root@hadoop102 software]# cp /opt/software/mysql-libs/mysql-connector-java-5.1.27/mysql-connector-java-5.1.27-bin.jar  /path/to/mysql/mysql-connector-java.jar\\n\\n```\\n\\n### 4.2.2 \u6267\u884c ambari-server setup\\n\\n```\\n[root@hadoop102 software]# ambari-server setup --jdbc-db=mysql --jdbc-driver=/path/to/mysql/mysql-connector-java.jar\\n```\\n\\n### \u70b9\u51fb\u6dfb\u52a0\u670d\u52a1\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-J6JWAs8z-1603158899578)(https://www.rookiegao.top/upload/2020/04/image-cc3010276f944ff38841dbc51d18da49.png)]\\n\\n### \u9009\u62e9 hive\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-HM4TTIPL-1603158899579)(https://www.rookiegao.top/upload/2020/04/image-aa2cd722fcf044ea83c9ed00f3fe0235.png)]\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-lj8IWP8p-1603158899580)(https://www.rookiegao.top/upload/2020/04/image-1d824ca3c7b0408783a20ad45448797d.png)]\\n\\n### \u5206\u914d\u8282\u70b9\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-imHgz2oW-1603158899581)(https://www.rookiegao.top/upload/2020/04/image-59fae522da2d436dbccbe17ee1d02261.png)]\\n\\n### \u5206\u914d\u4ece\u5c5e\u548c\u5ba2\u6237\u7aef\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-4f7ohA3Q-1603158899583)(https://www.rookiegao.top/upload/2020/04/image-efcb5fa8560447a9a4dec92de8b547ac.png)]\\n\\n### \u914d\u7f6e hive \u6570\u636e\u5e93\u8fde\u63a5\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-EgPhbXIH-1603158899584)(https://www.rookiegao.top/upload/2020/04/image-cee5c5dea12340599d86056bababcf16.png)]\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-jHiZFz8h-1603158899585)(https://www.rookiegao.top/upload/2020/04/image-4a5992294a7c47a786497d34a27603dd.png)]\\n\\n### \u70b9\u51fb\u4e0b\u4e00\u6b65\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-ERZKSZoJ-1603158899586)(https://www.rookiegao.top/upload/2020/04/image-48a26d04846747319a287f00611d0ff6.png)]\\n\\n### \u7b49\u5f85\u5b89\u88c5\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-vqDLlKlu-1603158899587)(https://www.rookiegao.top/upload/2020/04/image-f43e454b6bfa4f9ab2afb99382260b59.png)]\\n\\n## \u914d\u7f6e HDFS-HA\\n\\n### \u6dfb\u52a0\u670d\u52a1\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-nAEOXeZq-1603158899588)(https://www.rookiegao.top/upload/2020/04/image-8af79aecd6f2438789f443e2f15e4e3a.png)]\\n\\n### \u586b\u5199 nameservice \u540d\u79f0\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-EwgVfUuJ-1603158899588)(https://www.rookiegao.top/upload/2020/04/image-89533cac0c964b67928a44cb56ef4357.png)]\\n\\n### \u89d2\u8272\u5206\u914d\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-1hRRKrx9-1603158899589)(https://www.rookiegao.top/upload/2020/04/image-793106bef20b4c00828d6528e6fe675c.png)]\\n\\n### \u76f4\u63a5\u4e0b\u4e00\u6b65\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-ewxayLjg-1603158899591)(https://www.rookiegao.top/upload/2020/04/image-af02556f77fd406e85af0ff1a01cd590.png)]\\n\\n### \u5b89\u88c5\u63d0\u793a\u6267\u884c\u547d\u4ee4\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-kTlK63ac-1603158899592)(https://www.rookiegao.top/upload/2020/04/image-adc1a4a53de449d2bfdd02ba5a0323e8.png)]\\n\\n### \u5b89\u88c5\u7ec4\u4ef6\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-pfiz5zRL-1603158899593)(https://www.rookiegao.top/upload/2020/04/image-179b5dba0e184d88b56c752514e863cf.png)]\\n\\n### \u6839\u636e\u9875\u9762\u63d0\u793a\u64cd\u4f5c\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-19VAhEJH-1603158899594)(https://www.rookiegao.top/upload/2020/04/image-108bc37ba1f841a7b427ffb0b63d0e3d.png)]\\n\\n### \u7b49\u5f85\u542f\u52a8\u7ec4\u4ef6\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-Ah7xsG0R-1603158899595)(https://www.rookiegao.top/upload/2020/04/image-f4c5e5dc1da9454a87a7c4f98ae6035e.png)]\\n\\n### \u5b89\u88c5\u9875\u9762\u63d0\u793a\u521d\u59cb\u5316 NameNode HA\\n\\n[\u5916\u94fe\u56fe\u7247\u8f6c\u5b58\u5931\u8d25,\u6e90\u7ad9\u53ef\u80fd\u6709\u9632\u76d7\u94fe\u673a\u5236,\u5efa\u8bae\u5c06\u56fe\u7247\u4fdd\u5b58\u4e0b\u6765\u76f4\u63a5\u4e0a\u4f20(img-gHUAFWHD-1603158899595)(https://www.rookiegao.top/upload/2020/04/image-9fe714719979426b9336e626ed9413d7.png)]\\n\\n### \u7b49\u5f85\u5b8c\u6210\\n\\n![image.png](https://img-blog.csdnimg.cn/img_convert/7207b64440f28a0e4bf62f00ca949ea0.png)\\n\\n**\u6ce8\uff1a\u56e0\u4e4b\u524d\u57df\u540d\u5230\u671f\uff0c\u6240\u4ee5\u90e8\u5206\u56fe\u7247\u4f1a\u5c55\u793a\u5931\u8d25\uff01**"}]}')}}]);